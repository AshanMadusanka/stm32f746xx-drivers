
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800234c  0800234c  0000334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002390  08002390  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002390  08002390  00003390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002398  08002398  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002398  08002398  00003398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080023a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000005c  080023fc  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080023fc  000043e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e24  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a3  00000000  00000000  00005eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00006650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001cd  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040a9  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d86  00000000  00000000  0000ab46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c85e  00000000  00000000  0000d8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001a12a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010fc  00000000  00000000  0001a170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0001b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002334 	.word	0x08002334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002334 	.word	0x08002334

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
    for (uint32_t i = 0; i < 500000/2; i++) {
        // Simple delay loop
    }
}

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0

    uint8_t dummy = 0xff;
 80002b6:	23ff      	movs	r3, #255	@ 0xff
 80002b8:	71fb      	strb	r3, [r7, #7]

    Slave_GPIO_InterruptPinInit();
 80002ba:	f000 f8af 	bl	800041c <Slave_GPIO_InterruptPinInit>

    //this function is used to initialize the GPIO pins to behave as SPI2 pins
    SPI_GpioInit();
 80002be:	f000 f85b 	bl	8000378 <SPI_GpioInit>

    //This function is used to initialize the SPI2 peripheral parameters
    SPI1_Inits();
 80002c2:	f000 f887 	bl	80003d4 <SPI1_Inits>
    * making SSOE 1 does NSS output enable.
    * The NSS pin is automatically managed by the hardware.
    * i.e when SPE=1 , NSS will be pulled to low
    * and NSS pin will be high when SPE=0
    */
    SPI_SSOEConfig(SPI1,ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4824      	ldr	r0, [pc, #144]	@ (800035c <main+0xac>)
 80002ca:	f001 f8aa 	bl	8001422 <SPI_SSOEConfig>

    SPI_IRQInterruptConfig(IRQ_NO_SPI1,ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	2023      	movs	r0, #35	@ 0x23
 80002d2:	f000 feeb 	bl	80010ac <SPI_IRQInterruptConfig>

    while(1){

        rcvStop = 0;
 80002d6:	4b22      	ldr	r3, [pc, #136]	@ (8000360 <main+0xb0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]

        while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80002dc:	bf00      	nop
 80002de:	4b21      	ldr	r3, [pc, #132]	@ (8000364 <main+0xb4>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0fa      	beq.n	80002de <main+0x2e>

        GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80002e8:	2100      	movs	r1, #0
 80002ea:	2017      	movs	r0, #23
 80002ec:	f000 fcec 	bl	8000cc8 <GPIO_IRQInterruptConfig>

        //enable the SPI2 peripheral
        SPI_PeripheralControl(SPI1,ENABLE);
 80002f0:	2101      	movs	r1, #1
 80002f2:	481a      	ldr	r0, [pc, #104]	@ (800035c <main+0xac>)
 80002f4:	f001 f87a 	bl	80013ec <SPI_PeripheralControl>


        while(!rcvStop)
 80002f8:	e012      	b.n	8000320 <main+0x70>
        {
            /* fetch the data from the SPI peripheral byte by byte in interrupt mode */
            while ( SPI_SendDataIT(&SPI1Handle,&dummy,1) == SPI_BUSY_IN_TX);
 80002fa:	bf00      	nop
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	4819      	ldr	r0, [pc, #100]	@ (8000368 <main+0xb8>)
 8000304:	f001 f8a8 	bl	8001458 <SPI_SendDataIT>
 8000308:	4603      	mov	r3, r0
 800030a:	2b02      	cmp	r3, #2
 800030c:	d0f6      	beq.n	80002fc <main+0x4c>
            while ( SPI_ReceiveDataIT(&SPI1Handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 800030e:	bf00      	nop
 8000310:	2201      	movs	r2, #1
 8000312:	4916      	ldr	r1, [pc, #88]	@ (800036c <main+0xbc>)
 8000314:	4814      	ldr	r0, [pc, #80]	@ (8000368 <main+0xb8>)
 8000316:	f001 f8c2 	bl	800149e <SPI_ReceiveDataIT>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	d0f7      	beq.n	8000310 <main+0x60>
        while(!rcvStop)
 8000320:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <main+0xb0>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0e7      	beq.n	80002fa <main+0x4a>
        }


        // confirm SPI is not busy
        while( SPI_GetFlagStatus(SPI1,SPI_BUSY_FLAG) );
 800032a:	bf00      	nop
 800032c:	2180      	movs	r1, #128	@ 0x80
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <main+0xac>)
 8000330:	f000 fea9 	bl	8001086 <SPI_GetFlagStatus>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f8      	bne.n	800032c <main+0x7c>

        //Disable the SPI2 peripheral
        SPI_PeripheralControl(SPI1,DISABLE);
 800033a:	2100      	movs	r1, #0
 800033c:	4807      	ldr	r0, [pc, #28]	@ (800035c <main+0xac>)
 800033e:	f001 f855 	bl	80013ec <SPI_PeripheralControl>

        printf("Rcvd data = %s\n",RcvBuff);
 8000342:	490b      	ldr	r1, [pc, #44]	@ (8000370 <main+0xc0>)
 8000344:	480b      	ldr	r0, [pc, #44]	@ (8000374 <main+0xc4>)
 8000346:	f001 f98f 	bl	8001668 <iprintf>

        dataAvailable = 0;
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <main+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]

        GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	2017      	movs	r0, #23
 8000354:	f000 fcb8 	bl	8000cc8 <GPIO_IRQInterruptConfig>
        rcvStop = 0;
 8000358:	e7bd      	b.n	80002d6 <main+0x26>
 800035a:	bf00      	nop
 800035c:	40013000 	.word	0x40013000
 8000360:	2000028d 	.word	0x2000028d
 8000364:	2000028e 	.word	0x2000028e
 8000368:	20000078 	.word	0x20000078
 800036c:	2000028c 	.word	0x2000028c
 8000370:	20000098 	.word	0x20000098
 8000374:	0800234c 	.word	0x0800234c

08000378 <SPI_GpioInit>:
    return 0;


}

void SPI_GpioInit() {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0

    GPIO_Handle_t SPIPins;

    SPIPins.pGPIOx = GPIOA; // Use GPIOA for SPI1
 800037e:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <SPI_GpioInit+0x58>)
 8000380:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT; // Set to alternate function mode
 8000382:	2302      	movs	r3, #2
 8000384:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5; // Alternate function for SPI1
 8000386:	2305      	movs	r3, #5
 8000388:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-pull output type
 800038a:	2300      	movs	r3, #0
 800038c:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // No pull-up or pull-down
 800038e:	2300      	movs	r3, #0
 8000390:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; // Fast speed
 8000392:	2302      	movs	r3, #2
 8000394:	72bb      	strb	r3, [r7, #10]

    // Configure SPI1 pins
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4; // NSS
 8000396:	2304      	movs	r3, #4
 8000398:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fab5 	bl	800090c <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5; // SCK
 80003a2:	2305      	movs	r3, #5
 80003a4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 faaf 	bl	800090c <GPIO_Init>

     SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6; // MISO
 80003ae:	2306      	movs	r3, #6
 80003b0:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&SPIPins);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 faa9 	bl	800090c <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7; // MOSI
 80003ba:	2307      	movs	r3, #7
 80003bc:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 faa3 	bl	800090c <GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020000 	.word	0x40020000

080003d4 <SPI1_Inits>:

void SPI1_Inits() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

    SPI1Handle.pSPIx = SPI1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SPI1_Inits+0x40>)
 80003da:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <SPI1_Inits+0x44>)
 80003dc:	601a      	str	r2, [r3, #0]
    SPI1Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <SPI1_Inits+0x40>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	715a      	strb	r2, [r3, #5]
    SPI1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <SPI1_Inits+0x40>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	711a      	strb	r2, [r3, #4]
    SPI1Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <SPI1_Inits+0x40>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	719a      	strb	r2, [r3, #6]
    SPI1Handle.SPIConfig.SPI_DS = SPI_DS_8BITS;
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <SPI1_Inits+0x40>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	71da      	strb	r2, [r3, #7]
    SPI1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80003f6:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <SPI1_Inits+0x40>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	721a      	strb	r2, [r3, #8]
    SPI1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <SPI1_Inits+0x40>)
 80003fe:	2200      	movs	r2, #0
 8000400:	725a      	strb	r2, [r3, #9]
    SPI1Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Disable software slave management
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <SPI1_Inits+0x40>)
 8000404:	2200      	movs	r2, #0
 8000406:	729a      	strb	r2, [r3, #10]

    SPI_Init(&SPI1Handle);
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <SPI1_Inits+0x40>)
 800040a:	f000 fdc9 	bl	8000fa0 <SPI_Init>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000078 	.word	0x20000078
 8000418:	40013000 	.word	0x40013000

0800041c <Slave_GPIO_InterruptPinInit>:
void Slave_GPIO_InterruptPinInit() {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
    GPIO_Handle_t spiIntPin = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]

    //this is led gpio configuration
    spiIntPin.pGPIOx = GPIOD;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <Slave_GPIO_InterruptPinInit+0x44>)
 800042e:	607b      	str	r3, [r7, #4]
    spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6; // Assuming PD6 is used for the interrupt
 8000430:	2306      	movs	r3, #6
 8000432:	723b      	strb	r3, [r7, #8]
    spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000434:	2304      	movs	r3, #4
 8000436:	727b      	strb	r3, [r7, #9]
    spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000438:	2300      	movs	r3, #0
 800043a:	72bb      	strb	r3, [r7, #10]
    spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800043c:	2301      	movs	r3, #1
 800043e:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&spiIntPin);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fa62 	bl	800090c <GPIO_Init>

    GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, 15); // Set priority for EXTI line 9-5
 8000448:	210f      	movs	r1, #15
 800044a:	2017      	movs	r0, #23
 800044c:	f000 fcc0 	bl	8000dd0 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000450:	2101      	movs	r1, #1
 8000452:	2017      	movs	r0, #23
 8000454:	f000 fc38 	bl	8000cc8 <GPIO_IRQInterruptConfig>
}
 8000458:	bf00      	nop
 800045a:	3710      	adds	r7, #16
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40020c00 	.word	0x40020c00

08000464 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    SPI_IRQHandling(&SPI1Handle);
 8000468:	4802      	ldr	r0, [pc, #8]	@ (8000474 <SPI1_IRQHandler+0x10>)
 800046a:	f000 fea3 	bl	80011b4 <SPI_IRQHandling>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000078 	.word	0x20000078

08000478 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

    GPIO_IRQHandler(GPIO_PIN_6);
 800047c:	2006      	movs	r0, #6
 800047e:	f000 fccf 	bl	8000e20 <GPIO_IRQHandler>
    dataAvailable = 1;
 8000482:	4b02      	ldr	r3, [pc, #8]	@ (800048c <EXTI9_5_IRQHandler+0x14>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000028e 	.word	0x2000028e

08000490 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
    static uint32_t i = 0;
    /* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
    if(AppEv == SPI_EVENT_RX_CMPLT)
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d11f      	bne.n	80004e2 <SPI_ApplicationEventCallback+0x52>
    {
        RcvBuff[i++] = ReadByte;
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <SPI_ApplicationEventCallback+0x5c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	4910      	ldr	r1, [pc, #64]	@ (80004ec <SPI_ApplicationEventCallback+0x5c>)
 80004aa:	600a      	str	r2, [r1, #0]
 80004ac:	4a10      	ldr	r2, [pc, #64]	@ (80004f0 <SPI_ApplicationEventCallback+0x60>)
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	b2d1      	uxtb	r1, r2
 80004b2:	4a10      	ldr	r2, [pc, #64]	@ (80004f4 <SPI_ApplicationEventCallback+0x64>)
 80004b4:	54d1      	strb	r1, [r2, r3]
        if(ReadByte == '\0' || ( i == MAX_LEN)){
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <SPI_ApplicationEventCallback+0x60>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d004      	beq.n	80004ca <SPI_ApplicationEventCallback+0x3a>
 80004c0:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <SPI_ApplicationEventCallback+0x5c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004c8:	d10b      	bne.n	80004e2 <SPI_ApplicationEventCallback+0x52>
            rcvStop = 1;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <SPI_ApplicationEventCallback+0x68>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
            RcvBuff[i-1] = '\0';
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <SPI_ApplicationEventCallback+0x5c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a07      	ldr	r2, [pc, #28]	@ (80004f4 <SPI_ApplicationEventCallback+0x64>)
 80004d8:	2100      	movs	r1, #0
 80004da:	54d1      	strb	r1, [r2, r3]
            i = 0;
 80004dc:	4b03      	ldr	r3, [pc, #12]	@ (80004ec <SPI_ApplicationEventCallback+0x5c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
        }
    }

}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	20000290 	.word	0x20000290
 80004f0:	2000028c 	.word	0x2000028c
 80004f4:	20000098 	.word	0x20000098
 80004f8:	2000028d 	.word	0x2000028d

080004fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <ITM_SendChar+0x44>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <ITM_SendChar+0x44>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000510:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <ITM_SendChar+0x48>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <ITM_SendChar+0x48>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800051e:	bf00      	nop
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f8      	beq.n	8000520 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800052e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000edfc 	.word	0xe000edfc
 8000544:	e0000e00 	.word	0xe0000e00

08000548 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e00a      	b.n	8000570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800055a:	f3af 8000 	nop.w
 800055e:	4601      	mov	r1, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	b2ca      	uxtb	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf0      	blt.n	800055a <_read+0x12>
  }

  return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e009      	b.n	80005a8 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffad 	bl	80004fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf1      	blt.n	8000594 <_write+0x12>
  }
  return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_close>:

int _close(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005e0:	605a      	str	r2, [r3, #4]
  return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f001 f8b0 	bl	80017b0 <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20050000 	.word	0x20050000
 800067c:	00000400 	.word	0x00000400
 8000680:	20000294 	.word	0x20000294
 8000684:	200003e8 	.word	0x200003e8

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f001 f881 	bl	80017bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fdf9 	bl	80002b0 <main>

080006be <LoopForever>:

LoopForever:
  b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006cc:	080023a0 	.word	0x080023a0
  ldr r2, =_sbss
 80006d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006d4:	200003e4 	.word	0x200003e4

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <GPIO_PeriClockControl>:
 * @brief  Enables or disables the peripheral clock for the given GPIO port.
 * @param  pGPIOx: Pointer to the GPIO port base address.
 * @param  EnorDi: ENABLE to enable the clock, DISABLE to disable the clock.
 * @retval None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]

    if(EnorDi == ENABLE){
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d178      	bne.n	80007e0 <GPIO_PeriClockControl+0x104>

      if (pGPIOx == GPIOA) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a7a      	ldr	r2, [pc, #488]	@ (80008dc <GPIO_PeriClockControl+0x200>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <GPIO_PeriClockControl+0x28>

          GPIOA_PCLK_EN();
 80006f6:	4b7a      	ldr	r3, [pc, #488]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a79      	ldr	r2, [pc, #484]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
      else if(pGPIOx == GPIOK) {

          GPIOK_PCLK_DI();
      }
  }
}
 8000702:	e0e5      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a77      	ldr	r2, [pc, #476]	@ (80008e4 <GPIO_PeriClockControl+0x208>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d106      	bne.n	800071a <GPIO_PeriClockControl+0x3e>
          GPIOB_PCLK_EN();
 800070c:	4b74      	ldr	r3, [pc, #464]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a73      	ldr	r2, [pc, #460]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000718:	e0da      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a72      	ldr	r2, [pc, #456]	@ (80008e8 <GPIO_PeriClockControl+0x20c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d106      	bne.n	8000730 <GPIO_PeriClockControl+0x54>
          GPIOC_PCLK_EN();
 8000722:	4b6f      	ldr	r3, [pc, #444]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a6e      	ldr	r2, [pc, #440]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800072e:	e0cf      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a6e      	ldr	r2, [pc, #440]	@ (80008ec <GPIO_PeriClockControl+0x210>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d106      	bne.n	8000746 <GPIO_PeriClockControl+0x6a>
          GPIOD_PCLK_EN();
 8000738:	4b69      	ldr	r3, [pc, #420]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073c:	4a68      	ldr	r2, [pc, #416]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000744:	e0c4      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a69      	ldr	r2, [pc, #420]	@ (80008f0 <GPIO_PeriClockControl+0x214>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <GPIO_PeriClockControl+0x80>
          GPIOE_PCLK_EN();
 800074e:	4b64      	ldr	r3, [pc, #400]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a63      	ldr	r2, [pc, #396]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800075a:	e0b9      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a65      	ldr	r2, [pc, #404]	@ (80008f4 <GPIO_PeriClockControl+0x218>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d106      	bne.n	8000772 <GPIO_PeriClockControl+0x96>
          GPIOF_PCLK_EN();
 8000764:	4b5e      	ldr	r3, [pc, #376]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a5d      	ldr	r2, [pc, #372]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000770:	e0ae      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a60      	ldr	r2, [pc, #384]	@ (80008f8 <GPIO_PeriClockControl+0x21c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d106      	bne.n	8000788 <GPIO_PeriClockControl+0xac>
          GPIOG_PCLK_EN();
 800077a:	4b59      	ldr	r3, [pc, #356]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a58      	ldr	r2, [pc, #352]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000786:	e0a3      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a5c      	ldr	r2, [pc, #368]	@ (80008fc <GPIO_PeriClockControl+0x220>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <GPIO_PeriClockControl+0xc2>
          GPIOH_PCLK_EN();
 8000790:	4b53      	ldr	r3, [pc, #332]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	4a52      	ldr	r2, [pc, #328]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800079c:	e098      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a57      	ldr	r2, [pc, #348]	@ (8000900 <GPIO_PeriClockControl+0x224>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <GPIO_PeriClockControl+0xd8>
          GPIOI_PCLK_EN();
 80007a6:	4b4e      	ldr	r3, [pc, #312]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a4d      	ldr	r2, [pc, #308]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b2:	e08d      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a53      	ldr	r2, [pc, #332]	@ (8000904 <GPIO_PeriClockControl+0x228>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d106      	bne.n	80007ca <GPIO_PeriClockControl+0xee>
          GPIOJ_PCLK_EN();
 80007bc:	4b48      	ldr	r3, [pc, #288]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	4a47      	ldr	r2, [pc, #284]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007c8:	e082      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a4e      	ldr	r2, [pc, #312]	@ (8000908 <GPIO_PeriClockControl+0x22c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d17e      	bne.n	80008d0 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_EN();
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a42      	ldr	r2, [pc, #264]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007de:	e077      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      if (pGPIOx == GPIOA) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a3e      	ldr	r2, [pc, #248]	@ (80008dc <GPIO_PeriClockControl+0x200>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d106      	bne.n	80007f6 <GPIO_PeriClockControl+0x11a>
          GPIOA_PCLK_DI();
 80007e8:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	4a3c      	ldr	r2, [pc, #240]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f4:	e06c      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <GPIO_PeriClockControl+0x208>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d106      	bne.n	800080c <GPIO_PeriClockControl+0x130>
          GPIOB_PCLK_DI();
 80007fe:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a37      	ldr	r2, [pc, #220]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000804:	f023 0302 	bic.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800080a:	e061      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a36      	ldr	r2, [pc, #216]	@ (80008e8 <GPIO_PeriClockControl+0x20c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <GPIO_PeriClockControl+0x146>
          GPIOC_PCLK_DI();
 8000814:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000818:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800081a:	f023 0304 	bic.w	r3, r3, #4
 800081e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000820:	e056      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a31      	ldr	r2, [pc, #196]	@ (80008ec <GPIO_PeriClockControl+0x210>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <GPIO_PeriClockControl+0x15c>
          GPIOD_PCLK_DI();
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000830:	f023 0308 	bic.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000836:	e04b      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <GPIO_PeriClockControl+0x214>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <GPIO_PeriClockControl+0x172>
          GPIOE_PCLK_DI();
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a26      	ldr	r2, [pc, #152]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000846:	f023 0310 	bic.w	r3, r3, #16
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084c:	e040      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a28      	ldr	r2, [pc, #160]	@ (80008f4 <GPIO_PeriClockControl+0x218>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <GPIO_PeriClockControl+0x188>
          GPIOF_PCLK_DI();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a21      	ldr	r2, [pc, #132]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800085c:	f023 0320 	bic.w	r3, r3, #32
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000862:	e035      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a24      	ldr	r2, [pc, #144]	@ (80008f8 <GPIO_PeriClockControl+0x21c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <GPIO_PeriClockControl+0x19e>
          GPIOG_PCLK_DI();
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000876:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000878:	e02a      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <GPIO_PeriClockControl+0x220>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <GPIO_PeriClockControl+0x1b4>
          GPIOH_PCLK_DI();
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 8000888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800088e:	e01f      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <GPIO_PeriClockControl+0x224>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <GPIO_PeriClockControl+0x1ca>
          GPIOI_PCLK_DI();
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4a10      	ldr	r2, [pc, #64]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 800089e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80008a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008a4:	e014      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <GPIO_PeriClockControl+0x228>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <GPIO_PeriClockControl+0x1e0>
          GPIOJ_PCLK_DI();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80008b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ba:	e009      	b.n	80008d0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <GPIO_PeriClockControl+0x22c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d105      	bne.n	80008d0 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_DI();
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <GPIO_PeriClockControl+0x204>)
 80008ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80008ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40021c00 	.word	0x40021c00
 8000900:	40022000 	.word	0x40022000
 8000904:	40022400 	.word	0x40022400
 8000908:	40022800 	.word	0x40022800

0800090c <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing pin configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

    GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fede 	bl	80006dc <GPIO_PeriClockControl>
    uint32_t temp = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]

    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d820      	bhi.n	800096e <GPIO_Init+0x62>

        temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2103      	movs	r1, #3
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	400a      	ands	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

        pGPIOHandle->pGPIOx->MODER |= temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6819      	ldr	r1, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	e0f3      	b.n	8000b56 <GPIO_Init+0x24a>
    }
    else {

        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d117      	bne.n	80009a6 <GPIO_Init+0x9a>

            // Configure FTSR
            EXTI->RTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000976:	4b58      	ldr	r3, [pc, #352]	@ (8000ad8 <GPIO_Init+0x1cc>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7912      	ldrb	r2, [r2, #4]
 800097e:	4611      	mov	r1, r2
 8000980:	2201      	movs	r2, #1
 8000982:	408a      	lsls	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a53      	ldr	r2, [pc, #332]	@ (8000ad8 <GPIO_Init+0x1cc>)
 800098a:	400b      	ands	r3, r1
 800098c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <GPIO_Init+0x1cc>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	7912      	ldrb	r2, [r2, #4]
 8000996:	4611      	mov	r1, r2
 8000998:	2201      	movs	r2, #1
 800099a:	408a      	lsls	r2, r1
 800099c:	4611      	mov	r1, r2
 800099e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009a0:	430b      	orrs	r3, r1
 80009a2:	60d3      	str	r3, [r2, #12]
 80009a4:	e031      	b.n	8000a0a <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d117      	bne.n	80009de <GPIO_Init+0xd2>

            // Configure RTSR
            EXTI->FTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ae:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	7912      	ldrb	r2, [r2, #4]
 80009b6:	4611      	mov	r1, r2
 80009b8:	2201      	movs	r2, #1
 80009ba:	408a      	lsls	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a45      	ldr	r2, [pc, #276]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009c2:	400b      	ands	r3, r1
 80009c4:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	7912      	ldrb	r2, [r2, #4]
 80009ce:	4611      	mov	r1, r2
 80009d0:	2201      	movs	r2, #1
 80009d2:	408a      	lsls	r2, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	4a40      	ldr	r2, [pc, #256]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009d8:	430b      	orrs	r3, r1
 80009da:	6093      	str	r3, [r2, #8]
 80009dc:	e015      	b.n	8000a0a <GPIO_Init+0xfe>
        }
        else {

            // Configure Both  FTSR, RTSR
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009de:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	7912      	ldrb	r2, [r2, #4]
 80009e6:	4611      	mov	r1, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	408a      	lsls	r2, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a3a      	ldr	r2, [pc, #232]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f4:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <GPIO_Init+0x1cc>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	7912      	ldrb	r2, [r2, #4]
 80009fc:	4611      	mov	r1, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	408a      	lsls	r2, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a34      	ldr	r2, [pc, #208]	@ (8000ad8 <GPIO_Init+0x1cc>)
 8000a06:	430b      	orrs	r3, r1
 8000a08:	60d3      	str	r3, [r2, #12]
        }

        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Unmask the interrupt for the pin
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <GPIO_Init+0x1cc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	7912      	ldrb	r2, [r2, #4]
 8000a12:	4611      	mov	r1, r2
 8000a14:	2201      	movs	r2, #1
 8000a16:	408a      	lsls	r2, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <GPIO_Init+0x1cc>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6013      	str	r3, [r2, #0]

        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // Determine the EXTI line register (0-3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4; // Determine the bit position within the register
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	72bb      	strb	r3, [r7, #10]
        SYSCFG_PCLK_EN();
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <GPIO_Init+0x1d0>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <GPIO_Init+0x1d0>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
        uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a27      	ldr	r2, [pc, #156]	@ (8000ae0 <GPIO_Init+0x1d4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d061      	beq.n	8000b0c <GPIO_Init+0x200>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a25      	ldr	r2, [pc, #148]	@ (8000ae4 <GPIO_Init+0x1d8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d040      	beq.n	8000ad4 <GPIO_Init+0x1c8>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <GPIO_Init+0x1dc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d039      	beq.n	8000ad0 <GPIO_Init+0x1c4>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <GPIO_Init+0x1e0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d032      	beq.n	8000acc <GPIO_Init+0x1c0>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <GPIO_Init+0x1e4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d02b      	beq.n	8000ac8 <GPIO_Init+0x1bc>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <GPIO_Init+0x1e8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d024      	beq.n	8000ac4 <GPIO_Init+0x1b8>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <GPIO_Init+0x1ec>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d01d      	beq.n	8000ac0 <GPIO_Init+0x1b4>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	@ (8000afc <GPIO_Init+0x1f0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d016      	beq.n	8000abc <GPIO_Init+0x1b0>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <GPIO_Init+0x1f4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d00f      	beq.n	8000ab8 <GPIO_Init+0x1ac>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <GPIO_Init+0x1f8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d008      	beq.n	8000ab4 <GPIO_Init+0x1a8>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <GPIO_Init+0x1fc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d101      	bne.n	8000ab0 <GPIO_Init+0x1a4>
 8000aac:	230a      	movs	r3, #10
 8000aae:	e02e      	b.n	8000b0e <GPIO_Init+0x202>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e02c      	b.n	8000b0e <GPIO_Init+0x202>
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	e02a      	b.n	8000b0e <GPIO_Init+0x202>
 8000ab8:	2308      	movs	r3, #8
 8000aba:	e028      	b.n	8000b0e <GPIO_Init+0x202>
 8000abc:	2307      	movs	r3, #7
 8000abe:	e026      	b.n	8000b0e <GPIO_Init+0x202>
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	e024      	b.n	8000b0e <GPIO_Init+0x202>
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	e022      	b.n	8000b0e <GPIO_Init+0x202>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	e020      	b.n	8000b0e <GPIO_Init+0x202>
 8000acc:	2303      	movs	r3, #3
 8000ace:	e01e      	b.n	8000b0e <GPIO_Init+0x202>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e01c      	b.n	8000b0e <GPIO_Init+0x202>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e01a      	b.n	8000b0e <GPIO_Init+0x202>
 8000ad8:	40013c00 	.word	0x40013c00
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40021400 	.word	0x40021400
 8000af8:	40021800 	.word	0x40021800
 8000afc:	40021c00 	.word	0x40021c00
 8000b00:	40022000 	.word	0x40022000
 8000b04:	40022400 	.word	0x40022400
 8000b08:	40022800 	.word	0x40022800
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	727b      	strb	r3, [r7, #9]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2)); // Clear bits
 8000b10:	4a6c      	ldr	r2, [pc, #432]	@ (8000cc4 <GPIO_Init+0x3b8>)
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	3302      	adds	r3, #2
 8000b16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b1a:	7abb      	ldrb	r3, [r7, #10]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	210f      	movs	r1, #15
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	4966      	ldr	r1, [pc, #408]	@ (8000cc4 <GPIO_Init+0x3b8>)
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	4002      	ands	r2, r0
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= port_code << (4 *temp2);
 8000b34:	4a63      	ldr	r2, [pc, #396]	@ (8000cc4 <GPIO_Init+0x3b8>)
 8000b36:	7afb      	ldrb	r3, [r7, #11]
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3e:	7a79      	ldrb	r1, [r7, #9]
 8000b40:	7abb      	ldrb	r3, [r7, #10]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	495e      	ldr	r1, [pc, #376]	@ (8000cc4 <GPIO_Init+0x3b8>)
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	4302      	orrs	r2, r0
 8000b50:	3302      	adds	r3, #2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    }

    temp = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a1b      	ldrb	r3, [r3, #8]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bit
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2301      	movs	r3, #1
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	400a      	ands	r2, r1
 8000b84:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6859      	ldr	r1, [r3, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	605a      	str	r2, [r3, #4]

    temp = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]

    temp =pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	799b      	ldrb	r3, [r3, #6]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2103      	movs	r1, #3
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6899      	ldr	r1, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	609a      	str	r2, [r3, #8]

    temp = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	79db      	ldrb	r3, [r3, #7]
 8000be2:	461a      	mov	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	791b      	ldrb	r3, [r3, #4]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68d9      	ldr	r1, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	60da      	str	r2, [r3, #12]

    temp = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d148      	bne.n	8000cbc <GPIO_Init+0x3b0>
        if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < 8) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	791b      	ldrb	r3, [r3, #4]
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	d822      	bhi.n	8000c78 <GPIO_Init+0x36c>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a1a      	ldr	r2, [r3, #32]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	210f      	movs	r1, #15
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	400a      	ands	r2, r1
 8000c60:	621a      	str	r2, [r3, #32]
            pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6a19      	ldr	r1, [r3, #32]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	621a      	str	r2, [r3, #32]
            temp = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
        }
    }
}
 8000c76:	e021      	b.n	8000cbc <GPIO_Init+0x3b0>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7a5b      	ldrb	r3, [r3, #9]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	3b08      	subs	r3, #8
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	3b08      	subs	r3, #8
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	400a      	ands	r2, r1
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013800 	.word	0x40013800

08000cc8 <GPIO_IRQInterruptConfig>:
 * @param  IRQNumber: IRQ number of the GPIO pin.
 * @param  IRQPriority: Priority of the interrupt.
 * @param  EnorDi: ENABLE to enable the interrupt, DISABLE to disable it.
 * @retval None
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDi) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]

    if(EnorDi == ENABLE) {
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d133      	bne.n	8000d46 <GPIO_IRQInterruptConfig+0x7e>

        if(IRQNumber <=31) {
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	d80a      	bhi.n	8000cfa <GPIO_IRQInterruptConfig+0x32>

            *NVIC_ISER0 |= (1 << IRQNumber);
 8000ce4:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <GPIO_IRQInterruptConfig+0xf0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	79fa      	ldrb	r2, [r7, #7]
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a31      	ldr	r2, [pc, #196]	@ (8000db8 <GPIO_IRQInterruptConfig+0xf0>)
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
        }
    }

    

}
 8000cf8:	e059      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 32 && IRQNumber <64) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	d90f      	bls.n	8000d20 <GPIO_IRQInterruptConfig+0x58>
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d04:	d80c      	bhi.n	8000d20 <GPIO_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <GPIO_IRQInterruptConfig+0xf4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	f002 021f 	and.w	r2, r2, #31
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	4611      	mov	r1, r2
 8000d18:	4a28      	ldr	r2, [pc, #160]	@ (8000dbc <GPIO_IRQInterruptConfig+0xf4>)
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e046      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber <96) {
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d24:	d943      	bls.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d2a:	d840      	bhi.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000d2c:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <GPIO_IRQInterruptConfig+0xf8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	f002 021f 	and.w	r2, r2, #31
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <GPIO_IRQInterruptConfig+0xf8>)
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	e033      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
        if(IRQNumber <=31) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b1f      	cmp	r3, #31
 8000d4a:	d80a      	bhi.n	8000d62 <GPIO_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <GPIO_IRQInterruptConfig+0xfc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	2101      	movs	r1, #1
 8000d54:	fa01 f202 	lsl.w	r2, r1, r2
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <GPIO_IRQInterruptConfig+0xfc>)
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	e025      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 32 && IRQNumber <64) {
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	d90f      	bls.n	8000d88 <GPIO_IRQInterruptConfig+0xc0>
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d6c:	d80c      	bhi.n	8000d88 <GPIO_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <GPIO_IRQInterruptConfig+0x100>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	f002 021f 	and.w	r2, r2, #31
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <GPIO_IRQInterruptConfig+0x100>)
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e012      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber <96) {
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d8c:	d90f      	bls.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d92:	d80c      	bhi.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <GPIO_IRQInterruptConfig+0x104>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	f002 021f 	and.w	r2, r2, #31
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <GPIO_IRQInterruptConfig+0x104>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	e7ff      	b.n	8000dae <GPIO_IRQInterruptConfig+0xe6>
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000e104 	.word	0xe000e104
 8000dc0:	e000e108 	.word	0xe000e108
 8000dc4:	e000e180 	.word	0xe000e180
 8000dc8:	e000e184 	.word	0xe000e184
 8000dcc:	e000e188 	.word	0xe000e188

08000dd0 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]

    uint8_t iprx = IRQNumber / 4 ; // Determine the interrupt priority register (IPRx Register)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4 ; // Determine the section within the register
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 *iprx_section) + (8-NO_PRIORITY_BITS_IMPLEMENTED); // Calculate the shift amount for the priority bits;
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3304      	adds	r3, #4
 8000df2:	737b      	strb	r3, [r7, #13]

    *(NVIC_PR_BASE_ADDR + iprx) |= IRQPriority << shift_amount; // Set the priority for the interrupt
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	009a      	lsls	r2, r3, #2
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <GPIO_IRQPriorityConfig+0x4c>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	7b7b      	ldrb	r3, [r7, #13]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	409a      	lsls	r2, r3
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	0098      	lsls	r0, r3, #2
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <GPIO_IRQPriorityConfig+0x4c>)
 8000e0a:	4403      	add	r3, r0
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]


}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e400 	.word	0xe000e400

08000e20 <GPIO_IRQHandler>:
/**
 * @brief  Handles the interrupt for a specific GPIO pin.
 * @param  PinNumber: Pin number that triggered the interrupt.
 * @retval None
 */
void GPIO_IRQHandler(uint8_t PinNumber) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]

    if(EXTI->PR & (1 << PinNumber)) { // Check if the interrupt is pending for the pin
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <GPIO_IRQHandler+0x3c>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d009      	beq.n	8000e50 <GPIO_IRQHandler+0x30>
        EXTI->PR |= (1 << PinNumber); // Clear the pending interrupt flag
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <GPIO_IRQHandler+0x3c>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <GPIO_IRQHandler+0x3c>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6153      	str	r3, [r2, #20]
        // Call the user-defined ISR function for the pin
        // This function should be defined by the user to handle the interrupt
        // Example: User_GPIO_IRQHandling(PinNumber);
    }
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <SPI_PeriClockControl>:
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_interrupt_handle(SPI_Handle_t *pSPIHandle);


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d141      	bne.n	8000ef6 <SPI_PeriClockControl+0x96>
        if(pSPIx == SPI1) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a43      	ldr	r2, [pc, #268]	@ (8000f84 <SPI_PeriClockControl+0x124>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d106      	bne.n	8000e88 <SPI_PeriClockControl+0x28>
            SPI1_PCLK_EN();
 8000e7a:	4b43      	ldr	r3, [pc, #268]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a42      	ldr	r2, [pc, #264]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
            SPI5_PCLK_DI();
        } else if(pSPIx == SPI6) {
            SPI6_PCLK_DI();
        }
    }
}
 8000e86:	e077      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI2) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a40      	ldr	r2, [pc, #256]	@ (8000f8c <SPI_PeriClockControl+0x12c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d106      	bne.n	8000e9e <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 8000e90:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	4a3c      	ldr	r2, [pc, #240]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e9c:	e06c      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI3) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8000f90 <SPI_PeriClockControl+0x130>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <SPI_PeriClockControl+0x54>
            SPI3_PCLK_EN();
 8000ea6:	4b38      	ldr	r3, [pc, #224]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a37      	ldr	r2, [pc, #220]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eb2:	e061      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI4) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a37      	ldr	r2, [pc, #220]	@ (8000f94 <SPI_PeriClockControl+0x134>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <SPI_PeriClockControl+0x6a>
            SPI4_PCLK_EN();
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec0:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000ec2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ec6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ec8:	e056      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI5) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a32      	ldr	r2, [pc, #200]	@ (8000f98 <SPI_PeriClockControl+0x138>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d106      	bne.n	8000ee0 <SPI_PeriClockControl+0x80>
            SPI5_PCLK_EN();
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ede:	e04b      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI6) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <SPI_PeriClockControl+0x13c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d147      	bne.n	8000f78 <SPI_PeriClockControl+0x118>
            SPI6_PCLK_EN();
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000eee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ef4:	e040      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        if(pSPIx == SPI1) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	@ (8000f84 <SPI_PeriClockControl+0x124>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d106      	bne.n	8000f0c <SPI_PeriClockControl+0xac>
            SPI1_PCLK_DI();
 8000efe:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f0a:	e035      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI2) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f8c <SPI_PeriClockControl+0x12c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d106      	bne.n	8000f22 <SPI_PeriClockControl+0xc2>
            SPI2_PCLK_DI();
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f1e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f20:	e02a      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI3) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <SPI_PeriClockControl+0x130>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d106      	bne.n	8000f38 <SPI_PeriClockControl+0xd8>
            SPI3_PCLK_DI();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f36:	e01f      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI4) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	@ (8000f94 <SPI_PeriClockControl+0x134>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d106      	bne.n	8000f4e <SPI_PeriClockControl+0xee>
            SPI4_PCLK_DI();
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f4c:	e014      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI5) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a11      	ldr	r2, [pc, #68]	@ (8000f98 <SPI_PeriClockControl+0x138>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d106      	bne.n	8000f64 <SPI_PeriClockControl+0x104>
            SPI5_PCLK_DI();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f62:	e009      	b.n	8000f78 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI6) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <SPI_PeriClockControl+0x13c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d105      	bne.n	8000f78 <SPI_PeriClockControl+0x118>
            SPI6_PCLK_DI();
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f70:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <SPI_PeriClockControl+0x128>)
 8000f72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f76:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40003800 	.word	0x40003800
 8000f90:	40003c00 	.word	0x40003c00
 8000f94:	40013400 	.word	0x40013400
 8000f98:	40015000 	.word	0x40015000
 8000f9c:	40015400 	.word	0x40015400

08000fa0 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

    uint32_t tempreg = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
    uint32_t tempreg2 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
    // Enable the peripheral clock
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff52 	bl	8000e60 <SPI_PeriClockControl>

    // Configure the SPI device mode
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
    // Configure the SPI bus configuration
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	795b      	ldrb	r3, [r3, #5]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d108      	bne.n	8000fe2 <SPI_Init+0x42>

        tempreg &= ~ (pSPIHandle->SPIConfig.SPI_BusConfig << SPI_CR1_BIDIMODE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	795b      	ldrb	r3, [r3, #5]
 8000fd4:	03db      	lsls	r3, r3, #15
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e014      	b.n	800100c <SPI_Init+0x6c>
    }
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d104      	bne.n	8000ff4 <SPI_Init+0x54>

        tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00b      	b.n	800100c <SPI_Init+0x6c>
    }
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	795b      	ldrb	r3, [r3, #5]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d107      	bne.n	800100c <SPI_Init+0x6c>

        tempreg &= ~(1 << SPI_CR1_BIDIOE);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100a:	60fb      	str	r3, [r7, #12]
    }
    // Configure the SPI clock speed
    tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	799b      	ldrb	r3, [r3, #6]
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

    // Configure the SPI data frame format
    tempreg2 |=(pSPIHandle->SPIConfig.SPI_DS << SPI_CR2_DS);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	79db      	ldrb	r3, [r3, #7]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4313      	orrs	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]

    // Configure the SPI software slave management
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7a1b      	ldrb	r3, [r3, #8]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    // Configure the SPI clock polarity
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a5b      	ldrb	r3, [r3, #9]
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    // Set FRXTH if using 8-bit data size
    if (pSPIHandle->SPIConfig.SPI_DS == SPI_DS_8BITS) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	79db      	ldrb	r3, [r3, #7]
 8001040:	2b07      	cmp	r3, #7
 8001042:	d108      	bne.n	8001056 <SPI_Init+0xb6>
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_FRXTH);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	e007      	b.n	8001066 <SPI_Init+0xc6>
    } else {
        pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_FRXTH);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001064:	605a      	str	r2, [r3, #4]
    }

    pSPIHandle->pSPIx->CR1 = tempreg;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	601a      	str	r2, [r3, #0]
    pSPIHandle->pSPIx->CR2 |= tempreg2;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <SPI_GetFlagStatus>:

void SPI_DeInit(SPI_RegDef_t *pSPIx) {
    pSPIx->CR1 = 0; // Reset the control register
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName) {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]

    if (pSPIx->SR & FlagName) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SPI_GetFlagStatus+0x1a>
        return FLAGSET;
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <SPI_GetFlagStatus+0x1c>
    }
    return FLAGRESET ;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SPI_IRQInterruptConfig>:
            pRxBuffer++;
        }
    }
}

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
    // Implementation for configuring SPI interrupt

    if(EnorDi == ENABLE) {
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d133      	bne.n	800112a <SPI_IRQInterruptConfig+0x7e>

        if(IRQNumber <=31) {
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b1f      	cmp	r3, #31
 80010c6:	d80a      	bhi.n	80010de <SPI_IRQInterruptConfig+0x32>

            *NVIC_ISER0 |= (1 << IRQNumber);
 80010c8:	4b34      	ldr	r3, [pc, #208]	@ (800119c <SPI_IRQInterruptConfig+0xf0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a31      	ldr	r2, [pc, #196]	@ (800119c <SPI_IRQInterruptConfig+0xf0>)
 80010d8:	430b      	orrs	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
        }
    }


}
 80010dc:	e059      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 32 && IRQNumber <64) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	d90f      	bls.n	8001104 <SPI_IRQInterruptConfig+0x58>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e8:	d80c      	bhi.n	8001104 <SPI_IRQInterruptConfig+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <SPI_IRQInterruptConfig+0xf4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	f002 021f 	and.w	r2, r2, #31
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	4611      	mov	r1, r2
 80010fc:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <SPI_IRQInterruptConfig+0xf4>)
 80010fe:	430b      	orrs	r3, r1
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e046      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber <96) {
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b3f      	cmp	r3, #63	@ 0x3f
 8001108:	d943      	bls.n	8001192 <SPI_IRQInterruptConfig+0xe6>
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b5f      	cmp	r3, #95	@ 0x5f
 800110e:	d840      	bhi.n	8001192 <SPI_IRQInterruptConfig+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <SPI_IRQInterruptConfig+0xf8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4611      	mov	r1, r2
 8001122:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <SPI_IRQInterruptConfig+0xf8>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	e033      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
        if(IRQNumber <=31) {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b1f      	cmp	r3, #31
 800112e:	d80a      	bhi.n	8001146 <SPI_IRQInterruptConfig+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <SPI_IRQInterruptConfig+0xfc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4611      	mov	r1, r2
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <SPI_IRQInterruptConfig+0xfc>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	e025      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 32 && IRQNumber <64) {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b1f      	cmp	r3, #31
 800114a:	d90f      	bls.n	800116c <SPI_IRQInterruptConfig+0xc0>
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001150:	d80c      	bhi.n	800116c <SPI_IRQInterruptConfig+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <SPI_IRQInterruptConfig+0x100>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	f002 021f 	and.w	r2, r2, #31
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	4611      	mov	r1, r2
 8001164:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <SPI_IRQInterruptConfig+0x100>)
 8001166:	430b      	orrs	r3, r1
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e012      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
        else if(IRQNumber >= 64 && IRQNumber <96) {
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001170:	d90f      	bls.n	8001192 <SPI_IRQInterruptConfig+0xe6>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b5f      	cmp	r3, #95	@ 0x5f
 8001176:	d80c      	bhi.n	8001192 <SPI_IRQInterruptConfig+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <SPI_IRQInterruptConfig+0x104>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	f002 021f 	and.w	r2, r2, #31
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	4611      	mov	r1, r2
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <SPI_IRQInterruptConfig+0x104>)
 800118c:	430b      	orrs	r3, r1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	e7ff      	b.n	8001192 <SPI_IRQInterruptConfig+0xe6>
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000e104 	.word	0xe000e104
 80011a4:	e000e108 	.word	0xe000e108
 80011a8:	e000e180 	.word	0xe000e180
 80011ac:	e000e184 	.word	0xe000e184
 80011b0:	e000e188 	.word	0xe000e188

080011b4 <SPI_IRQHandling>:

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
    // Implementation for configuring SPI interrupt priority
}

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    // Implementation for handling SPI interrupts
    // This function should check the status of the SPI peripheral and handle the interrupt accordingly
    uint32_t temp1, temp2;
    // Check if the TXE interrupt is enabled
    temp1 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
    temp2 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2) {
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <SPI_IRQHandling+0x32>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <SPI_IRQHandling+0x32>
        // Call the TXE interrupt handler
        spi_txe_interrupt_handle(pSPIHandle);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f82e 	bl	8001242 <spi_txe_interrupt_handle>
    }

    // Check if the RXNE interrupt is enabled
    temp1 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f0:	60fb      	str	r3, [r7, #12]
    temp2 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
    if (temp1 && temp2) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <SPI_IRQHandling+0x5c>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <SPI_IRQHandling+0x5c>
        // Call the RXNE interrupt handler
        spi_rxne_interrupt_handle(pSPIHandle);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f85a 	bl	80012c4 <spi_rxne_interrupt_handle>
    }
    // Check if the OVR interrupt is enabled
    temp1 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	60fb      	str	r3, [r7, #12]
    temp2 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001226:	60bb      	str	r3, [r7, #8]
    if(temp1 && temp2) {
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <SPI_IRQHandling+0x86>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <SPI_IRQHandling+0x86>
        // Call the OVR interrupt handler
        spi_ovr_interrupt_handle(pSPIHandle);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f88a 	bl	800134e <spi_ovr_interrupt_handle>
    }
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <spi_txe_interrupt_handle>:

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]

    // Check if the TxLen is greater than 0
    if (pSPIHandle->TxLen > 0) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d029      	beq.n	80012a6 <spi_txe_interrupt_handle+0x64>
        // Check if the data frame size is 16 bits
        if(((pSPIHandle->pSPIx->CR2 >> SPI_CR2_DS) & 0xF) == SPI_DS_16BITS) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d110      	bne.n	8001284 <spi_txe_interrupt_handle+0x42>
            // Load 16 bits of data into the data register
            pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60da      	str	r2, [r3, #12]
            // Decrement the length by 2 bytes
            pSPIHandle->TxLen -= 2;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	1e9a      	subs	r2, r3, #2
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	615a      	str	r2, [r3, #20]
            // Increment the buffer pointer by 2 bytes
            pSPIHandle->pTxBuffer += 2;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	1c9a      	adds	r2, r3, #2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e010      	b.n	80012a6 <spi_txe_interrupt_handle+0x64>
        } else {
            // Load 8 bits of data into the data register
            *((__vo uint8_t*)&pSPIHandle->pSPIx->DR) = *pSPIHandle->pTxBuffer;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	330c      	adds	r3, #12
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	701a      	strb	r2, [r3, #0]
            // Decrement the length by 1 byte
            pSPIHandle->TxLen--;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	615a      	str	r2, [r3, #20]
            // Increment the buffer pointer by 1 byte
            pSPIHandle->pTxBuffer++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
        }
    }

    // If TxLen is zero, disable the TXEIE interrupt and set TxState to ready
    if (pSPIHandle->TxLen == 0) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <spi_txe_interrupt_handle+0x7a>
        SPI_CloseTransmission(pSPIHandle);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f868 	bl	8001384 <SPI_CloseTransmission>
        SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT); // Notify the application that transmission is complete
 80012b4:	2101      	movs	r1, #1
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f8ea 	bl	8000490 <SPI_ApplicationEventCallback>
    }

}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <spi_rxne_interrupt_handle>:
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

    // Check if DS is 16-bit
    if(((pSPIHandle->pSPIx->CR2 >> SPI_CR2_DS) & 0xF) == SPI_DS_16BITS) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d116      	bne.n	800130a <spi_rxne_interrupt_handle+0x46>

        // Load pTxBuffer with 16 bits of data from the data register
        *((uint16_t*)pSPIHandle->pRxBuffer )= pSPIHandle->pSPIx->DR ;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	b292      	uxth	r2, r2
 80012e8:	801a      	strh	r2, [r3, #0]
        // Decrement length by 2 bytes
        pSPIHandle->RxLen--;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	1e5a      	subs	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
        pSPIHandle->RxLen--;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
        // Increment buffer pointer by 2 bytes
        (uint16_t*)pSPIHandle->pRxBuffer++;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	e012      	b.n	8001330 <spi_rxne_interrupt_handle+0x6c>
    }
    else {
        // Load pTxBuffer with 8 bits of data from the data register
        *pSPIHandle->pRxBuffer = *((__vo uint8_t*)&pSPIHandle->pSPIx->DR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f103 020c 	add.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
        // Decrement length by 1 byte
        pSPIHandle->RxLen--;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
        // Increment buffer pointer by 1 byte
        pSPIHandle->pRxBuffer++;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
    }
    // If RxLen is zero, disable the RXNEIE interrupt and set RxState to ready
    if(pSPIHandle->RxLen == 0) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <spi_rxne_interrupt_handle+0x82>

        SPI_CloseReception(pSPIHandle);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f83d 	bl	80013b8 <SPI_CloseReception>
        SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT); // Notify the application that reception is complete
 800133e:	2102      	movs	r1, #2
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff f8a5 	bl	8000490 <SPI_ApplicationEventCallback>
    }

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <spi_ovr_interrupt_handle>:
static void spi_ovr_interrupt_handle(SPI_Handle_t *pSPIHandle) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

    uint8_t temp;
    // Clear the OVR flag by reading the data register
    if(pSPIHandle->TxState != SPI_BUSY_IN_TX) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7f1b      	ldrb	r3, [r3, #28]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d007      	beq.n	800136e <spi_ovr_interrupt_handle+0x20>
        // If not busy in transmission, read the data register to clear the OVR flag
        temp = pSPIHandle->pSPIx->DR; // Read the data register
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	73fb      	strb	r3, [r7, #15]
        temp = pSPIHandle->pSPIx->SR; // Read the status register to clear the OVR flag
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	73fb      	strb	r3, [r7, #15]
        (void)temp; // Prevent unused variable warning
    }
    // Reset the RxState to ready
    pSPIHandle->RxState = SPI_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	775a      	strb	r2, [r3, #29]
    // Notify the application about the OVR error
    SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001374:	2103      	movs	r1, #3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f88a 	bl	8000490 <SPI_ApplicationEventCallback>

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

    pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800139a:	605a      	str	r2, [r3, #4]
    pSPIHandle->pTxBuffer = NULL; // Clear the TxBuffer pointer
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    pSPIHandle->TxLen = 0; // Reset the TxLen
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
    pSPIHandle->TxState = SPI_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	771a      	strb	r2, [r3, #28]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pSPIHandle) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

    pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ce:	605a      	str	r2, [r3, #4]
    pSPIHandle->pRxBuffer = NULL; // Clear the RxBuffer pointer
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
    pSPIHandle->RxLen = 0; // Reset the RxLen
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
    pSPIHandle->RxState = SPI_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	775a      	strb	r2, [r3, #29]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <SPI_PeripheralControl>:
    temp = pSPIx->DR; // Read the data register to clear the OVR flag
    temp = pSPIx->SR; // Read the status register to clear the OVR flag

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]

    if (EnorDi == ENABLE) {
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d106      	bne.n	800140c <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE); // Set the SPE bit to enable the SPI peripheral
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); // Clear the SPE bit to disable the SPI peripheral
    }
}
 800140a:	e005      	b.n	8001418 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); // Clear the SPE bit to disable the SPI peripheral
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <SPI_SSOEConfig>:
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI); // Clear the SSI bit to disable internal slave select
    }
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE); // Set the SSOE bit to enable software slave management
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f043 0204 	orr.w	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	605a      	str	r2, [r3, #4]
    } else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); // Clear the SSOE bit to disable software slave management
    }
}
 8001440:	e005      	b.n	800144e <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); // Clear the SSOE bit to disable software slave management
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 0204 	bic.w	r2, r3, #4
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SPI_SendDataIT>:

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len) {
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]

    uint8_t state = pSPIHandle->TxState;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	7f1b      	ldrb	r3, [r3, #28]
 8001468:	75fb      	strb	r3, [r7, #23]
    if (state != SPI_BUSY_IN_TX) {
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d010      	beq.n	8001492 <SPI_SendDataIT+0x3a>
        // Set the TxState to busy
        pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2202      	movs	r2, #2
 8001474:	771a      	strb	r2, [r3, #28]

        // Store the TxBuffer and Len in the handle
        pSPIHandle->pTxBuffer = pTxBuffer;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen = Len;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	615a      	str	r2, [r3, #20]

        // Enable the TXEIE interrupt
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001490:	605a      	str	r2, [r3, #4]
    }
    return state;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <SPI_ReceiveDataIT>:
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len) {
 800149e:	b480      	push	{r7}
 80014a0:	b087      	sub	sp, #28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]

    uint8_t state = pSPIHandle->RxState;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	7f5b      	ldrb	r3, [r3, #29]
 80014ae:	75fb      	strb	r3, [r7, #23]
    if (state != SPI_BUSY_IN_RX) {
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d010      	beq.n	80014d8 <SPI_ReceiveDataIT+0x3a>
        // Set the RxState to busy
        pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	775a      	strb	r2, [r3, #29]

        // Store the RxBuffer and Len in the handle
        pSPIHandle->pRxBuffer = pRxBuffer;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	611a      	str	r2, [r3, #16]
        pSPIHandle->RxLen = Len;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]

        // Enable the RXNEIE interrupt
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014d6:	605a      	str	r2, [r3, #4]
    }
    return state;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]

}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <std>:
 80014e4:	2300      	movs	r3, #0
 80014e6:	b510      	push	{r4, lr}
 80014e8:	4604      	mov	r4, r0
 80014ea:	e9c0 3300 	strd	r3, r3, [r0]
 80014ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014f2:	6083      	str	r3, [r0, #8]
 80014f4:	8181      	strh	r1, [r0, #12]
 80014f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80014f8:	81c2      	strh	r2, [r0, #14]
 80014fa:	6183      	str	r3, [r0, #24]
 80014fc:	4619      	mov	r1, r3
 80014fe:	2208      	movs	r2, #8
 8001500:	305c      	adds	r0, #92	@ 0x5c
 8001502:	f000 f906 	bl	8001712 <memset>
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <std+0x58>)
 8001508:	6263      	str	r3, [r4, #36]	@ 0x24
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <std+0x5c>)
 800150c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <std+0x60>)
 8001510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <std+0x64>)
 8001514:	6323      	str	r3, [r4, #48]	@ 0x30
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <std+0x68>)
 8001518:	6224      	str	r4, [r4, #32]
 800151a:	429c      	cmp	r4, r3
 800151c:	d006      	beq.n	800152c <std+0x48>
 800151e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001522:	4294      	cmp	r4, r2
 8001524:	d002      	beq.n	800152c <std+0x48>
 8001526:	33d0      	adds	r3, #208	@ 0xd0
 8001528:	429c      	cmp	r4, r3
 800152a:	d105      	bne.n	8001538 <std+0x54>
 800152c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001534:	f000 b966 	b.w	8001804 <__retarget_lock_init_recursive>
 8001538:	bd10      	pop	{r4, pc}
 800153a:	bf00      	nop
 800153c:	0800168d 	.word	0x0800168d
 8001540:	080016af 	.word	0x080016af
 8001544:	080016e7 	.word	0x080016e7
 8001548:	0800170b 	.word	0x0800170b
 800154c:	20000298 	.word	0x20000298

08001550 <stdio_exit_handler>:
 8001550:	4a02      	ldr	r2, [pc, #8]	@ (800155c <stdio_exit_handler+0xc>)
 8001552:	4903      	ldr	r1, [pc, #12]	@ (8001560 <stdio_exit_handler+0x10>)
 8001554:	4803      	ldr	r0, [pc, #12]	@ (8001564 <stdio_exit_handler+0x14>)
 8001556:	f000 b869 	b.w	800162c <_fwalk_sglue>
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000
 8001560:	08002095 	.word	0x08002095
 8001564:	20000010 	.word	0x20000010

08001568 <cleanup_stdio>:
 8001568:	6841      	ldr	r1, [r0, #4]
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <cleanup_stdio+0x34>)
 800156c:	4299      	cmp	r1, r3
 800156e:	b510      	push	{r4, lr}
 8001570:	4604      	mov	r4, r0
 8001572:	d001      	beq.n	8001578 <cleanup_stdio+0x10>
 8001574:	f000 fd8e 	bl	8002094 <_fflush_r>
 8001578:	68a1      	ldr	r1, [r4, #8]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <cleanup_stdio+0x38>)
 800157c:	4299      	cmp	r1, r3
 800157e:	d002      	beq.n	8001586 <cleanup_stdio+0x1e>
 8001580:	4620      	mov	r0, r4
 8001582:	f000 fd87 	bl	8002094 <_fflush_r>
 8001586:	68e1      	ldr	r1, [r4, #12]
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <cleanup_stdio+0x3c>)
 800158a:	4299      	cmp	r1, r3
 800158c:	d004      	beq.n	8001598 <cleanup_stdio+0x30>
 800158e:	4620      	mov	r0, r4
 8001590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001594:	f000 bd7e 	b.w	8002094 <_fflush_r>
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	20000298 	.word	0x20000298
 80015a0:	20000300 	.word	0x20000300
 80015a4:	20000368 	.word	0x20000368

080015a8 <global_stdio_init.part.0>:
 80015a8:	b510      	push	{r4, lr}
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <global_stdio_init.part.0+0x30>)
 80015ac:	4c0b      	ldr	r4, [pc, #44]	@ (80015dc <global_stdio_init.part.0+0x34>)
 80015ae:	4a0c      	ldr	r2, [pc, #48]	@ (80015e0 <global_stdio_init.part.0+0x38>)
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4620      	mov	r0, r4
 80015b4:	2200      	movs	r2, #0
 80015b6:	2104      	movs	r1, #4
 80015b8:	f7ff ff94 	bl	80014e4 <std>
 80015bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015c0:	2201      	movs	r2, #1
 80015c2:	2109      	movs	r1, #9
 80015c4:	f7ff ff8e 	bl	80014e4 <std>
 80015c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015cc:	2202      	movs	r2, #2
 80015ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015d2:	2112      	movs	r1, #18
 80015d4:	f7ff bf86 	b.w	80014e4 <std>
 80015d8:	200003d0 	.word	0x200003d0
 80015dc:	20000298 	.word	0x20000298
 80015e0:	08001551 	.word	0x08001551

080015e4 <__sfp_lock_acquire>:
 80015e4:	4801      	ldr	r0, [pc, #4]	@ (80015ec <__sfp_lock_acquire+0x8>)
 80015e6:	f000 b90e 	b.w	8001806 <__retarget_lock_acquire_recursive>
 80015ea:	bf00      	nop
 80015ec:	200003d9 	.word	0x200003d9

080015f0 <__sfp_lock_release>:
 80015f0:	4801      	ldr	r0, [pc, #4]	@ (80015f8 <__sfp_lock_release+0x8>)
 80015f2:	f000 b909 	b.w	8001808 <__retarget_lock_release_recursive>
 80015f6:	bf00      	nop
 80015f8:	200003d9 	.word	0x200003d9

080015fc <__sinit>:
 80015fc:	b510      	push	{r4, lr}
 80015fe:	4604      	mov	r4, r0
 8001600:	f7ff fff0 	bl	80015e4 <__sfp_lock_acquire>
 8001604:	6a23      	ldr	r3, [r4, #32]
 8001606:	b11b      	cbz	r3, 8001610 <__sinit+0x14>
 8001608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800160c:	f7ff bff0 	b.w	80015f0 <__sfp_lock_release>
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__sinit+0x28>)
 8001612:	6223      	str	r3, [r4, #32]
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__sinit+0x2c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f5      	bne.n	8001608 <__sinit+0xc>
 800161c:	f7ff ffc4 	bl	80015a8 <global_stdio_init.part.0>
 8001620:	e7f2      	b.n	8001608 <__sinit+0xc>
 8001622:	bf00      	nop
 8001624:	08001569 	.word	0x08001569
 8001628:	200003d0 	.word	0x200003d0

0800162c <_fwalk_sglue>:
 800162c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001630:	4607      	mov	r7, r0
 8001632:	4688      	mov	r8, r1
 8001634:	4614      	mov	r4, r2
 8001636:	2600      	movs	r6, #0
 8001638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800163c:	f1b9 0901 	subs.w	r9, r9, #1
 8001640:	d505      	bpl.n	800164e <_fwalk_sglue+0x22>
 8001642:	6824      	ldr	r4, [r4, #0]
 8001644:	2c00      	cmp	r4, #0
 8001646:	d1f7      	bne.n	8001638 <_fwalk_sglue+0xc>
 8001648:	4630      	mov	r0, r6
 800164a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800164e:	89ab      	ldrh	r3, [r5, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d907      	bls.n	8001664 <_fwalk_sglue+0x38>
 8001654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001658:	3301      	adds	r3, #1
 800165a:	d003      	beq.n	8001664 <_fwalk_sglue+0x38>
 800165c:	4629      	mov	r1, r5
 800165e:	4638      	mov	r0, r7
 8001660:	47c0      	blx	r8
 8001662:	4306      	orrs	r6, r0
 8001664:	3568      	adds	r5, #104	@ 0x68
 8001666:	e7e9      	b.n	800163c <_fwalk_sglue+0x10>

08001668 <iprintf>:
 8001668:	b40f      	push	{r0, r1, r2, r3}
 800166a:	b507      	push	{r0, r1, r2, lr}
 800166c:	4906      	ldr	r1, [pc, #24]	@ (8001688 <iprintf+0x20>)
 800166e:	ab04      	add	r3, sp, #16
 8001670:	6808      	ldr	r0, [r1, #0]
 8001672:	f853 2b04 	ldr.w	r2, [r3], #4
 8001676:	6881      	ldr	r1, [r0, #8]
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	f000 f9e7 	bl	8001a4c <_vfiprintf_r>
 800167e:	b003      	add	sp, #12
 8001680:	f85d eb04 	ldr.w	lr, [sp], #4
 8001684:	b004      	add	sp, #16
 8001686:	4770      	bx	lr
 8001688:	2000000c 	.word	0x2000000c

0800168c <__sread>:
 800168c:	b510      	push	{r4, lr}
 800168e:	460c      	mov	r4, r1
 8001690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001694:	f000 f868 	bl	8001768 <_read_r>
 8001698:	2800      	cmp	r0, #0
 800169a:	bfab      	itete	ge
 800169c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800169e:	89a3      	ldrhlt	r3, [r4, #12]
 80016a0:	181b      	addge	r3, r3, r0
 80016a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80016a6:	bfac      	ite	ge
 80016a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80016aa:	81a3      	strhlt	r3, [r4, #12]
 80016ac:	bd10      	pop	{r4, pc}

080016ae <__swrite>:
 80016ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b2:	461f      	mov	r7, r3
 80016b4:	898b      	ldrh	r3, [r1, #12]
 80016b6:	05db      	lsls	r3, r3, #23
 80016b8:	4605      	mov	r5, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	4616      	mov	r6, r2
 80016be:	d505      	bpl.n	80016cc <__swrite+0x1e>
 80016c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c4:	2302      	movs	r3, #2
 80016c6:	2200      	movs	r2, #0
 80016c8:	f000 f83c 	bl	8001744 <_lseek_r>
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016d6:	81a3      	strh	r3, [r4, #12]
 80016d8:	4632      	mov	r2, r6
 80016da:	463b      	mov	r3, r7
 80016dc:	4628      	mov	r0, r5
 80016de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016e2:	f000 b853 	b.w	800178c <_write_r>

080016e6 <__sseek>:
 80016e6:	b510      	push	{r4, lr}
 80016e8:	460c      	mov	r4, r1
 80016ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ee:	f000 f829 	bl	8001744 <_lseek_r>
 80016f2:	1c43      	adds	r3, r0, #1
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	bf15      	itete	ne
 80016f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80016fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80016fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001702:	81a3      	strheq	r3, [r4, #12]
 8001704:	bf18      	it	ne
 8001706:	81a3      	strhne	r3, [r4, #12]
 8001708:	bd10      	pop	{r4, pc}

0800170a <__sclose>:
 800170a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170e:	f000 b809 	b.w	8001724 <_close_r>

08001712 <memset>:
 8001712:	4402      	add	r2, r0
 8001714:	4603      	mov	r3, r0
 8001716:	4293      	cmp	r3, r2
 8001718:	d100      	bne.n	800171c <memset+0xa>
 800171a:	4770      	bx	lr
 800171c:	f803 1b01 	strb.w	r1, [r3], #1
 8001720:	e7f9      	b.n	8001716 <memset+0x4>
	...

08001724 <_close_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4d06      	ldr	r5, [pc, #24]	@ (8001740 <_close_r+0x1c>)
 8001728:	2300      	movs	r3, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	602b      	str	r3, [r5, #0]
 8001730:	f7fe ff43 	bl	80005ba <_close>
 8001734:	1c43      	adds	r3, r0, #1
 8001736:	d102      	bne.n	800173e <_close_r+0x1a>
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	b103      	cbz	r3, 800173e <_close_r+0x1a>
 800173c:	6023      	str	r3, [r4, #0]
 800173e:	bd38      	pop	{r3, r4, r5, pc}
 8001740:	200003d4 	.word	0x200003d4

08001744 <_lseek_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4d07      	ldr	r5, [pc, #28]	@ (8001764 <_lseek_r+0x20>)
 8001748:	4604      	mov	r4, r0
 800174a:	4608      	mov	r0, r1
 800174c:	4611      	mov	r1, r2
 800174e:	2200      	movs	r2, #0
 8001750:	602a      	str	r2, [r5, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	f7fe ff55 	bl	8000602 <_lseek>
 8001758:	1c43      	adds	r3, r0, #1
 800175a:	d102      	bne.n	8001762 <_lseek_r+0x1e>
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	b103      	cbz	r3, 8001762 <_lseek_r+0x1e>
 8001760:	6023      	str	r3, [r4, #0]
 8001762:	bd38      	pop	{r3, r4, r5, pc}
 8001764:	200003d4 	.word	0x200003d4

08001768 <_read_r>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4d07      	ldr	r5, [pc, #28]	@ (8001788 <_read_r+0x20>)
 800176c:	4604      	mov	r4, r0
 800176e:	4608      	mov	r0, r1
 8001770:	4611      	mov	r1, r2
 8001772:	2200      	movs	r2, #0
 8001774:	602a      	str	r2, [r5, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	f7fe fee6 	bl	8000548 <_read>
 800177c:	1c43      	adds	r3, r0, #1
 800177e:	d102      	bne.n	8001786 <_read_r+0x1e>
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	b103      	cbz	r3, 8001786 <_read_r+0x1e>
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	200003d4 	.word	0x200003d4

0800178c <_write_r>:
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	4d07      	ldr	r5, [pc, #28]	@ (80017ac <_write_r+0x20>)
 8001790:	4604      	mov	r4, r0
 8001792:	4608      	mov	r0, r1
 8001794:	4611      	mov	r1, r2
 8001796:	2200      	movs	r2, #0
 8001798:	602a      	str	r2, [r5, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	f7fe fef1 	bl	8000582 <_write>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_write_r+0x1e>
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_write_r+0x1e>
 80017a8:	6023      	str	r3, [r4, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	200003d4 	.word	0x200003d4

080017b0 <__errno>:
 80017b0:	4b01      	ldr	r3, [pc, #4]	@ (80017b8 <__errno+0x8>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__libc_init_array>:
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	4d0d      	ldr	r5, [pc, #52]	@ (80017f4 <__libc_init_array+0x38>)
 80017c0:	4c0d      	ldr	r4, [pc, #52]	@ (80017f8 <__libc_init_array+0x3c>)
 80017c2:	1b64      	subs	r4, r4, r5
 80017c4:	10a4      	asrs	r4, r4, #2
 80017c6:	2600      	movs	r6, #0
 80017c8:	42a6      	cmp	r6, r4
 80017ca:	d109      	bne.n	80017e0 <__libc_init_array+0x24>
 80017cc:	4d0b      	ldr	r5, [pc, #44]	@ (80017fc <__libc_init_array+0x40>)
 80017ce:	4c0c      	ldr	r4, [pc, #48]	@ (8001800 <__libc_init_array+0x44>)
 80017d0:	f000 fdb0 	bl	8002334 <_init>
 80017d4:	1b64      	subs	r4, r4, r5
 80017d6:	10a4      	asrs	r4, r4, #2
 80017d8:	2600      	movs	r6, #0
 80017da:	42a6      	cmp	r6, r4
 80017dc:	d105      	bne.n	80017ea <__libc_init_array+0x2e>
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e4:	4798      	blx	r3
 80017e6:	3601      	adds	r6, #1
 80017e8:	e7ee      	b.n	80017c8 <__libc_init_array+0xc>
 80017ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ee:	4798      	blx	r3
 80017f0:	3601      	adds	r6, #1
 80017f2:	e7f2      	b.n	80017da <__libc_init_array+0x1e>
 80017f4:	08002398 	.word	0x08002398
 80017f8:	08002398 	.word	0x08002398
 80017fc:	08002398 	.word	0x08002398
 8001800:	0800239c 	.word	0x0800239c

08001804 <__retarget_lock_init_recursive>:
 8001804:	4770      	bx	lr

08001806 <__retarget_lock_acquire_recursive>:
 8001806:	4770      	bx	lr

08001808 <__retarget_lock_release_recursive>:
 8001808:	4770      	bx	lr
	...

0800180c <_free_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	4605      	mov	r5, r0
 8001810:	2900      	cmp	r1, #0
 8001812:	d041      	beq.n	8001898 <_free_r+0x8c>
 8001814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001818:	1f0c      	subs	r4, r1, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	bfb8      	it	lt
 800181e:	18e4      	addlt	r4, r4, r3
 8001820:	f000 f8e0 	bl	80019e4 <__malloc_lock>
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <_free_r+0x90>)
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	b933      	cbnz	r3, 8001838 <_free_r+0x2c>
 800182a:	6063      	str	r3, [r4, #4]
 800182c:	6014      	str	r4, [r2, #0]
 800182e:	4628      	mov	r0, r5
 8001830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001834:	f000 b8dc 	b.w	80019f0 <__malloc_unlock>
 8001838:	42a3      	cmp	r3, r4
 800183a:	d908      	bls.n	800184e <_free_r+0x42>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	1821      	adds	r1, r4, r0
 8001840:	428b      	cmp	r3, r1
 8001842:	bf01      	itttt	eq
 8001844:	6819      	ldreq	r1, [r3, #0]
 8001846:	685b      	ldreq	r3, [r3, #4]
 8001848:	1809      	addeq	r1, r1, r0
 800184a:	6021      	streq	r1, [r4, #0]
 800184c:	e7ed      	b.n	800182a <_free_r+0x1e>
 800184e:	461a      	mov	r2, r3
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	b10b      	cbz	r3, 8001858 <_free_r+0x4c>
 8001854:	42a3      	cmp	r3, r4
 8001856:	d9fa      	bls.n	800184e <_free_r+0x42>
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	1850      	adds	r0, r2, r1
 800185c:	42a0      	cmp	r0, r4
 800185e:	d10b      	bne.n	8001878 <_free_r+0x6c>
 8001860:	6820      	ldr	r0, [r4, #0]
 8001862:	4401      	add	r1, r0
 8001864:	1850      	adds	r0, r2, r1
 8001866:	4283      	cmp	r3, r0
 8001868:	6011      	str	r1, [r2, #0]
 800186a:	d1e0      	bne.n	800182e <_free_r+0x22>
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	6053      	str	r3, [r2, #4]
 8001872:	4408      	add	r0, r1
 8001874:	6010      	str	r0, [r2, #0]
 8001876:	e7da      	b.n	800182e <_free_r+0x22>
 8001878:	d902      	bls.n	8001880 <_free_r+0x74>
 800187a:	230c      	movs	r3, #12
 800187c:	602b      	str	r3, [r5, #0]
 800187e:	e7d6      	b.n	800182e <_free_r+0x22>
 8001880:	6820      	ldr	r0, [r4, #0]
 8001882:	1821      	adds	r1, r4, r0
 8001884:	428b      	cmp	r3, r1
 8001886:	bf04      	itt	eq
 8001888:	6819      	ldreq	r1, [r3, #0]
 800188a:	685b      	ldreq	r3, [r3, #4]
 800188c:	6063      	str	r3, [r4, #4]
 800188e:	bf04      	itt	eq
 8001890:	1809      	addeq	r1, r1, r0
 8001892:	6021      	streq	r1, [r4, #0]
 8001894:	6054      	str	r4, [r2, #4]
 8001896:	e7ca      	b.n	800182e <_free_r+0x22>
 8001898:	bd38      	pop	{r3, r4, r5, pc}
 800189a:	bf00      	nop
 800189c:	200003e0 	.word	0x200003e0

080018a0 <sbrk_aligned>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4e0f      	ldr	r6, [pc, #60]	@ (80018e0 <sbrk_aligned+0x40>)
 80018a4:	460c      	mov	r4, r1
 80018a6:	6831      	ldr	r1, [r6, #0]
 80018a8:	4605      	mov	r5, r0
 80018aa:	b911      	cbnz	r1, 80018b2 <sbrk_aligned+0x12>
 80018ac:	f000 fcae 	bl	800220c <_sbrk_r>
 80018b0:	6030      	str	r0, [r6, #0]
 80018b2:	4621      	mov	r1, r4
 80018b4:	4628      	mov	r0, r5
 80018b6:	f000 fca9 	bl	800220c <_sbrk_r>
 80018ba:	1c43      	adds	r3, r0, #1
 80018bc:	d103      	bne.n	80018c6 <sbrk_aligned+0x26>
 80018be:	f04f 34ff 	mov.w	r4, #4294967295
 80018c2:	4620      	mov	r0, r4
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	1cc4      	adds	r4, r0, #3
 80018c8:	f024 0403 	bic.w	r4, r4, #3
 80018cc:	42a0      	cmp	r0, r4
 80018ce:	d0f8      	beq.n	80018c2 <sbrk_aligned+0x22>
 80018d0:	1a21      	subs	r1, r4, r0
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 fc9a 	bl	800220c <_sbrk_r>
 80018d8:	3001      	adds	r0, #1
 80018da:	d1f2      	bne.n	80018c2 <sbrk_aligned+0x22>
 80018dc:	e7ef      	b.n	80018be <sbrk_aligned+0x1e>
 80018de:	bf00      	nop
 80018e0:	200003dc 	.word	0x200003dc

080018e4 <_malloc_r>:
 80018e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018e8:	1ccd      	adds	r5, r1, #3
 80018ea:	f025 0503 	bic.w	r5, r5, #3
 80018ee:	3508      	adds	r5, #8
 80018f0:	2d0c      	cmp	r5, #12
 80018f2:	bf38      	it	cc
 80018f4:	250c      	movcc	r5, #12
 80018f6:	2d00      	cmp	r5, #0
 80018f8:	4606      	mov	r6, r0
 80018fa:	db01      	blt.n	8001900 <_malloc_r+0x1c>
 80018fc:	42a9      	cmp	r1, r5
 80018fe:	d904      	bls.n	800190a <_malloc_r+0x26>
 8001900:	230c      	movs	r3, #12
 8001902:	6033      	str	r3, [r6, #0]
 8001904:	2000      	movs	r0, #0
 8001906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800190a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019e0 <_malloc_r+0xfc>
 800190e:	f000 f869 	bl	80019e4 <__malloc_lock>
 8001912:	f8d8 3000 	ldr.w	r3, [r8]
 8001916:	461c      	mov	r4, r3
 8001918:	bb44      	cbnz	r4, 800196c <_malloc_r+0x88>
 800191a:	4629      	mov	r1, r5
 800191c:	4630      	mov	r0, r6
 800191e:	f7ff ffbf 	bl	80018a0 <sbrk_aligned>
 8001922:	1c43      	adds	r3, r0, #1
 8001924:	4604      	mov	r4, r0
 8001926:	d158      	bne.n	80019da <_malloc_r+0xf6>
 8001928:	f8d8 4000 	ldr.w	r4, [r8]
 800192c:	4627      	mov	r7, r4
 800192e:	2f00      	cmp	r7, #0
 8001930:	d143      	bne.n	80019ba <_malloc_r+0xd6>
 8001932:	2c00      	cmp	r4, #0
 8001934:	d04b      	beq.n	80019ce <_malloc_r+0xea>
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	4639      	mov	r1, r7
 800193a:	4630      	mov	r0, r6
 800193c:	eb04 0903 	add.w	r9, r4, r3
 8001940:	f000 fc64 	bl	800220c <_sbrk_r>
 8001944:	4581      	cmp	r9, r0
 8001946:	d142      	bne.n	80019ce <_malloc_r+0xea>
 8001948:	6821      	ldr	r1, [r4, #0]
 800194a:	1a6d      	subs	r5, r5, r1
 800194c:	4629      	mov	r1, r5
 800194e:	4630      	mov	r0, r6
 8001950:	f7ff ffa6 	bl	80018a0 <sbrk_aligned>
 8001954:	3001      	adds	r0, #1
 8001956:	d03a      	beq.n	80019ce <_malloc_r+0xea>
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	442b      	add	r3, r5
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	f8d8 3000 	ldr.w	r3, [r8]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	bb62      	cbnz	r2, 80019c0 <_malloc_r+0xdc>
 8001966:	f8c8 7000 	str.w	r7, [r8]
 800196a:	e00f      	b.n	800198c <_malloc_r+0xa8>
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	1b52      	subs	r2, r2, r5
 8001970:	d420      	bmi.n	80019b4 <_malloc_r+0xd0>
 8001972:	2a0b      	cmp	r2, #11
 8001974:	d917      	bls.n	80019a6 <_malloc_r+0xc2>
 8001976:	1961      	adds	r1, r4, r5
 8001978:	42a3      	cmp	r3, r4
 800197a:	6025      	str	r5, [r4, #0]
 800197c:	bf18      	it	ne
 800197e:	6059      	strne	r1, [r3, #4]
 8001980:	6863      	ldr	r3, [r4, #4]
 8001982:	bf08      	it	eq
 8001984:	f8c8 1000 	streq.w	r1, [r8]
 8001988:	5162      	str	r2, [r4, r5]
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	4630      	mov	r0, r6
 800198e:	f000 f82f 	bl	80019f0 <__malloc_unlock>
 8001992:	f104 000b 	add.w	r0, r4, #11
 8001996:	1d23      	adds	r3, r4, #4
 8001998:	f020 0007 	bic.w	r0, r0, #7
 800199c:	1ac2      	subs	r2, r0, r3
 800199e:	bf1c      	itt	ne
 80019a0:	1a1b      	subne	r3, r3, r0
 80019a2:	50a3      	strne	r3, [r4, r2]
 80019a4:	e7af      	b.n	8001906 <_malloc_r+0x22>
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	42a3      	cmp	r3, r4
 80019aa:	bf0c      	ite	eq
 80019ac:	f8c8 2000 	streq.w	r2, [r8]
 80019b0:	605a      	strne	r2, [r3, #4]
 80019b2:	e7eb      	b.n	800198c <_malloc_r+0xa8>
 80019b4:	4623      	mov	r3, r4
 80019b6:	6864      	ldr	r4, [r4, #4]
 80019b8:	e7ae      	b.n	8001918 <_malloc_r+0x34>
 80019ba:	463c      	mov	r4, r7
 80019bc:	687f      	ldr	r7, [r7, #4]
 80019be:	e7b6      	b.n	800192e <_malloc_r+0x4a>
 80019c0:	461a      	mov	r2, r3
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	42a3      	cmp	r3, r4
 80019c6:	d1fb      	bne.n	80019c0 <_malloc_r+0xdc>
 80019c8:	2300      	movs	r3, #0
 80019ca:	6053      	str	r3, [r2, #4]
 80019cc:	e7de      	b.n	800198c <_malloc_r+0xa8>
 80019ce:	230c      	movs	r3, #12
 80019d0:	6033      	str	r3, [r6, #0]
 80019d2:	4630      	mov	r0, r6
 80019d4:	f000 f80c 	bl	80019f0 <__malloc_unlock>
 80019d8:	e794      	b.n	8001904 <_malloc_r+0x20>
 80019da:	6005      	str	r5, [r0, #0]
 80019dc:	e7d6      	b.n	800198c <_malloc_r+0xa8>
 80019de:	bf00      	nop
 80019e0:	200003e0 	.word	0x200003e0

080019e4 <__malloc_lock>:
 80019e4:	4801      	ldr	r0, [pc, #4]	@ (80019ec <__malloc_lock+0x8>)
 80019e6:	f7ff bf0e 	b.w	8001806 <__retarget_lock_acquire_recursive>
 80019ea:	bf00      	nop
 80019ec:	200003d8 	.word	0x200003d8

080019f0 <__malloc_unlock>:
 80019f0:	4801      	ldr	r0, [pc, #4]	@ (80019f8 <__malloc_unlock+0x8>)
 80019f2:	f7ff bf09 	b.w	8001808 <__retarget_lock_release_recursive>
 80019f6:	bf00      	nop
 80019f8:	200003d8 	.word	0x200003d8

080019fc <__sfputc_r>:
 80019fc:	6893      	ldr	r3, [r2, #8]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	b410      	push	{r4}
 8001a04:	6093      	str	r3, [r2, #8]
 8001a06:	da07      	bge.n	8001a18 <__sfputc_r+0x1c>
 8001a08:	6994      	ldr	r4, [r2, #24]
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	db01      	blt.n	8001a12 <__sfputc_r+0x16>
 8001a0e:	290a      	cmp	r1, #10
 8001a10:	d102      	bne.n	8001a18 <__sfputc_r+0x1c>
 8001a12:	bc10      	pop	{r4}
 8001a14:	f000 bb66 	b.w	80020e4 <__swbuf_r>
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	1c58      	adds	r0, r3, #1
 8001a1c:	6010      	str	r0, [r2, #0]
 8001a1e:	7019      	strb	r1, [r3, #0]
 8001a20:	4608      	mov	r0, r1
 8001a22:	bc10      	pop	{r4}
 8001a24:	4770      	bx	lr

08001a26 <__sfputs_r>:
 8001a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a28:	4606      	mov	r6, r0
 8001a2a:	460f      	mov	r7, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	18d5      	adds	r5, r2, r3
 8001a30:	42ac      	cmp	r4, r5
 8001a32:	d101      	bne.n	8001a38 <__sfputs_r+0x12>
 8001a34:	2000      	movs	r0, #0
 8001a36:	e007      	b.n	8001a48 <__sfputs_r+0x22>
 8001a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a3c:	463a      	mov	r2, r7
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f7ff ffdc 	bl	80019fc <__sfputc_r>
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d1f3      	bne.n	8001a30 <__sfputs_r+0xa>
 8001a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a4c <_vfiprintf_r>:
 8001a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a50:	460d      	mov	r5, r1
 8001a52:	b09d      	sub	sp, #116	@ 0x74
 8001a54:	4614      	mov	r4, r2
 8001a56:	4698      	mov	r8, r3
 8001a58:	4606      	mov	r6, r0
 8001a5a:	b118      	cbz	r0, 8001a64 <_vfiprintf_r+0x18>
 8001a5c:	6a03      	ldr	r3, [r0, #32]
 8001a5e:	b90b      	cbnz	r3, 8001a64 <_vfiprintf_r+0x18>
 8001a60:	f7ff fdcc 	bl	80015fc <__sinit>
 8001a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a66:	07d9      	lsls	r1, r3, #31
 8001a68:	d405      	bmi.n	8001a76 <_vfiprintf_r+0x2a>
 8001a6a:	89ab      	ldrh	r3, [r5, #12]
 8001a6c:	059a      	lsls	r2, r3, #22
 8001a6e:	d402      	bmi.n	8001a76 <_vfiprintf_r+0x2a>
 8001a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a72:	f7ff fec8 	bl	8001806 <__retarget_lock_acquire_recursive>
 8001a76:	89ab      	ldrh	r3, [r5, #12]
 8001a78:	071b      	lsls	r3, r3, #28
 8001a7a:	d501      	bpl.n	8001a80 <_vfiprintf_r+0x34>
 8001a7c:	692b      	ldr	r3, [r5, #16]
 8001a7e:	b99b      	cbnz	r3, 8001aa8 <_vfiprintf_r+0x5c>
 8001a80:	4629      	mov	r1, r5
 8001a82:	4630      	mov	r0, r6
 8001a84:	f000 fb6c 	bl	8002160 <__swsetup_r>
 8001a88:	b170      	cbz	r0, 8001aa8 <_vfiprintf_r+0x5c>
 8001a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a8c:	07dc      	lsls	r4, r3, #31
 8001a8e:	d504      	bpl.n	8001a9a <_vfiprintf_r+0x4e>
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	b01d      	add	sp, #116	@ 0x74
 8001a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	0598      	lsls	r0, r3, #22
 8001a9e:	d4f7      	bmi.n	8001a90 <_vfiprintf_r+0x44>
 8001aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aa2:	f7ff feb1 	bl	8001808 <__retarget_lock_release_recursive>
 8001aa6:	e7f3      	b.n	8001a90 <_vfiprintf_r+0x44>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aac:	2320      	movs	r3, #32
 8001aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ab6:	2330      	movs	r3, #48	@ 0x30
 8001ab8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001c68 <_vfiprintf_r+0x21c>
 8001abc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ac0:	f04f 0901 	mov.w	r9, #1
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	469a      	mov	sl, r3
 8001ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001acc:	b10a      	cbz	r2, 8001ad2 <_vfiprintf_r+0x86>
 8001ace:	2a25      	cmp	r2, #37	@ 0x25
 8001ad0:	d1f9      	bne.n	8001ac6 <_vfiprintf_r+0x7a>
 8001ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ad6:	d00b      	beq.n	8001af0 <_vfiprintf_r+0xa4>
 8001ad8:	465b      	mov	r3, fp
 8001ada:	4622      	mov	r2, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff ffa1 	bl	8001a26 <__sfputs_r>
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	f000 80a7 	beq.w	8001c38 <_vfiprintf_r+0x1ec>
 8001aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001aec:	445a      	add	r2, fp
 8001aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8001af0:	f89a 3000 	ldrb.w	r3, [sl]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 809f 	beq.w	8001c38 <_vfiprintf_r+0x1ec>
 8001afa:	2300      	movs	r3, #0
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b04:	f10a 0a01 	add.w	sl, sl, #1
 8001b08:	9304      	str	r3, [sp, #16]
 8001b0a:	9307      	str	r3, [sp, #28]
 8001b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b12:	4654      	mov	r4, sl
 8001b14:	2205      	movs	r2, #5
 8001b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b1a:	4853      	ldr	r0, [pc, #332]	@ (8001c68 <_vfiprintf_r+0x21c>)
 8001b1c:	f7fe fb78 	bl	8000210 <memchr>
 8001b20:	9a04      	ldr	r2, [sp, #16]
 8001b22:	b9d8      	cbnz	r0, 8001b5c <_vfiprintf_r+0x110>
 8001b24:	06d1      	lsls	r1, r2, #27
 8001b26:	bf44      	itt	mi
 8001b28:	2320      	movmi	r3, #32
 8001b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b2e:	0713      	lsls	r3, r2, #28
 8001b30:	bf44      	itt	mi
 8001b32:	232b      	movmi	r3, #43	@ 0x2b
 8001b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b38:	f89a 3000 	ldrb.w	r3, [sl]
 8001b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b3e:	d015      	beq.n	8001b6c <_vfiprintf_r+0x120>
 8001b40:	9a07      	ldr	r2, [sp, #28]
 8001b42:	4654      	mov	r4, sl
 8001b44:	2000      	movs	r0, #0
 8001b46:	f04f 0c0a 	mov.w	ip, #10
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b50:	3b30      	subs	r3, #48	@ 0x30
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	d94b      	bls.n	8001bee <_vfiprintf_r+0x1a2>
 8001b56:	b1b0      	cbz	r0, 8001b86 <_vfiprintf_r+0x13a>
 8001b58:	9207      	str	r2, [sp, #28]
 8001b5a:	e014      	b.n	8001b86 <_vfiprintf_r+0x13a>
 8001b5c:	eba0 0308 	sub.w	r3, r0, r8
 8001b60:	fa09 f303 	lsl.w	r3, r9, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	9304      	str	r3, [sp, #16]
 8001b68:	46a2      	mov	sl, r4
 8001b6a:	e7d2      	b.n	8001b12 <_vfiprintf_r+0xc6>
 8001b6c:	9b03      	ldr	r3, [sp, #12]
 8001b6e:	1d19      	adds	r1, r3, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	9103      	str	r1, [sp, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bfbb      	ittet	lt
 8001b78:	425b      	neglt	r3, r3
 8001b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8001b7e:	9307      	strge	r3, [sp, #28]
 8001b80:	9307      	strlt	r3, [sp, #28]
 8001b82:	bfb8      	it	lt
 8001b84:	9204      	strlt	r2, [sp, #16]
 8001b86:	7823      	ldrb	r3, [r4, #0]
 8001b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b8a:	d10a      	bne.n	8001ba2 <_vfiprintf_r+0x156>
 8001b8c:	7863      	ldrb	r3, [r4, #1]
 8001b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b90:	d132      	bne.n	8001bf8 <_vfiprintf_r+0x1ac>
 8001b92:	9b03      	ldr	r3, [sp, #12]
 8001b94:	1d1a      	adds	r2, r3, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	9203      	str	r2, [sp, #12]
 8001b9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b9e:	3402      	adds	r4, #2
 8001ba0:	9305      	str	r3, [sp, #20]
 8001ba2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001c6c <_vfiprintf_r+0x220>
 8001ba6:	7821      	ldrb	r1, [r4, #0]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4650      	mov	r0, sl
 8001bac:	f7fe fb30 	bl	8000210 <memchr>
 8001bb0:	b138      	cbz	r0, 8001bc2 <_vfiprintf_r+0x176>
 8001bb2:	9b04      	ldr	r3, [sp, #16]
 8001bb4:	eba0 000a 	sub.w	r0, r0, sl
 8001bb8:	2240      	movs	r2, #64	@ 0x40
 8001bba:	4082      	lsls	r2, r0
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	3401      	adds	r4, #1
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bc6:	482a      	ldr	r0, [pc, #168]	@ (8001c70 <_vfiprintf_r+0x224>)
 8001bc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bcc:	2206      	movs	r2, #6
 8001bce:	f7fe fb1f 	bl	8000210 <memchr>
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d03f      	beq.n	8001c56 <_vfiprintf_r+0x20a>
 8001bd6:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <_vfiprintf_r+0x228>)
 8001bd8:	bb1b      	cbnz	r3, 8001c22 <_vfiprintf_r+0x1d6>
 8001bda:	9b03      	ldr	r3, [sp, #12]
 8001bdc:	3307      	adds	r3, #7
 8001bde:	f023 0307 	bic.w	r3, r3, #7
 8001be2:	3308      	adds	r3, #8
 8001be4:	9303      	str	r3, [sp, #12]
 8001be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001be8:	443b      	add	r3, r7
 8001bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bec:	e76a      	b.n	8001ac4 <_vfiprintf_r+0x78>
 8001bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	e7a8      	b.n	8001b4a <_vfiprintf_r+0xfe>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	3401      	adds	r4, #1
 8001bfc:	9305      	str	r3, [sp, #20]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0c0a 	mov.w	ip, #10
 8001c04:	4620      	mov	r0, r4
 8001c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c0a:	3a30      	subs	r2, #48	@ 0x30
 8001c0c:	2a09      	cmp	r2, #9
 8001c0e:	d903      	bls.n	8001c18 <_vfiprintf_r+0x1cc>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0c6      	beq.n	8001ba2 <_vfiprintf_r+0x156>
 8001c14:	9105      	str	r1, [sp, #20]
 8001c16:	e7c4      	b.n	8001ba2 <_vfiprintf_r+0x156>
 8001c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e7f0      	b.n	8001c04 <_vfiprintf_r+0x1b8>
 8001c22:	ab03      	add	r3, sp, #12
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	462a      	mov	r2, r5
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_vfiprintf_r+0x22c>)
 8001c2a:	a904      	add	r1, sp, #16
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f3af 8000 	nop.w
 8001c32:	4607      	mov	r7, r0
 8001c34:	1c78      	adds	r0, r7, #1
 8001c36:	d1d6      	bne.n	8001be6 <_vfiprintf_r+0x19a>
 8001c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c3a:	07d9      	lsls	r1, r3, #31
 8001c3c:	d405      	bmi.n	8001c4a <_vfiprintf_r+0x1fe>
 8001c3e:	89ab      	ldrh	r3, [r5, #12]
 8001c40:	059a      	lsls	r2, r3, #22
 8001c42:	d402      	bmi.n	8001c4a <_vfiprintf_r+0x1fe>
 8001c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c46:	f7ff fddf 	bl	8001808 <__retarget_lock_release_recursive>
 8001c4a:	89ab      	ldrh	r3, [r5, #12]
 8001c4c:	065b      	lsls	r3, r3, #25
 8001c4e:	f53f af1f 	bmi.w	8001a90 <_vfiprintf_r+0x44>
 8001c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c54:	e71e      	b.n	8001a94 <_vfiprintf_r+0x48>
 8001c56:	ab03      	add	r3, sp, #12
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	462a      	mov	r2, r5
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <_vfiprintf_r+0x22c>)
 8001c5e:	a904      	add	r1, sp, #16
 8001c60:	4630      	mov	r0, r6
 8001c62:	f000 f879 	bl	8001d58 <_printf_i>
 8001c66:	e7e4      	b.n	8001c32 <_vfiprintf_r+0x1e6>
 8001c68:	0800235c 	.word	0x0800235c
 8001c6c:	08002362 	.word	0x08002362
 8001c70:	08002366 	.word	0x08002366
 8001c74:	00000000 	.word	0x00000000
 8001c78:	08001a27 	.word	0x08001a27

08001c7c <_printf_common>:
 8001c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	4616      	mov	r6, r2
 8001c82:	4698      	mov	r8, r3
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	690b      	ldr	r3, [r1, #16]
 8001c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bfb8      	it	lt
 8001c90:	4613      	movlt	r3, r2
 8001c92:	6033      	str	r3, [r6, #0]
 8001c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c98:	4607      	mov	r7, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	b10a      	cbz	r2, 8001ca2 <_printf_common+0x26>
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	0699      	lsls	r1, r3, #26
 8001ca6:	bf42      	ittt	mi
 8001ca8:	6833      	ldrmi	r3, [r6, #0]
 8001caa:	3302      	addmi	r3, #2
 8001cac:	6033      	strmi	r3, [r6, #0]
 8001cae:	6825      	ldr	r5, [r4, #0]
 8001cb0:	f015 0506 	ands.w	r5, r5, #6
 8001cb4:	d106      	bne.n	8001cc4 <_printf_common+0x48>
 8001cb6:	f104 0a19 	add.w	sl, r4, #25
 8001cba:	68e3      	ldr	r3, [r4, #12]
 8001cbc:	6832      	ldr	r2, [r6, #0]
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	dc26      	bgt.n	8001d12 <_printf_common+0x96>
 8001cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	3b00      	subs	r3, #0
 8001ccc:	bf18      	it	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	0692      	lsls	r2, r2, #26
 8001cd2:	d42b      	bmi.n	8001d2c <_printf_common+0xb0>
 8001cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cd8:	4641      	mov	r1, r8
 8001cda:	4638      	mov	r0, r7
 8001cdc:	47c8      	blx	r9
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d01e      	beq.n	8001d20 <_printf_common+0xa4>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	6922      	ldr	r2, [r4, #16]
 8001ce6:	f003 0306 	and.w	r3, r3, #6
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf02      	ittt	eq
 8001cee:	68e5      	ldreq	r5, [r4, #12]
 8001cf0:	6833      	ldreq	r3, [r6, #0]
 8001cf2:	1aed      	subeq	r5, r5, r3
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	bf0c      	ite	eq
 8001cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cfc:	2500      	movne	r5, #0
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bfc4      	itt	gt
 8001d02:	1a9b      	subgt	r3, r3, r2
 8001d04:	18ed      	addgt	r5, r5, r3
 8001d06:	2600      	movs	r6, #0
 8001d08:	341a      	adds	r4, #26
 8001d0a:	42b5      	cmp	r5, r6
 8001d0c:	d11a      	bne.n	8001d44 <_printf_common+0xc8>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e008      	b.n	8001d24 <_printf_common+0xa8>
 8001d12:	2301      	movs	r3, #1
 8001d14:	4652      	mov	r2, sl
 8001d16:	4641      	mov	r1, r8
 8001d18:	4638      	mov	r0, r7
 8001d1a:	47c8      	blx	r9
 8001d1c:	3001      	adds	r0, #1
 8001d1e:	d103      	bne.n	8001d28 <_printf_common+0xac>
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7c6      	b.n	8001cba <_printf_common+0x3e>
 8001d2c:	18e1      	adds	r1, r4, r3
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	2030      	movs	r0, #48	@ 0x30
 8001d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d36:	4422      	add	r2, r4
 8001d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d40:	3302      	adds	r3, #2
 8001d42:	e7c7      	b.n	8001cd4 <_printf_common+0x58>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4622      	mov	r2, r4
 8001d48:	4641      	mov	r1, r8
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	47c8      	blx	r9
 8001d4e:	3001      	adds	r0, #1
 8001d50:	d0e6      	beq.n	8001d20 <_printf_common+0xa4>
 8001d52:	3601      	adds	r6, #1
 8001d54:	e7d9      	b.n	8001d0a <_printf_common+0x8e>
	...

08001d58 <_printf_i>:
 8001d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d5c:	7e0f      	ldrb	r7, [r1, #24]
 8001d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d60:	2f78      	cmp	r7, #120	@ 0x78
 8001d62:	4691      	mov	r9, r2
 8001d64:	4680      	mov	r8, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	469a      	mov	sl, r3
 8001d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d6e:	d807      	bhi.n	8001d80 <_printf_i+0x28>
 8001d70:	2f62      	cmp	r7, #98	@ 0x62
 8001d72:	d80a      	bhi.n	8001d8a <_printf_i+0x32>
 8001d74:	2f00      	cmp	r7, #0
 8001d76:	f000 80d1 	beq.w	8001f1c <_printf_i+0x1c4>
 8001d7a:	2f58      	cmp	r7, #88	@ 0x58
 8001d7c:	f000 80b8 	beq.w	8001ef0 <_printf_i+0x198>
 8001d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d88:	e03a      	b.n	8001e00 <_printf_i+0xa8>
 8001d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d8e:	2b15      	cmp	r3, #21
 8001d90:	d8f6      	bhi.n	8001d80 <_printf_i+0x28>
 8001d92:	a101      	add	r1, pc, #4	@ (adr r1, 8001d98 <_printf_i+0x40>)
 8001d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d98:	08001df1 	.word	0x08001df1
 8001d9c:	08001e05 	.word	0x08001e05
 8001da0:	08001d81 	.word	0x08001d81
 8001da4:	08001d81 	.word	0x08001d81
 8001da8:	08001d81 	.word	0x08001d81
 8001dac:	08001d81 	.word	0x08001d81
 8001db0:	08001e05 	.word	0x08001e05
 8001db4:	08001d81 	.word	0x08001d81
 8001db8:	08001d81 	.word	0x08001d81
 8001dbc:	08001d81 	.word	0x08001d81
 8001dc0:	08001d81 	.word	0x08001d81
 8001dc4:	08001f03 	.word	0x08001f03
 8001dc8:	08001e2f 	.word	0x08001e2f
 8001dcc:	08001ebd 	.word	0x08001ebd
 8001dd0:	08001d81 	.word	0x08001d81
 8001dd4:	08001d81 	.word	0x08001d81
 8001dd8:	08001f25 	.word	0x08001f25
 8001ddc:	08001d81 	.word	0x08001d81
 8001de0:	08001e2f 	.word	0x08001e2f
 8001de4:	08001d81 	.word	0x08001d81
 8001de8:	08001d81 	.word	0x08001d81
 8001dec:	08001ec5 	.word	0x08001ec5
 8001df0:	6833      	ldr	r3, [r6, #0]
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6032      	str	r2, [r6, #0]
 8001df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e00:	2301      	movs	r3, #1
 8001e02:	e09c      	b.n	8001f3e <_printf_i+0x1e6>
 8001e04:	6833      	ldr	r3, [r6, #0]
 8001e06:	6820      	ldr	r0, [r4, #0]
 8001e08:	1d19      	adds	r1, r3, #4
 8001e0a:	6031      	str	r1, [r6, #0]
 8001e0c:	0606      	lsls	r6, r0, #24
 8001e0e:	d501      	bpl.n	8001e14 <_printf_i+0xbc>
 8001e10:	681d      	ldr	r5, [r3, #0]
 8001e12:	e003      	b.n	8001e1c <_printf_i+0xc4>
 8001e14:	0645      	lsls	r5, r0, #25
 8001e16:	d5fb      	bpl.n	8001e10 <_printf_i+0xb8>
 8001e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	da03      	bge.n	8001e28 <_printf_i+0xd0>
 8001e20:	232d      	movs	r3, #45	@ 0x2d
 8001e22:	426d      	negs	r5, r5
 8001e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e28:	4858      	ldr	r0, [pc, #352]	@ (8001f8c <_printf_i+0x234>)
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	e011      	b.n	8001e52 <_printf_i+0xfa>
 8001e2e:	6821      	ldr	r1, [r4, #0]
 8001e30:	6833      	ldr	r3, [r6, #0]
 8001e32:	0608      	lsls	r0, r1, #24
 8001e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e38:	d402      	bmi.n	8001e40 <_printf_i+0xe8>
 8001e3a:	0649      	lsls	r1, r1, #25
 8001e3c:	bf48      	it	mi
 8001e3e:	b2ad      	uxthmi	r5, r5
 8001e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e42:	4852      	ldr	r0, [pc, #328]	@ (8001f8c <_printf_i+0x234>)
 8001e44:	6033      	str	r3, [r6, #0]
 8001e46:	bf14      	ite	ne
 8001e48:	230a      	movne	r3, #10
 8001e4a:	2308      	moveq	r3, #8
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e52:	6866      	ldr	r6, [r4, #4]
 8001e54:	60a6      	str	r6, [r4, #8]
 8001e56:	2e00      	cmp	r6, #0
 8001e58:	db05      	blt.n	8001e66 <_printf_i+0x10e>
 8001e5a:	6821      	ldr	r1, [r4, #0]
 8001e5c:	432e      	orrs	r6, r5
 8001e5e:	f021 0104 	bic.w	r1, r1, #4
 8001e62:	6021      	str	r1, [r4, #0]
 8001e64:	d04b      	beq.n	8001efe <_printf_i+0x1a6>
 8001e66:	4616      	mov	r6, r2
 8001e68:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e6c:	fb03 5711 	mls	r7, r3, r1, r5
 8001e70:	5dc7      	ldrb	r7, [r0, r7]
 8001e72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e76:	462f      	mov	r7, r5
 8001e78:	42bb      	cmp	r3, r7
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	d9f4      	bls.n	8001e68 <_printf_i+0x110>
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d10b      	bne.n	8001e9a <_printf_i+0x142>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	07df      	lsls	r7, r3, #31
 8001e86:	d508      	bpl.n	8001e9a <_printf_i+0x142>
 8001e88:	6923      	ldr	r3, [r4, #16]
 8001e8a:	6861      	ldr	r1, [r4, #4]
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	bfde      	ittt	le
 8001e90:	2330      	movle	r3, #48	@ 0x30
 8001e92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e9a:	1b92      	subs	r2, r2, r6
 8001e9c:	6122      	str	r2, [r4, #16]
 8001e9e:	f8cd a000 	str.w	sl, [sp]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	aa03      	add	r2, sp, #12
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	4640      	mov	r0, r8
 8001eaa:	f7ff fee7 	bl	8001c7c <_printf_common>
 8001eae:	3001      	adds	r0, #1
 8001eb0:	d14a      	bne.n	8001f48 <_printf_i+0x1f0>
 8001eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb6:	b004      	add	sp, #16
 8001eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	6023      	str	r3, [r4, #0]
 8001ec4:	4832      	ldr	r0, [pc, #200]	@ (8001f90 <_printf_i+0x238>)
 8001ec6:	2778      	movs	r7, #120	@ 0x78
 8001ec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	6831      	ldr	r1, [r6, #0]
 8001ed0:	061f      	lsls	r7, r3, #24
 8001ed2:	f851 5b04 	ldr.w	r5, [r1], #4
 8001ed6:	d402      	bmi.n	8001ede <_printf_i+0x186>
 8001ed8:	065f      	lsls	r7, r3, #25
 8001eda:	bf48      	it	mi
 8001edc:	b2ad      	uxthmi	r5, r5
 8001ede:	6031      	str	r1, [r6, #0]
 8001ee0:	07d9      	lsls	r1, r3, #31
 8001ee2:	bf44      	itt	mi
 8001ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ee8:	6023      	strmi	r3, [r4, #0]
 8001eea:	b11d      	cbz	r5, 8001ef4 <_printf_i+0x19c>
 8001eec:	2310      	movs	r3, #16
 8001eee:	e7ad      	b.n	8001e4c <_printf_i+0xf4>
 8001ef0:	4826      	ldr	r0, [pc, #152]	@ (8001f8c <_printf_i+0x234>)
 8001ef2:	e7e9      	b.n	8001ec8 <_printf_i+0x170>
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f023 0320 	bic.w	r3, r3, #32
 8001efa:	6023      	str	r3, [r4, #0]
 8001efc:	e7f6      	b.n	8001eec <_printf_i+0x194>
 8001efe:	4616      	mov	r6, r2
 8001f00:	e7bd      	b.n	8001e7e <_printf_i+0x126>
 8001f02:	6833      	ldr	r3, [r6, #0]
 8001f04:	6825      	ldr	r5, [r4, #0]
 8001f06:	6961      	ldr	r1, [r4, #20]
 8001f08:	1d18      	adds	r0, r3, #4
 8001f0a:	6030      	str	r0, [r6, #0]
 8001f0c:	062e      	lsls	r6, r5, #24
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	d501      	bpl.n	8001f16 <_printf_i+0x1be>
 8001f12:	6019      	str	r1, [r3, #0]
 8001f14:	e002      	b.n	8001f1c <_printf_i+0x1c4>
 8001f16:	0668      	lsls	r0, r5, #25
 8001f18:	d5fb      	bpl.n	8001f12 <_printf_i+0x1ba>
 8001f1a:	8019      	strh	r1, [r3, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6123      	str	r3, [r4, #16]
 8001f20:	4616      	mov	r6, r2
 8001f22:	e7bc      	b.n	8001e9e <_printf_i+0x146>
 8001f24:	6833      	ldr	r3, [r6, #0]
 8001f26:	1d1a      	adds	r2, r3, #4
 8001f28:	6032      	str	r2, [r6, #0]
 8001f2a:	681e      	ldr	r6, [r3, #0]
 8001f2c:	6862      	ldr	r2, [r4, #4]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4630      	mov	r0, r6
 8001f32:	f7fe f96d 	bl	8000210 <memchr>
 8001f36:	b108      	cbz	r0, 8001f3c <_printf_i+0x1e4>
 8001f38:	1b80      	subs	r0, r0, r6
 8001f3a:	6060      	str	r0, [r4, #4]
 8001f3c:	6863      	ldr	r3, [r4, #4]
 8001f3e:	6123      	str	r3, [r4, #16]
 8001f40:	2300      	movs	r3, #0
 8001f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f46:	e7aa      	b.n	8001e9e <_printf_i+0x146>
 8001f48:	6923      	ldr	r3, [r4, #16]
 8001f4a:	4632      	mov	r2, r6
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	4640      	mov	r0, r8
 8001f50:	47d0      	blx	sl
 8001f52:	3001      	adds	r0, #1
 8001f54:	d0ad      	beq.n	8001eb2 <_printf_i+0x15a>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	079b      	lsls	r3, r3, #30
 8001f5a:	d413      	bmi.n	8001f84 <_printf_i+0x22c>
 8001f5c:	68e0      	ldr	r0, [r4, #12]
 8001f5e:	9b03      	ldr	r3, [sp, #12]
 8001f60:	4298      	cmp	r0, r3
 8001f62:	bfb8      	it	lt
 8001f64:	4618      	movlt	r0, r3
 8001f66:	e7a6      	b.n	8001eb6 <_printf_i+0x15e>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	4632      	mov	r2, r6
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	4640      	mov	r0, r8
 8001f70:	47d0      	blx	sl
 8001f72:	3001      	adds	r0, #1
 8001f74:	d09d      	beq.n	8001eb2 <_printf_i+0x15a>
 8001f76:	3501      	adds	r5, #1
 8001f78:	68e3      	ldr	r3, [r4, #12]
 8001f7a:	9903      	ldr	r1, [sp, #12]
 8001f7c:	1a5b      	subs	r3, r3, r1
 8001f7e:	42ab      	cmp	r3, r5
 8001f80:	dcf2      	bgt.n	8001f68 <_printf_i+0x210>
 8001f82:	e7eb      	b.n	8001f5c <_printf_i+0x204>
 8001f84:	2500      	movs	r5, #0
 8001f86:	f104 0619 	add.w	r6, r4, #25
 8001f8a:	e7f5      	b.n	8001f78 <_printf_i+0x220>
 8001f8c:	0800236d 	.word	0x0800236d
 8001f90:	0800237e 	.word	0x0800237e

08001f94 <__sflush_r>:
 8001f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	0716      	lsls	r6, r2, #28
 8001f9c:	4605      	mov	r5, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	d454      	bmi.n	800204c <__sflush_r+0xb8>
 8001fa2:	684b      	ldr	r3, [r1, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dc02      	bgt.n	8001fae <__sflush_r+0x1a>
 8001fa8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	dd48      	ble.n	8002040 <__sflush_r+0xac>
 8001fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fb0:	2e00      	cmp	r6, #0
 8001fb2:	d045      	beq.n	8002040 <__sflush_r+0xac>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001fba:	682f      	ldr	r7, [r5, #0]
 8001fbc:	6a21      	ldr	r1, [r4, #32]
 8001fbe:	602b      	str	r3, [r5, #0]
 8001fc0:	d030      	beq.n	8002024 <__sflush_r+0x90>
 8001fc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	0759      	lsls	r1, r3, #29
 8001fc8:	d505      	bpl.n	8001fd6 <__sflush_r+0x42>
 8001fca:	6863      	ldr	r3, [r4, #4]
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001fd0:	b10b      	cbz	r3, 8001fd6 <__sflush_r+0x42>
 8001fd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fda:	6a21      	ldr	r1, [r4, #32]
 8001fdc:	4628      	mov	r0, r5
 8001fde:	47b0      	blx	r6
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	d106      	bne.n	8001ff4 <__sflush_r+0x60>
 8001fe6:	6829      	ldr	r1, [r5, #0]
 8001fe8:	291d      	cmp	r1, #29
 8001fea:	d82b      	bhi.n	8002044 <__sflush_r+0xb0>
 8001fec:	4a28      	ldr	r2, [pc, #160]	@ (8002090 <__sflush_r+0xfc>)
 8001fee:	40ca      	lsrs	r2, r1
 8001ff0:	07d6      	lsls	r6, r2, #31
 8001ff2:	d527      	bpl.n	8002044 <__sflush_r+0xb0>
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6062      	str	r2, [r4, #4]
 8001ff8:	04d9      	lsls	r1, r3, #19
 8001ffa:	6922      	ldr	r2, [r4, #16]
 8001ffc:	6022      	str	r2, [r4, #0]
 8001ffe:	d504      	bpl.n	800200a <__sflush_r+0x76>
 8002000:	1c42      	adds	r2, r0, #1
 8002002:	d101      	bne.n	8002008 <__sflush_r+0x74>
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	b903      	cbnz	r3, 800200a <__sflush_r+0x76>
 8002008:	6560      	str	r0, [r4, #84]	@ 0x54
 800200a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800200c:	602f      	str	r7, [r5, #0]
 800200e:	b1b9      	cbz	r1, 8002040 <__sflush_r+0xac>
 8002010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002014:	4299      	cmp	r1, r3
 8002016:	d002      	beq.n	800201e <__sflush_r+0x8a>
 8002018:	4628      	mov	r0, r5
 800201a:	f7ff fbf7 	bl	800180c <_free_r>
 800201e:	2300      	movs	r3, #0
 8002020:	6363      	str	r3, [r4, #52]	@ 0x34
 8002022:	e00d      	b.n	8002040 <__sflush_r+0xac>
 8002024:	2301      	movs	r3, #1
 8002026:	4628      	mov	r0, r5
 8002028:	47b0      	blx	r6
 800202a:	4602      	mov	r2, r0
 800202c:	1c50      	adds	r0, r2, #1
 800202e:	d1c9      	bne.n	8001fc4 <__sflush_r+0x30>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0c6      	beq.n	8001fc4 <__sflush_r+0x30>
 8002036:	2b1d      	cmp	r3, #29
 8002038:	d001      	beq.n	800203e <__sflush_r+0xaa>
 800203a:	2b16      	cmp	r3, #22
 800203c:	d11d      	bne.n	800207a <__sflush_r+0xe6>
 800203e:	602f      	str	r7, [r5, #0]
 8002040:	2000      	movs	r0, #0
 8002042:	e021      	b.n	8002088 <__sflush_r+0xf4>
 8002044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002048:	b21b      	sxth	r3, r3
 800204a:	e01a      	b.n	8002082 <__sflush_r+0xee>
 800204c:	690f      	ldr	r7, [r1, #16]
 800204e:	2f00      	cmp	r7, #0
 8002050:	d0f6      	beq.n	8002040 <__sflush_r+0xac>
 8002052:	0793      	lsls	r3, r2, #30
 8002054:	680e      	ldr	r6, [r1, #0]
 8002056:	bf08      	it	eq
 8002058:	694b      	ldreq	r3, [r1, #20]
 800205a:	600f      	str	r7, [r1, #0]
 800205c:	bf18      	it	ne
 800205e:	2300      	movne	r3, #0
 8002060:	1bf6      	subs	r6, r6, r7
 8002062:	608b      	str	r3, [r1, #8]
 8002064:	2e00      	cmp	r6, #0
 8002066:	ddeb      	ble.n	8002040 <__sflush_r+0xac>
 8002068:	6a21      	ldr	r1, [r4, #32]
 800206a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800206e:	4633      	mov	r3, r6
 8002070:	463a      	mov	r2, r7
 8002072:	4628      	mov	r0, r5
 8002074:	47e0      	blx	ip
 8002076:	2800      	cmp	r0, #0
 8002078:	dc07      	bgt.n	800208a <__sflush_r+0xf6>
 800207a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800207e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002082:	81a3      	strh	r3, [r4, #12]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800208a:	4407      	add	r7, r0
 800208c:	1a36      	subs	r6, r6, r0
 800208e:	e7e9      	b.n	8002064 <__sflush_r+0xd0>
 8002090:	20400001 	.word	0x20400001

08002094 <_fflush_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	690b      	ldr	r3, [r1, #16]
 8002098:	4605      	mov	r5, r0
 800209a:	460c      	mov	r4, r1
 800209c:	b913      	cbnz	r3, 80020a4 <_fflush_r+0x10>
 800209e:	2500      	movs	r5, #0
 80020a0:	4628      	mov	r0, r5
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	b118      	cbz	r0, 80020ae <_fflush_r+0x1a>
 80020a6:	6a03      	ldr	r3, [r0, #32]
 80020a8:	b90b      	cbnz	r3, 80020ae <_fflush_r+0x1a>
 80020aa:	f7ff faa7 	bl	80015fc <__sinit>
 80020ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f3      	beq.n	800209e <_fflush_r+0xa>
 80020b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020b8:	07d0      	lsls	r0, r2, #31
 80020ba:	d404      	bmi.n	80020c6 <_fflush_r+0x32>
 80020bc:	0599      	lsls	r1, r3, #22
 80020be:	d402      	bmi.n	80020c6 <_fflush_r+0x32>
 80020c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020c2:	f7ff fba0 	bl	8001806 <__retarget_lock_acquire_recursive>
 80020c6:	4628      	mov	r0, r5
 80020c8:	4621      	mov	r1, r4
 80020ca:	f7ff ff63 	bl	8001f94 <__sflush_r>
 80020ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020d0:	07da      	lsls	r2, r3, #31
 80020d2:	4605      	mov	r5, r0
 80020d4:	d4e4      	bmi.n	80020a0 <_fflush_r+0xc>
 80020d6:	89a3      	ldrh	r3, [r4, #12]
 80020d8:	059b      	lsls	r3, r3, #22
 80020da:	d4e1      	bmi.n	80020a0 <_fflush_r+0xc>
 80020dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020de:	f7ff fb93 	bl	8001808 <__retarget_lock_release_recursive>
 80020e2:	e7dd      	b.n	80020a0 <_fflush_r+0xc>

080020e4 <__swbuf_r>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	460e      	mov	r6, r1
 80020e8:	4614      	mov	r4, r2
 80020ea:	4605      	mov	r5, r0
 80020ec:	b118      	cbz	r0, 80020f6 <__swbuf_r+0x12>
 80020ee:	6a03      	ldr	r3, [r0, #32]
 80020f0:	b90b      	cbnz	r3, 80020f6 <__swbuf_r+0x12>
 80020f2:	f7ff fa83 	bl	80015fc <__sinit>
 80020f6:	69a3      	ldr	r3, [r4, #24]
 80020f8:	60a3      	str	r3, [r4, #8]
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	071a      	lsls	r2, r3, #28
 80020fe:	d501      	bpl.n	8002104 <__swbuf_r+0x20>
 8002100:	6923      	ldr	r3, [r4, #16]
 8002102:	b943      	cbnz	r3, 8002116 <__swbuf_r+0x32>
 8002104:	4621      	mov	r1, r4
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f82a 	bl	8002160 <__swsetup_r>
 800210c:	b118      	cbz	r0, 8002116 <__swbuf_r+0x32>
 800210e:	f04f 37ff 	mov.w	r7, #4294967295
 8002112:	4638      	mov	r0, r7
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	6922      	ldr	r2, [r4, #16]
 800211a:	1a98      	subs	r0, r3, r2
 800211c:	6963      	ldr	r3, [r4, #20]
 800211e:	b2f6      	uxtb	r6, r6
 8002120:	4283      	cmp	r3, r0
 8002122:	4637      	mov	r7, r6
 8002124:	dc05      	bgt.n	8002132 <__swbuf_r+0x4e>
 8002126:	4621      	mov	r1, r4
 8002128:	4628      	mov	r0, r5
 800212a:	f7ff ffb3 	bl	8002094 <_fflush_r>
 800212e:	2800      	cmp	r0, #0
 8002130:	d1ed      	bne.n	800210e <__swbuf_r+0x2a>
 8002132:	68a3      	ldr	r3, [r4, #8]
 8002134:	3b01      	subs	r3, #1
 8002136:	60a3      	str	r3, [r4, #8]
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	6022      	str	r2, [r4, #0]
 800213e:	701e      	strb	r6, [r3, #0]
 8002140:	6962      	ldr	r2, [r4, #20]
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	429a      	cmp	r2, r3
 8002146:	d004      	beq.n	8002152 <__swbuf_r+0x6e>
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	07db      	lsls	r3, r3, #31
 800214c:	d5e1      	bpl.n	8002112 <__swbuf_r+0x2e>
 800214e:	2e0a      	cmp	r6, #10
 8002150:	d1df      	bne.n	8002112 <__swbuf_r+0x2e>
 8002152:	4621      	mov	r1, r4
 8002154:	4628      	mov	r0, r5
 8002156:	f7ff ff9d 	bl	8002094 <_fflush_r>
 800215a:	2800      	cmp	r0, #0
 800215c:	d0d9      	beq.n	8002112 <__swbuf_r+0x2e>
 800215e:	e7d6      	b.n	800210e <__swbuf_r+0x2a>

08002160 <__swsetup_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <__swsetup_r+0xa8>)
 8002164:	4605      	mov	r5, r0
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	460c      	mov	r4, r1
 800216a:	b118      	cbz	r0, 8002174 <__swsetup_r+0x14>
 800216c:	6a03      	ldr	r3, [r0, #32]
 800216e:	b90b      	cbnz	r3, 8002174 <__swsetup_r+0x14>
 8002170:	f7ff fa44 	bl	80015fc <__sinit>
 8002174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002178:	0719      	lsls	r1, r3, #28
 800217a:	d422      	bmi.n	80021c2 <__swsetup_r+0x62>
 800217c:	06da      	lsls	r2, r3, #27
 800217e:	d407      	bmi.n	8002190 <__swsetup_r+0x30>
 8002180:	2209      	movs	r2, #9
 8002182:	602a      	str	r2, [r5, #0]
 8002184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002188:	81a3      	strh	r3, [r4, #12]
 800218a:	f04f 30ff 	mov.w	r0, #4294967295
 800218e:	e033      	b.n	80021f8 <__swsetup_r+0x98>
 8002190:	0758      	lsls	r0, r3, #29
 8002192:	d512      	bpl.n	80021ba <__swsetup_r+0x5a>
 8002194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002196:	b141      	cbz	r1, 80021aa <__swsetup_r+0x4a>
 8002198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800219c:	4299      	cmp	r1, r3
 800219e:	d002      	beq.n	80021a6 <__swsetup_r+0x46>
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7ff fb33 	bl	800180c <_free_r>
 80021a6:	2300      	movs	r3, #0
 80021a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80021b0:	81a3      	strh	r3, [r4, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	6063      	str	r3, [r4, #4]
 80021b6:	6923      	ldr	r3, [r4, #16]
 80021b8:	6023      	str	r3, [r4, #0]
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	6923      	ldr	r3, [r4, #16]
 80021c4:	b94b      	cbnz	r3, 80021da <__swsetup_r+0x7a>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d0:	d003      	beq.n	80021da <__swsetup_r+0x7a>
 80021d2:	4621      	mov	r1, r4
 80021d4:	4628      	mov	r0, r5
 80021d6:	f000 f84f 	bl	8002278 <__smakebuf_r>
 80021da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021de:	f013 0201 	ands.w	r2, r3, #1
 80021e2:	d00a      	beq.n	80021fa <__swsetup_r+0x9a>
 80021e4:	2200      	movs	r2, #0
 80021e6:	60a2      	str	r2, [r4, #8]
 80021e8:	6962      	ldr	r2, [r4, #20]
 80021ea:	4252      	negs	r2, r2
 80021ec:	61a2      	str	r2, [r4, #24]
 80021ee:	6922      	ldr	r2, [r4, #16]
 80021f0:	b942      	cbnz	r2, 8002204 <__swsetup_r+0xa4>
 80021f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80021f6:	d1c5      	bne.n	8002184 <__swsetup_r+0x24>
 80021f8:	bd38      	pop	{r3, r4, r5, pc}
 80021fa:	0799      	lsls	r1, r3, #30
 80021fc:	bf58      	it	pl
 80021fe:	6962      	ldrpl	r2, [r4, #20]
 8002200:	60a2      	str	r2, [r4, #8]
 8002202:	e7f4      	b.n	80021ee <__swsetup_r+0x8e>
 8002204:	2000      	movs	r0, #0
 8002206:	e7f7      	b.n	80021f8 <__swsetup_r+0x98>
 8002208:	2000000c 	.word	0x2000000c

0800220c <_sbrk_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4d06      	ldr	r5, [pc, #24]	@ (8002228 <_sbrk_r+0x1c>)
 8002210:	2300      	movs	r3, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	602b      	str	r3, [r5, #0]
 8002218:	f7fe fa00 	bl	800061c <_sbrk>
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d102      	bne.n	8002226 <_sbrk_r+0x1a>
 8002220:	682b      	ldr	r3, [r5, #0]
 8002222:	b103      	cbz	r3, 8002226 <_sbrk_r+0x1a>
 8002224:	6023      	str	r3, [r4, #0]
 8002226:	bd38      	pop	{r3, r4, r5, pc}
 8002228:	200003d4 	.word	0x200003d4

0800222c <__swhatbuf_r>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	460c      	mov	r4, r1
 8002230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002234:	2900      	cmp	r1, #0
 8002236:	b096      	sub	sp, #88	@ 0x58
 8002238:	4615      	mov	r5, r2
 800223a:	461e      	mov	r6, r3
 800223c:	da0d      	bge.n	800225a <__swhatbuf_r+0x2e>
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	bf14      	ite	ne
 800224a:	2340      	movne	r3, #64	@ 0x40
 800224c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002250:	2000      	movs	r0, #0
 8002252:	6031      	str	r1, [r6, #0]
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	b016      	add	sp, #88	@ 0x58
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	466a      	mov	r2, sp
 800225c:	f000 f848 	bl	80022f0 <_fstat_r>
 8002260:	2800      	cmp	r0, #0
 8002262:	dbec      	blt.n	800223e <__swhatbuf_r+0x12>
 8002264:	9901      	ldr	r1, [sp, #4]
 8002266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800226a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800226e:	4259      	negs	r1, r3
 8002270:	4159      	adcs	r1, r3
 8002272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002276:	e7eb      	b.n	8002250 <__swhatbuf_r+0x24>

08002278 <__smakebuf_r>:
 8002278:	898b      	ldrh	r3, [r1, #12]
 800227a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800227c:	079d      	lsls	r5, r3, #30
 800227e:	4606      	mov	r6, r0
 8002280:	460c      	mov	r4, r1
 8002282:	d507      	bpl.n	8002294 <__smakebuf_r+0x1c>
 8002284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	6123      	str	r3, [r4, #16]
 800228c:	2301      	movs	r3, #1
 800228e:	6163      	str	r3, [r4, #20]
 8002290:	b003      	add	sp, #12
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	ab01      	add	r3, sp, #4
 8002296:	466a      	mov	r2, sp
 8002298:	f7ff ffc8 	bl	800222c <__swhatbuf_r>
 800229c:	9f00      	ldr	r7, [sp, #0]
 800229e:	4605      	mov	r5, r0
 80022a0:	4639      	mov	r1, r7
 80022a2:	4630      	mov	r0, r6
 80022a4:	f7ff fb1e 	bl	80018e4 <_malloc_r>
 80022a8:	b948      	cbnz	r0, 80022be <__smakebuf_r+0x46>
 80022aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ae:	059a      	lsls	r2, r3, #22
 80022b0:	d4ee      	bmi.n	8002290 <__smakebuf_r+0x18>
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	81a3      	strh	r3, [r4, #12]
 80022bc:	e7e2      	b.n	8002284 <__smakebuf_r+0xc>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	6020      	str	r0, [r4, #0]
 80022c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c6:	81a3      	strh	r3, [r4, #12]
 80022c8:	9b01      	ldr	r3, [sp, #4]
 80022ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80022ce:	b15b      	cbz	r3, 80022e8 <__smakebuf_r+0x70>
 80022d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022d4:	4630      	mov	r0, r6
 80022d6:	f000 f81d 	bl	8002314 <_isatty_r>
 80022da:	b128      	cbz	r0, 80022e8 <__smakebuf_r+0x70>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	431d      	orrs	r5, r3
 80022ec:	81a5      	strh	r5, [r4, #12]
 80022ee:	e7cf      	b.n	8002290 <__smakebuf_r+0x18>

080022f0 <_fstat_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4d07      	ldr	r5, [pc, #28]	@ (8002310 <_fstat_r+0x20>)
 80022f4:	2300      	movs	r3, #0
 80022f6:	4604      	mov	r4, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	f7fe f967 	bl	80005d0 <_fstat>
 8002302:	1c43      	adds	r3, r0, #1
 8002304:	d102      	bne.n	800230c <_fstat_r+0x1c>
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	b103      	cbz	r3, 800230c <_fstat_r+0x1c>
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	bd38      	pop	{r3, r4, r5, pc}
 800230e:	bf00      	nop
 8002310:	200003d4 	.word	0x200003d4

08002314 <_isatty_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d06      	ldr	r5, [pc, #24]	@ (8002330 <_isatty_r+0x1c>)
 8002318:	2300      	movs	r3, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe f965 	bl	80005ee <_isatty>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_isatty_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_isatty_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	200003d4 	.word	0x200003d4

08002334 <_init>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr

08002340 <_fini>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	bf00      	nop
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr
