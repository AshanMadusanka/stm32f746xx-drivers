
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001e1c  08001e1c  00002e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e70  08001e70  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001e70  08001e70  00002e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e78  08001e78  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e78  08001e78  00002e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e7c  08001e7c  00002e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001e80  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000005c  08001edc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08001edc  000031f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dcb  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006ea  00000000  00000000  00004e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00005540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016b  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d6b  00000000  00000000  000058ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000282a  00000000  00000000  00009616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c863  00000000  00000000  0000be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000186a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea8  00000000  00000000  000186e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00019590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001e04 	.word	0x08001e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001e04 	.word	0x08001e04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
    for (uint32_t i = 0; i < 500000/2; i++) {
        // Simple delay loop
    }
}

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af02      	add	r7, sp, #8
    uint8_t commandcode;

	uint8_t len;

    // Initialize the GPIO pins for I2C
    I2C_GpioInit();
 80002b6:	f000 f83f 	bl	8000338 <I2C_GpioInit>

    // Initialize I2C1 peripheral
    I2C1_Inits();
 80002ba:	f000 f86b 	bl	8000394 <I2C1_Inits>

    // Enable the I2C1 peripheral
    I2C_PeripheralControl(I2C1, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	4819      	ldr	r0, [pc, #100]	@ (8000328 <main+0x78>)
 80002c2:	f000 fdb9 	bl	8000e38 <I2C_PeripheralControl>

    commandcode = 0x51;
 80002c6:	2351      	movs	r3, #81	@ 0x51
 80002c8:	71fb      	strb	r3, [r7, #7]

    I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002ca:	1df9      	adds	r1, r7, #7
 80002cc:	2301      	movs	r3, #1
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2368      	movs	r3, #104	@ 0x68
 80002d2:	2201      	movs	r2, #1
 80002d4:	4815      	ldr	r0, [pc, #84]	@ (800032c <main+0x7c>)
 80002d6:	f000 fce3 	bl	8000ca0 <I2C_MasterSendData>

    I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002da:	1db9      	adds	r1, r7, #6
 80002dc:	2301      	movs	r3, #1
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2368      	movs	r3, #104	@ 0x68
 80002e2:	2201      	movs	r2, #1
 80002e4:	4811      	ldr	r0, [pc, #68]	@ (800032c <main+0x7c>)
 80002e6:	f000 fd3f 	bl	8000d68 <I2C_MasterReceiveData>

    commandcode = 0x52;
 80002ea:	2352      	movs	r3, #82	@ 0x52
 80002ec:	71fb      	strb	r3, [r7, #7]
    I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002ee:	1df9      	adds	r1, r7, #7
 80002f0:	2301      	movs	r3, #1
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2368      	movs	r3, #104	@ 0x68
 80002f6:	2201      	movs	r2, #1
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <main+0x7c>)
 80002fa:	f000 fcd1 	bl	8000ca0 <I2C_MasterSendData>


    I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	461a      	mov	r2, r3
 8000302:	2300      	movs	r3, #0
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2368      	movs	r3, #104	@ 0x68
 8000308:	4909      	ldr	r1, [pc, #36]	@ (8000330 <main+0x80>)
 800030a:	4808      	ldr	r0, [pc, #32]	@ (800032c <main+0x7c>)
 800030c:	f000 fd2c 	bl	8000d68 <I2C_MasterReceiveData>

	rcv_buf[len+1] = '\0';
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	3301      	adds	r3, #1
 8000314:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <main+0x80>)
 8000316:	2100      	movs	r1, #0
 8000318:	54d1      	strb	r1, [r2, r3]

    printf("Data received from slave: %s\n", rcv_buf);
 800031a:	4905      	ldr	r1, [pc, #20]	@ (8000330 <main+0x80>)
 800031c:	4805      	ldr	r0, [pc, #20]	@ (8000334 <main+0x84>)
 800031e:	f000 ff0b 	bl	8001138 <iprintf>

    while (1) {
 8000322:	bf00      	nop
 8000324:	e7fd      	b.n	8000322 <main+0x72>
 8000326:	bf00      	nop
 8000328:	40005400 	.word	0x40005400
 800032c:	20000078 	.word	0x20000078
 8000330:	20000084 	.word	0x20000084
 8000334:	08001e1c 	.word	0x08001e1c

08000338 <I2C_GpioInit>:

    }

}

void I2C_GpioInit() {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
    // Enable GPIOB clock first
    GPIOB_PCLK_EN();
 800033e:	4b13      	ldr	r3, [pc, #76]	@ (800038c <I2C_GpioInit+0x54>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <I2C_GpioInit+0x54>)
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	6313      	str	r3, [r2, #48]	@ 0x30
    
    GPIO_Handle_t I2CPins = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]

    I2CPins.pGPIOx = GPIOB;
 8000354:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <I2C_GpioInit+0x58>)
 8000356:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8000358:	2302      	movs	r3, #2
 800035a:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4; // AF4 for I2C1
 800035c:	2304      	movs	r3, #4
 800035e:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; // Open-drain
 8000360:	2301      	movs	r3, #1
 8000362:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; // Pull-up
 8000364:	2301      	movs	r3, #1
 8000366:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000368:	2302      	movs	r3, #2
 800036a:	72bb      	strb	r3, [r7, #10]

    // Configure PB8 (SCL)
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 800036c:	2308      	movs	r3, #8
 800036e:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fa32 	bl	80007dc <GPIO_Init>

    // Configure PB9 (SDA)
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000378:	2309      	movs	r3, #9
 800037a:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fa2c 	bl	80007dc <GPIO_Init>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40023800 	.word	0x40023800
 8000390:	40020400 	.word	0x40020400

08000394 <I2C1_Inits>:

void I2C1_Inits() {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0



    I2C1Handle.pI2Cx = I2C1; // Use I2C1 peripheral
 8000398:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <I2C1_Inits+0x2c>)
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <I2C1_Inits+0x30>)
 800039c:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM; // Set SCL speed to Standard Mode
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <I2C1_Inits+0x2c>)
 80003a0:	4a09      	ldr	r2, [pc, #36]	@ (80003c8 <I2C1_Inits+0x34>)
 80003a2:	605a      	str	r2, [r3, #4]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR; // Set device address (example)
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <I2C1_Inits+0x2c>)
 80003a6:	2261      	movs	r2, #97	@ 0x61
 80003a8:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE; // Enable ACK
 80003aa:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <I2C1_Inits+0x2c>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2; // Set Fast Mode Duty Cycle
 80003b0:	4b03      	ldr	r3, [pc, #12]	@ (80003c0 <I2C1_Inits+0x2c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	815a      	strh	r2, [r3, #10]
    I2C_Init(&I2C1Handle); // Initialize I2C1 with the configured settings
 80003b6:	4802      	ldr	r0, [pc, #8]	@ (80003c0 <I2C1_Inits+0x2c>)
 80003b8:	f000 fbee 	bl	8000b98 <I2C_Init>

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000078 	.word	0x20000078
 80003c4:	40005400 	.word	0x40005400
 80003c8:	000186a0 	.word	0x000186a0

080003cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <ITM_SendChar+0x44>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <ITM_SendChar+0x44>)
 80003dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <ITM_SendChar+0x48>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <ITM_SendChar+0x48>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003ee:	bf00      	nop
 80003f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0f8      	beq.n	80003f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003fe:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	e000edfc 	.word	0xe000edfc
 8000414:	e0000e00 	.word	0xe0000e00

08000418 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	e00a      	b.n	8000440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800042a:	f3af 8000 	nop.w
 800042e:	4601      	mov	r1, r0
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	60ba      	str	r2, [r7, #8]
 8000436:	b2ca      	uxtb	r2, r1
 8000438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	3301      	adds	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	697a      	ldr	r2, [r7, #20]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	429a      	cmp	r2, r3
 8000446:	dbf0      	blt.n	800042a <_read+0x12>
  }

  return len;
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	60f8      	str	r0, [r7, #12]
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	e009      	b.n	8000478 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	1c5a      	adds	r2, r3, #1
 8000468:	60ba      	str	r2, [r7, #8]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ffad 	bl	80003cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	3301      	adds	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	429a      	cmp	r2, r3
 800047e:	dbf1      	blt.n	8000464 <_write+0x12>
  }
  return len;
 8000480:	687b      	ldr	r3, [r7, #4]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <_close>:

int _close(int file)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004b0:	605a      	str	r2, [r3, #4]
  return 0;
 80004b2:	2300      	movs	r3, #0
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <_isatty>:

int _isatty(int file)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
	...

080004ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f4:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <_sbrk+0x5c>)
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <_sbrk+0x60>)
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000500:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <_sbrk+0x64>)
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <_sbrk+0x68>)
 800050c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	429a      	cmp	r2, r3
 800051a:	d207      	bcs.n	800052c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800051c:	f000 feb0 	bl	8001280 <__errno>
 8000520:	4603      	mov	r3, r0
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e009      	b.n	8000540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <_sbrk+0x64>)
 800053c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20050000 	.word	0x20050000
 800054c:	00000400 	.word	0x00000400
 8000550:	200000a4 	.word	0x200000a4
 8000554:	200001f8 	.word	0x200001f8

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	@ (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	@ (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 fe81 	bl	800128c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fe91 	bl	80002b0 <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800059c:	08001e80 	.word	0x08001e80
  ldr r2, =_sbss
 80005a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005a4:	200001f4 	.word	0x200001f4

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <GPIO_PeriClockControl>:
 * @brief  Enables or disables the peripheral clock for the given GPIO port.
 * @param  pGPIOx: Pointer to the GPIO port base address.
 * @param  EnorDi: ENABLE to enable the clock, DISABLE to disable the clock.
 * @retval None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

    if(EnorDi == ENABLE){
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d178      	bne.n	80006b0 <GPIO_PeriClockControl+0x104>

      if (pGPIOx == GPIOA) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a7a      	ldr	r2, [pc, #488]	@ (80007ac <GPIO_PeriClockControl+0x200>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <GPIO_PeriClockControl+0x28>

          GPIOA_PCLK_EN();
 80005c6:	4b7a      	ldr	r3, [pc, #488]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a79      	ldr	r2, [pc, #484]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
      else if(pGPIOx == GPIOK) {

          GPIOK_PCLK_DI();
      }
  }
}
 80005d2:	e0e5      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a77      	ldr	r2, [pc, #476]	@ (80007b4 <GPIO_PeriClockControl+0x208>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d106      	bne.n	80005ea <GPIO_PeriClockControl+0x3e>
          GPIOB_PCLK_EN();
 80005dc:	4b74      	ldr	r3, [pc, #464]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	4a73      	ldr	r2, [pc, #460]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e8:	e0da      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a72      	ldr	r2, [pc, #456]	@ (80007b8 <GPIO_PeriClockControl+0x20c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <GPIO_PeriClockControl+0x54>
          GPIOC_PCLK_EN();
 80005f2:	4b6f      	ldr	r3, [pc, #444]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a6e      	ldr	r2, [pc, #440]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fe:	e0cf      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a6e      	ldr	r2, [pc, #440]	@ (80007bc <GPIO_PeriClockControl+0x210>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d106      	bne.n	8000616 <GPIO_PeriClockControl+0x6a>
          GPIOD_PCLK_EN();
 8000608:	4b69      	ldr	r3, [pc, #420]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a68      	ldr	r2, [pc, #416]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000614:	e0c4      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a69      	ldr	r2, [pc, #420]	@ (80007c0 <GPIO_PeriClockControl+0x214>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <GPIO_PeriClockControl+0x80>
          GPIOE_PCLK_EN();
 800061e:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a63      	ldr	r2, [pc, #396]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000624:	f043 0310 	orr.w	r3, r3, #16
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062a:	e0b9      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a65      	ldr	r2, [pc, #404]	@ (80007c4 <GPIO_PeriClockControl+0x218>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d106      	bne.n	8000642 <GPIO_PeriClockControl+0x96>
          GPIOF_PCLK_EN();
 8000634:	4b5e      	ldr	r3, [pc, #376]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000638:	4a5d      	ldr	r2, [pc, #372]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000640:	e0ae      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a60      	ldr	r2, [pc, #384]	@ (80007c8 <GPIO_PeriClockControl+0x21c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <GPIO_PeriClockControl+0xac>
          GPIOG_PCLK_EN();
 800064a:	4b59      	ldr	r3, [pc, #356]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a58      	ldr	r2, [pc, #352]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000656:	e0a3      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a5c      	ldr	r2, [pc, #368]	@ (80007cc <GPIO_PeriClockControl+0x220>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <GPIO_PeriClockControl+0xc2>
          GPIOH_PCLK_EN();
 8000660:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	4a52      	ldr	r2, [pc, #328]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800066a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066c:	e098      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a57      	ldr	r2, [pc, #348]	@ (80007d0 <GPIO_PeriClockControl+0x224>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <GPIO_PeriClockControl+0xd8>
          GPIOI_PCLK_EN();
 8000676:	4b4e      	ldr	r3, [pc, #312]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a4d      	ldr	r2, [pc, #308]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000682:	e08d      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a53      	ldr	r2, [pc, #332]	@ (80007d4 <GPIO_PeriClockControl+0x228>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d106      	bne.n	800069a <GPIO_PeriClockControl+0xee>
          GPIOJ_PCLK_EN();
 800068c:	4b48      	ldr	r3, [pc, #288]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	4a47      	ldr	r2, [pc, #284]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000698:	e082      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a4e      	ldr	r2, [pc, #312]	@ (80007d8 <GPIO_PeriClockControl+0x22c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d17e      	bne.n	80007a0 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_EN();
 80006a2:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a42      	ldr	r2, [pc, #264]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ae:	e077      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      if (pGPIOx == GPIOA) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a3e      	ldr	r2, [pc, #248]	@ (80007ac <GPIO_PeriClockControl+0x200>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d106      	bne.n	80006c6 <GPIO_PeriClockControl+0x11a>
          GPIOA_PCLK_DI();
 80006b8:	4b3d      	ldr	r3, [pc, #244]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	4a3c      	ldr	r2, [pc, #240]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c4:	e06c      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a3a      	ldr	r2, [pc, #232]	@ (80007b4 <GPIO_PeriClockControl+0x208>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <GPIO_PeriClockControl+0x130>
          GPIOB_PCLK_DI();
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006d4:	f023 0302 	bic.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006da:	e061      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a36      	ldr	r2, [pc, #216]	@ (80007b8 <GPIO_PeriClockControl+0x20c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <GPIO_PeriClockControl+0x146>
          GPIOC_PCLK_DI();
 80006e4:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	4a31      	ldr	r2, [pc, #196]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006ea:	f023 0304 	bic.w	r3, r3, #4
 80006ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f0:	e056      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a31      	ldr	r2, [pc, #196]	@ (80007bc <GPIO_PeriClockControl+0x210>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <GPIO_PeriClockControl+0x15c>
          GPIOD_PCLK_DI();
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000700:	f023 0308 	bic.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000706:	e04b      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	@ (80007c0 <GPIO_PeriClockControl+0x214>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <GPIO_PeriClockControl+0x172>
          GPIOE_PCLK_DI();
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000716:	f023 0310 	bic.w	r3, r3, #16
 800071a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800071c:	e040      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <GPIO_PeriClockControl+0x218>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <GPIO_PeriClockControl+0x188>
          GPIOF_PCLK_DI();
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800072c:	f023 0320 	bic.w	r3, r3, #32
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000732:	e035      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a24      	ldr	r2, [pc, #144]	@ (80007c8 <GPIO_PeriClockControl+0x21c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <GPIO_PeriClockControl+0x19e>
          GPIOG_PCLK_DI();
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000748:	e02a      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <GPIO_PeriClockControl+0x220>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <GPIO_PeriClockControl+0x1b4>
          GPIOH_PCLK_DI();
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800075e:	e01f      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <GPIO_PeriClockControl+0x224>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <GPIO_PeriClockControl+0x1ca>
          GPIOI_PCLK_DI();
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076c:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800076e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000772:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000774:	e014      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <GPIO_PeriClockControl+0x228>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <GPIO_PeriClockControl+0x1e0>
          GPIOJ_PCLK_DI();
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800078a:	e009      	b.n	80007a0 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <GPIO_PeriClockControl+0x22c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d105      	bne.n	80007a0 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_DI();
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <GPIO_PeriClockControl+0x204>)
 800079a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40021c00 	.word	0x40021c00
 80007d0:	40022000 	.word	0x40022000
 80007d4:	40022400 	.word	0x40022400
 80007d8:	40022800 	.word	0x40022800

080007dc <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing pin configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

    GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fede 	bl	80005ac <GPIO_PeriClockControl>
    uint32_t temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	795b      	ldrb	r3, [r3, #5]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d820      	bhi.n	800083e <GPIO_Init+0x62>

        temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	795b      	ldrb	r3, [r3, #5]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2103      	movs	r1, #3
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	400a      	ands	r2, r1
 800082a:	601a      	str	r2, [r3, #0]

        pGPIOHandle->pGPIOx->MODER |= temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	430a      	orrs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e0f3      	b.n	8000a26 <GPIO_Init+0x24a>
    }
    else {

        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d117      	bne.n	8000876 <GPIO_Init+0x9a>

            // Configure FTSR
            EXTI->RTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000846:	4b58      	ldr	r3, [pc, #352]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	7912      	ldrb	r2, [r2, #4]
 800084e:	4611      	mov	r1, r2
 8000850:	2201      	movs	r2, #1
 8000852:	408a      	lsls	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	4611      	mov	r1, r2
 8000858:	4a53      	ldr	r2, [pc, #332]	@ (80009a8 <GPIO_Init+0x1cc>)
 800085a:	400b      	ands	r3, r1
 800085c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085e:	4b52      	ldr	r3, [pc, #328]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	7912      	ldrb	r2, [r2, #4]
 8000866:	4611      	mov	r1, r2
 8000868:	2201      	movs	r2, #1
 800086a:	408a      	lsls	r2, r1
 800086c:	4611      	mov	r1, r2
 800086e:	4a4e      	ldr	r2, [pc, #312]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000870:	430b      	orrs	r3, r1
 8000872:	60d3      	str	r3, [r2, #12]
 8000874:	e031      	b.n	80008da <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	2b05      	cmp	r3, #5
 800087c:	d117      	bne.n	80008ae <GPIO_Init+0xd2>

            // Configure RTSR
            EXTI->FTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087e:	4b4a      	ldr	r3, [pc, #296]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	7912      	ldrb	r2, [r2, #4]
 8000886:	4611      	mov	r1, r2
 8000888:	2201      	movs	r2, #1
 800088a:	408a      	lsls	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a45      	ldr	r2, [pc, #276]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000892:	400b      	ands	r3, r1
 8000894:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000896:	4b44      	ldr	r3, [pc, #272]	@ (80009a8 <GPIO_Init+0x1cc>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	7912      	ldrb	r2, [r2, #4]
 800089e:	4611      	mov	r1, r2
 80008a0:	2201      	movs	r2, #1
 80008a2:	408a      	lsls	r2, r1
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a40      	ldr	r2, [pc, #256]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6093      	str	r3, [r2, #8]
 80008ac:	e015      	b.n	80008da <GPIO_Init+0xfe>
        }
        else {

            // Configure Both  FTSR, RTSR
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ae:	4b3e      	ldr	r3, [pc, #248]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	7912      	ldrb	r2, [r2, #4]
 80008b6:	4611      	mov	r1, r2
 80008b8:	2201      	movs	r2, #1
 80008ba:	408a      	lsls	r2, r1
 80008bc:	4611      	mov	r1, r2
 80008be:	4a3a      	ldr	r2, [pc, #232]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c4:	4b38      	ldr	r3, [pc, #224]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7912      	ldrb	r2, [r2, #4]
 80008cc:	4611      	mov	r1, r2
 80008ce:	2201      	movs	r2, #1
 80008d0:	408a      	lsls	r2, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a34      	ldr	r2, [pc, #208]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008d6:	430b      	orrs	r3, r1
 80008d8:	60d3      	str	r3, [r2, #12]
        }

        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Unmask the interrupt for the pin
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	7912      	ldrb	r2, [r2, #4]
 80008e2:	4611      	mov	r1, r2
 80008e4:	2201      	movs	r2, #1
 80008e6:	408a      	lsls	r2, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	4a2f      	ldr	r2, [pc, #188]	@ (80009a8 <GPIO_Init+0x1cc>)
 80008ec:	430b      	orrs	r3, r1
 80008ee:	6013      	str	r3, [r2, #0]

        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // Determine the EXTI line register (0-3)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4; // Determine the bit position within the register
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	72bb      	strb	r3, [r7, #10]
        SYSCFG_PCLK_EN();
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <GPIO_Init+0x1d0>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a29      	ldr	r2, [pc, #164]	@ (80009ac <GPIO_Init+0x1d0>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
        uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a27      	ldr	r2, [pc, #156]	@ (80009b0 <GPIO_Init+0x1d4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d061      	beq.n	80009dc <GPIO_Init+0x200>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <GPIO_Init+0x1d8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d040      	beq.n	80009a4 <GPIO_Init+0x1c8>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <GPIO_Init+0x1dc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d039      	beq.n	80009a0 <GPIO_Init+0x1c4>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <GPIO_Init+0x1e0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d032      	beq.n	800099c <GPIO_Init+0x1c0>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <GPIO_Init+0x1e4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d02b      	beq.n	8000998 <GPIO_Init+0x1bc>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <GPIO_Init+0x1e8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d024      	beq.n	8000994 <GPIO_Init+0x1b8>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <GPIO_Init+0x1ec>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d01d      	beq.n	8000990 <GPIO_Init+0x1b4>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <GPIO_Init+0x1f0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d016      	beq.n	800098c <GPIO_Init+0x1b0>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <GPIO_Init+0x1f4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d00f      	beq.n	8000988 <GPIO_Init+0x1ac>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <GPIO_Init+0x1f8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d008      	beq.n	8000984 <GPIO_Init+0x1a8>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <GPIO_Init+0x1fc>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d101      	bne.n	8000980 <GPIO_Init+0x1a4>
 800097c:	230a      	movs	r3, #10
 800097e:	e02e      	b.n	80009de <GPIO_Init+0x202>
 8000980:	2300      	movs	r3, #0
 8000982:	e02c      	b.n	80009de <GPIO_Init+0x202>
 8000984:	2309      	movs	r3, #9
 8000986:	e02a      	b.n	80009de <GPIO_Init+0x202>
 8000988:	2308      	movs	r3, #8
 800098a:	e028      	b.n	80009de <GPIO_Init+0x202>
 800098c:	2307      	movs	r3, #7
 800098e:	e026      	b.n	80009de <GPIO_Init+0x202>
 8000990:	2306      	movs	r3, #6
 8000992:	e024      	b.n	80009de <GPIO_Init+0x202>
 8000994:	2305      	movs	r3, #5
 8000996:	e022      	b.n	80009de <GPIO_Init+0x202>
 8000998:	2304      	movs	r3, #4
 800099a:	e020      	b.n	80009de <GPIO_Init+0x202>
 800099c:	2303      	movs	r3, #3
 800099e:	e01e      	b.n	80009de <GPIO_Init+0x202>
 80009a0:	2302      	movs	r3, #2
 80009a2:	e01c      	b.n	80009de <GPIO_Init+0x202>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e01a      	b.n	80009de <GPIO_Init+0x202>
 80009a8:	40013c00 	.word	0x40013c00
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40021400 	.word	0x40021400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40021c00 	.word	0x40021c00
 80009d0:	40022000 	.word	0x40022000
 80009d4:	40022400 	.word	0x40022400
 80009d8:	40022800 	.word	0x40022800
 80009dc:	2300      	movs	r3, #0
 80009de:	727b      	strb	r3, [r7, #9]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2)); // Clear bits
 80009e0:	4a6c      	ldr	r2, [pc, #432]	@ (8000b94 <GPIO_Init+0x3b8>)
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	3302      	adds	r3, #2
 80009e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ea:	7abb      	ldrb	r3, [r7, #10]
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	210f      	movs	r1, #15
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	4966      	ldr	r1, [pc, #408]	@ (8000b94 <GPIO_Init+0x3b8>)
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4002      	ands	r2, r0
 80009fe:	3302      	adds	r3, #2
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= port_code << (4 *temp2);
 8000a04:	4a63      	ldr	r2, [pc, #396]	@ (8000b94 <GPIO_Init+0x3b8>)
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a0e:	7a79      	ldrb	r1, [r7, #9]
 8000a10:	7abb      	ldrb	r3, [r7, #10]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	495e      	ldr	r1, [pc, #376]	@ (8000b94 <GPIO_Init+0x3b8>)
 8000a1c:	7afb      	ldrb	r3, [r7, #11]
 8000a1e:	4302      	orrs	r2, r0
 8000a20:	3302      	adds	r3, #2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    }

    temp = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7a1b      	ldrb	r3, [r3, #8]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bit
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2301      	movs	r3, #1
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	400a      	ands	r2, r1
 8000a54:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6859      	ldr	r1, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	605a      	str	r2, [r3, #4]

    temp = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]

    temp =pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2103      	movs	r1, #3
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	400a      	ands	r2, r1
 8000a98:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6899      	ldr	r1, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	609a      	str	r2, [r3, #8]

    temp = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2103      	movs	r1, #3
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	400a      	ands	r2, r1
 8000adc:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68d9      	ldr	r1, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]

    temp = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	795b      	ldrb	r3, [r3, #5]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d148      	bne.n	8000b8c <GPIO_Init+0x3b0>
        if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < 8) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d822      	bhi.n	8000b48 <GPIO_Init+0x36c>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7a5b      	ldrb	r3, [r3, #9]
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	210f      	movs	r1, #15
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	400a      	ands	r2, r1
 8000b30:	621a      	str	r2, [r3, #32]
            pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a19      	ldr	r1, [r3, #32]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	621a      	str	r2, [r3, #32]
            temp = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
        }
    }
}
 8000b46:	e021      	b.n	8000b8c <GPIO_Init+0x3b0>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7a5b      	ldrb	r3, [r3, #9]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	3b08      	subs	r3, #8
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	400a      	ands	r2, r1
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013800 	.word	0x40013800

08000b98 <I2C_Init>:

#include "stm32f746xx_i2c_driver.h"
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
static  void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

    uint32_t tempreg = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]

    // Enable the I2C1 peripheral clock
    I2C_PeriClockControl(pI2CHandle->pI2Cx , ENABLE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f960 	bl	8000e70 <I2C_PeriClockControl>

    tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1; // Shift left to set the address in the correct position
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7a1b      	ldrb	r3, [r3, #8]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
    tempreg |= (1 << 15); // Set the ADDR bit in the OAR1 register
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bc2:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 |= tempreg; // Set the device address in the OAR1 register
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6899      	ldr	r1, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	609a      	str	r2, [r3, #8]

    tempreg = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
    if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8000c94 <I2C_Init+0xfc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d118      	bne.n	8000c14 <I2C_Init+0x7c>
        tempreg |= (0 << I2C_TIMINGR_PRESC); // Set the SCL speed to Standard Mode
        tempreg |= (0x04 << I2C_TIMINGR_SCLDEL); // Set the SCL low period
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000be8:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x02 << I2C_TIMINGR_SDADEL); // Set the SCL high period
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	60fb      	str	r3, [r7, #12]
        tempreg |= (0xF << I2C_TIMINGR_SCLH); // Set the SCL high time
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000bf8:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x13 << I2C_TIMINGR_SCLL); // Set the SCL low time
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f043 0313 	orr.w	r3, r3, #19
 8000c00:	60fb      	str	r3, [r7, #12]

        pI2CHandle->pI2Cx->TIMINGR |= tempreg; // Write the timing configuration to the TIMINGR register
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6919      	ldr	r1, [r3, #16]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	611a      	str	r2, [r3, #16]
        tempreg |= (0x09 << I2C_TIMINGR_SCLH); // Set the SCL high time
        tempreg |= (0x13 << I2C_TIMINGR_SCLL); // Set the SCL low time

        pI2CHandle->pI2Cx->TIMINGR |= tempreg; // Write the timing configuration to the TIMINGR register
    }
}
 8000c12:	e03a      	b.n	8000c8a <I2C_Init+0xf2>
    } else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM2K) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <I2C_Init+0x100>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d118      	bne.n	8000c50 <I2C_Init+0xb8>
        tempreg |= (0x03 << I2C_TIMINGR_SCLDEL); // Set the SCL low period
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000c24:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x01 << I2C_TIMINGR_SDADEL); // Set the SCL high period
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c2c:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x13 << I2C_TIMINGR_SCLH); // Set the SCL high time
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f443 5398 	orr.w	r3, r3, #4864	@ 0x1300
 8000c34:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x2F << I2C_TIMINGR_SCLL); // Set the SCL low time
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f043 032f 	orr.w	r3, r3, #47	@ 0x2f
 8000c3c:	60fb      	str	r3, [r7, #12]
        pI2CHandle->pI2Cx->TIMINGR |= tempreg; // Write the timing configuration to the TIMINGR register
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6919      	ldr	r1, [r3, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	611a      	str	r2, [r3, #16]
}
 8000c4e:	e01c      	b.n	8000c8a <I2C_Init+0xf2>
    } else if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_FM4K) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a11      	ldr	r2, [pc, #68]	@ (8000c9c <I2C_Init+0x104>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d117      	bne.n	8000c8a <I2C_Init+0xf2>
        tempreg |= (0x03 << I2C_TIMINGR_SCLDEL); // Set the SCL low period
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000c60:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x01 << I2C_TIMINGR_SDADEL); // Set the SCL high period
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c68:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x09 << I2C_TIMINGR_SCLH); // Set the SCL high time
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 8000c70:	60fb      	str	r3, [r7, #12]
        tempreg |= (0x13 << I2C_TIMINGR_SCLL); // Set the SCL low time
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f043 0313 	orr.w	r3, r3, #19
 8000c78:	60fb      	str	r3, [r7, #12]
        pI2CHandle->pI2Cx->TIMINGR |= tempreg; // Write the timing configuration to the TIMINGR register
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6919      	ldr	r1, [r3, #16]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	611a      	str	r2, [r3, #16]
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	000186a0 	.word	0x000186a0
 8000c98:	00030d40 	.word	0x00030d40
 8000c9c:	00061a80 	.word	0x00061a80

08000ca0 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr , uint8_t SrOrStop) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	70fb      	strb	r3, [r7, #3]


 // 1. Clear and configure CR2 with address, byte count, and direction
    uint32_t temp = pI2CHandle->pI2Cx->CR2;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
     * - SADD: 7 bits for slave address
     * - NBYTES: 8 bits for number of bytes to transfer
     * - RD_WRN: 1 (set) for read
     * - RD_WRN: 0 (clear) for write
     */
    temp &= ~((0x7F << I2C_CR2_SADD) | (0xFF << I2C_CR2_NBYTES) | (1 << I2C_CR2_RD_WRN));
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <I2C_MasterSendData+0xc4>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
    temp |= ((SlaveAddr << 1) << I2C_CR2_SADD); // 7-bit address shifted
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
    temp |= (Len << I2C_CR2_NBYTES);            // Number of bytes
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
    temp |= (1 << I2C_CR2_AUTOEND);            // Auto-end mode
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd8:	613b      	str	r3, [r7, #16]
    pI2CHandle->pI2Cx->CR2 = temp;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]

    // 2. Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f932 	bl	8000f50 <I2C_GenerateStartCondition>

    // 3. Send data bytes
    for(uint32_t i = 0; i < Len; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e013      	b.n	8000d1a <I2C_MasterSendData+0x7a>
        // Wait until TXE flag is set
        while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8000cf2:	bf00      	nop
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f946 	bl	8000f8c <I2C_GetFlagStatus>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f6      	beq.n	8000cf4 <I2C_MasterSendData+0x54>
            // Consider adding a timeout here
        }
        // Send data byte
        pI2CHandle->pI2Cx->TXDR = pTxBuffer[i];
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
    for(uint32_t i = 0; i < Len; i++) {
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e7      	bcc.n	8000cf2 <I2C_MasterSendData+0x52>
    }

    // 4. In auto-end mode, STOP is generated automatically after the last byte
    // Wait for STOPF flag
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_STOPF));
 8000d22:	bf00      	nop
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f92e 	bl	8000f8c <I2C_GetFlagStatus>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f6      	beq.n	8000d24 <I2C_MasterSendData+0x84>

    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_STOPF));
 8000d36:	bf00      	nop
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f924 	bl	8000f8c <I2C_GetFlagStatus>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f6      	beq.n	8000d38 <I2C_MasterSendData+0x98>

    if (SrOrStop == I2C_DISABLE_SR) {
 8000d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d104      	bne.n	8000d5c <I2C_MasterSendData+0xbc>
       I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f909 	bl	8000f6e <I2C_GenerateStopCondition>





}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	ff00fb80 	.word	0xff00fb80

08000d68 <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t SrOrStop)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	70fb      	strb	r3, [r7, #3]
    uint32_t temp = pI2CHandle->pI2Cx->CR2;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	613b      	str	r3, [r7, #16]

    // Clear SADD, NBYTES, RD_WRN fields
    temp &= ~((0x7F << I2C_CR2_SADD) | (0xFF << I2C_CR2_NBYTES) | (1 << I2C_CR2_RD_WRN));
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <I2C_MasterReceiveData+0xcc>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
    temp |= ((SlaveAddr << 1) << I2C_CR2_SADD); // 7-bit address
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
    temp |= (Len << I2C_CR2_NBYTES);            // Number of bytes
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
    temp |= (1 << I2C_CR2_RD_WRN);              // Set for read
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da0:	613b      	str	r3, [r7, #16]
    temp |= (1 << I2C_CR2_AUTOEND);             // Auto-end mode
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000da8:	613b      	str	r3, [r7, #16]
    pI2CHandle->pI2Cx->CR2 = temp;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]

    // Generate START condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f8ca 	bl	8000f50 <I2C_GenerateStartCondition>

    // Receive data
    for(uint32_t i = 0; i < Len; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e014      	b.n	8000dec <I2C_MasterReceiveData+0x84>
        // Wait until RXNE flag is set
        while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8000dc2:	bf00      	nop
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f8de 	bl	8000f8c <I2C_GetFlagStatus>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f6      	beq.n	8000dc4 <I2C_MasterReceiveData+0x5c>
            // Optionally add timeout
        }
        // Read data
        pRxBuffer[i] = (uint8_t)pI2CHandle->pI2Cx->RXDR;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < Len; i++) {
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3e6      	bcc.n	8000dc2 <I2C_MasterReceiveData+0x5a>
    }

    // Wait for STOPF flag (stop condition detected)
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_STOPF));
 8000df4:	bf00      	nop
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8c5 	bl	8000f8c <I2C_GetFlagStatus>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f6      	beq.n	8000df6 <I2C_MasterReceiveData+0x8e>

    // Clear STOPF flag by writing to ICR
    pI2CHandle->pI2Cx->ICR |= (1 << I2C_ISR_STOPF);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	69da      	ldr	r2, [r3, #28]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	61da      	str	r2, [r3, #28]

    // If SrOrStop is I2C_ENABLE_SR, keep the bus active for repeated start
    if (SrOrStop == I2C_DISABLE_SR) {
 8000e18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <I2C_MasterReceiveData+0xc2>
        // Generate STOP condition
        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f8a2 	bl	8000f6e <I2C_GenerateStopCondition>
    }

}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	ff00fb80 	.word	0xff00fb80

08000e38 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <I2C_PeripheralControl+0x20>
        // Enable the I2C peripheral
        pI2Cx->CR1 |= (1 << 0); // Set the PE bit in CR1 register
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
    } else {
        // Disable the I2C peripheral
        pI2Cx->CR1 &= ~(1 << 0); // Clear the PE bit in CR1 register
    }
}
 8000e56:	e005      	b.n	8000e64 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << 0); // Clear the PE bit in CR1 register
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 0201 	bic.w	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d12b      	bne.n	8000eda <I2C_PeriClockControl+0x6a>
        // Enable the clock for the I2C peripheral
        if (pI2Cx == I2C1) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <I2C_PeriClockControl+0xcc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <I2C_PeriClockControl+0x28>
            I2C1_PCLK_EN();
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
        }
        else if (pI2Cx == I2C4) {
            I2C4_PCLK_DI();
        }
    }
}
 8000e96:	e04b      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f44 <I2C_PeriClockControl+0xd4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <I2C_PeriClockControl+0x3e>
            I2C2_PCLK_EN();
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	4a26      	ldr	r2, [pc, #152]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ea6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eaa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eac:	e040      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C3) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a25      	ldr	r2, [pc, #148]	@ (8000f48 <I2C_PeriClockControl+0xd8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <I2C_PeriClockControl+0x54>
            I2C3_PCLK_EN();
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ebc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ec2:	e035      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C4) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <I2C_PeriClockControl+0xdc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d131      	bne.n	8000f30 <I2C_PeriClockControl+0xc0>
            I2C4_PCLK_EN();
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ed8:	e02a      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        if (pI2Cx == I2C1) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <I2C_PeriClockControl+0xcc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <I2C_PeriClockControl+0x80>
            I2C1_PCLK_DI();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000ee8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eee:	e01f      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C2) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <I2C_PeriClockControl+0xd4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <I2C_PeriClockControl+0x96>
            I2C2_PCLK_DI();
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000efe:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000f02:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f04:	e014      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C3) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <I2C_PeriClockControl+0xd8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <I2C_PeriClockControl+0xac>
            I2C3_PCLK_DI();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000f14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f1a:	e009      	b.n	8000f30 <I2C_PeriClockControl+0xc0>
        else if (pI2Cx == I2C4) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <I2C_PeriClockControl+0xdc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d105      	bne.n	8000f30 <I2C_PeriClockControl+0xc0>
            I2C4_PCLK_DI();
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <I2C_PeriClockControl+0xd0>)
 8000f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40005800 	.word	0x40005800
 8000f48:	40005c00 	.word	0x40005c00
 8000f4c:	40006000 	.word	0x40006000

08000f50 <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    // Generate a START condition
    pI2Cx->CR2 |= (1 << I2C_CR2_START);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
 
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <I2C_GenerateStopCondition>:
    pI2Cx->CR2 |= SlaveAddr; // Set the address in the CR2 register


}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
    // Generate a STOP condition
    pI2Cx->CR2 |= (1 << I2C_CR2_STOP);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <I2C_GetFlagStatus>:


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    if (pI2Cx->ISR & FlagName) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <I2C_GetFlagStatus+0x1a>
        return 1; // Flag is set
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <I2C_GetFlagStatus+0x1c>
    } else {
        return 0; // Flag is not set
 8000fa6:	2300      	movs	r3, #0
    }
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <std>:
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	4604      	mov	r4, r0
 8000fba:	e9c0 3300 	strd	r3, r3, [r0]
 8000fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fc2:	6083      	str	r3, [r0, #8]
 8000fc4:	8181      	strh	r1, [r0, #12]
 8000fc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fc8:	81c2      	strh	r2, [r0, #14]
 8000fca:	6183      	str	r3, [r0, #24]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2208      	movs	r2, #8
 8000fd0:	305c      	adds	r0, #92	@ 0x5c
 8000fd2:	f000 f906 	bl	80011e2 <memset>
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <std+0x58>)
 8000fd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <std+0x5c>)
 8000fdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <std+0x60>)
 8000fe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <std+0x64>)
 8000fe4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <std+0x68>)
 8000fe8:	6224      	str	r4, [r4, #32]
 8000fea:	429c      	cmp	r4, r3
 8000fec:	d006      	beq.n	8000ffc <std+0x48>
 8000fee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ff2:	4294      	cmp	r4, r2
 8000ff4:	d002      	beq.n	8000ffc <std+0x48>
 8000ff6:	33d0      	adds	r3, #208	@ 0xd0
 8000ff8:	429c      	cmp	r4, r3
 8000ffa:	d105      	bne.n	8001008 <std+0x54>
 8000ffc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001004:	f000 b966 	b.w	80012d4 <__retarget_lock_init_recursive>
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	0800115d 	.word	0x0800115d
 8001010:	0800117f 	.word	0x0800117f
 8001014:	080011b7 	.word	0x080011b7
 8001018:	080011db 	.word	0x080011db
 800101c:	200000a8 	.word	0x200000a8

08001020 <stdio_exit_handler>:
 8001020:	4a02      	ldr	r2, [pc, #8]	@ (800102c <stdio_exit_handler+0xc>)
 8001022:	4903      	ldr	r1, [pc, #12]	@ (8001030 <stdio_exit_handler+0x10>)
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <stdio_exit_handler+0x14>)
 8001026:	f000 b869 	b.w	80010fc <_fwalk_sglue>
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000
 8001030:	08001b65 	.word	0x08001b65
 8001034:	20000010 	.word	0x20000010

08001038 <cleanup_stdio>:
 8001038:	6841      	ldr	r1, [r0, #4]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <cleanup_stdio+0x34>)
 800103c:	4299      	cmp	r1, r3
 800103e:	b510      	push	{r4, lr}
 8001040:	4604      	mov	r4, r0
 8001042:	d001      	beq.n	8001048 <cleanup_stdio+0x10>
 8001044:	f000 fd8e 	bl	8001b64 <_fflush_r>
 8001048:	68a1      	ldr	r1, [r4, #8]
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <cleanup_stdio+0x38>)
 800104c:	4299      	cmp	r1, r3
 800104e:	d002      	beq.n	8001056 <cleanup_stdio+0x1e>
 8001050:	4620      	mov	r0, r4
 8001052:	f000 fd87 	bl	8001b64 <_fflush_r>
 8001056:	68e1      	ldr	r1, [r4, #12]
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <cleanup_stdio+0x3c>)
 800105a:	4299      	cmp	r1, r3
 800105c:	d004      	beq.n	8001068 <cleanup_stdio+0x30>
 800105e:	4620      	mov	r0, r4
 8001060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001064:	f000 bd7e 	b.w	8001b64 <_fflush_r>
 8001068:	bd10      	pop	{r4, pc}
 800106a:	bf00      	nop
 800106c:	200000a8 	.word	0x200000a8
 8001070:	20000110 	.word	0x20000110
 8001074:	20000178 	.word	0x20000178

08001078 <global_stdio_init.part.0>:
 8001078:	b510      	push	{r4, lr}
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <global_stdio_init.part.0+0x30>)
 800107c:	4c0b      	ldr	r4, [pc, #44]	@ (80010ac <global_stdio_init.part.0+0x34>)
 800107e:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <global_stdio_init.part.0+0x38>)
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	4620      	mov	r0, r4
 8001084:	2200      	movs	r2, #0
 8001086:	2104      	movs	r1, #4
 8001088:	f7ff ff94 	bl	8000fb4 <std>
 800108c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001090:	2201      	movs	r2, #1
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff ff8e 	bl	8000fb4 <std>
 8001098:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800109c:	2202      	movs	r2, #2
 800109e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010a2:	2112      	movs	r1, #18
 80010a4:	f7ff bf86 	b.w	8000fb4 <std>
 80010a8:	200001e0 	.word	0x200001e0
 80010ac:	200000a8 	.word	0x200000a8
 80010b0:	08001021 	.word	0x08001021

080010b4 <__sfp_lock_acquire>:
 80010b4:	4801      	ldr	r0, [pc, #4]	@ (80010bc <__sfp_lock_acquire+0x8>)
 80010b6:	f000 b90e 	b.w	80012d6 <__retarget_lock_acquire_recursive>
 80010ba:	bf00      	nop
 80010bc:	200001e9 	.word	0x200001e9

080010c0 <__sfp_lock_release>:
 80010c0:	4801      	ldr	r0, [pc, #4]	@ (80010c8 <__sfp_lock_release+0x8>)
 80010c2:	f000 b909 	b.w	80012d8 <__retarget_lock_release_recursive>
 80010c6:	bf00      	nop
 80010c8:	200001e9 	.word	0x200001e9

080010cc <__sinit>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	f7ff fff0 	bl	80010b4 <__sfp_lock_acquire>
 80010d4:	6a23      	ldr	r3, [r4, #32]
 80010d6:	b11b      	cbz	r3, 80010e0 <__sinit+0x14>
 80010d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010dc:	f7ff bff0 	b.w	80010c0 <__sfp_lock_release>
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__sinit+0x28>)
 80010e2:	6223      	str	r3, [r4, #32]
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <__sinit+0x2c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f5      	bne.n	80010d8 <__sinit+0xc>
 80010ec:	f7ff ffc4 	bl	8001078 <global_stdio_init.part.0>
 80010f0:	e7f2      	b.n	80010d8 <__sinit+0xc>
 80010f2:	bf00      	nop
 80010f4:	08001039 	.word	0x08001039
 80010f8:	200001e0 	.word	0x200001e0

080010fc <_fwalk_sglue>:
 80010fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001100:	4607      	mov	r7, r0
 8001102:	4688      	mov	r8, r1
 8001104:	4614      	mov	r4, r2
 8001106:	2600      	movs	r6, #0
 8001108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800110c:	f1b9 0901 	subs.w	r9, r9, #1
 8001110:	d505      	bpl.n	800111e <_fwalk_sglue+0x22>
 8001112:	6824      	ldr	r4, [r4, #0]
 8001114:	2c00      	cmp	r4, #0
 8001116:	d1f7      	bne.n	8001108 <_fwalk_sglue+0xc>
 8001118:	4630      	mov	r0, r6
 800111a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800111e:	89ab      	ldrh	r3, [r5, #12]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d907      	bls.n	8001134 <_fwalk_sglue+0x38>
 8001124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001128:	3301      	adds	r3, #1
 800112a:	d003      	beq.n	8001134 <_fwalk_sglue+0x38>
 800112c:	4629      	mov	r1, r5
 800112e:	4638      	mov	r0, r7
 8001130:	47c0      	blx	r8
 8001132:	4306      	orrs	r6, r0
 8001134:	3568      	adds	r5, #104	@ 0x68
 8001136:	e7e9      	b.n	800110c <_fwalk_sglue+0x10>

08001138 <iprintf>:
 8001138:	b40f      	push	{r0, r1, r2, r3}
 800113a:	b507      	push	{r0, r1, r2, lr}
 800113c:	4906      	ldr	r1, [pc, #24]	@ (8001158 <iprintf+0x20>)
 800113e:	ab04      	add	r3, sp, #16
 8001140:	6808      	ldr	r0, [r1, #0]
 8001142:	f853 2b04 	ldr.w	r2, [r3], #4
 8001146:	6881      	ldr	r1, [r0, #8]
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	f000 f9e7 	bl	800151c <_vfiprintf_r>
 800114e:	b003      	add	sp, #12
 8001150:	f85d eb04 	ldr.w	lr, [sp], #4
 8001154:	b004      	add	sp, #16
 8001156:	4770      	bx	lr
 8001158:	2000000c 	.word	0x2000000c

0800115c <__sread>:
 800115c:	b510      	push	{r4, lr}
 800115e:	460c      	mov	r4, r1
 8001160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001164:	f000 f868 	bl	8001238 <_read_r>
 8001168:	2800      	cmp	r0, #0
 800116a:	bfab      	itete	ge
 800116c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800116e:	89a3      	ldrhlt	r3, [r4, #12]
 8001170:	181b      	addge	r3, r3, r0
 8001172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001176:	bfac      	ite	ge
 8001178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800117a:	81a3      	strhlt	r3, [r4, #12]
 800117c:	bd10      	pop	{r4, pc}

0800117e <__swrite>:
 800117e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001182:	461f      	mov	r7, r3
 8001184:	898b      	ldrh	r3, [r1, #12]
 8001186:	05db      	lsls	r3, r3, #23
 8001188:	4605      	mov	r5, r0
 800118a:	460c      	mov	r4, r1
 800118c:	4616      	mov	r6, r2
 800118e:	d505      	bpl.n	800119c <__swrite+0x1e>
 8001190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001194:	2302      	movs	r3, #2
 8001196:	2200      	movs	r2, #0
 8001198:	f000 f83c 	bl	8001214 <_lseek_r>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011a6:	81a3      	strh	r3, [r4, #12]
 80011a8:	4632      	mov	r2, r6
 80011aa:	463b      	mov	r3, r7
 80011ac:	4628      	mov	r0, r5
 80011ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011b2:	f000 b853 	b.w	800125c <_write_r>

080011b6 <__sseek>:
 80011b6:	b510      	push	{r4, lr}
 80011b8:	460c      	mov	r4, r1
 80011ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011be:	f000 f829 	bl	8001214 <_lseek_r>
 80011c2:	1c43      	adds	r3, r0, #1
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	bf15      	itete	ne
 80011c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011d2:	81a3      	strheq	r3, [r4, #12]
 80011d4:	bf18      	it	ne
 80011d6:	81a3      	strhne	r3, [r4, #12]
 80011d8:	bd10      	pop	{r4, pc}

080011da <__sclose>:
 80011da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011de:	f000 b809 	b.w	80011f4 <_close_r>

080011e2 <memset>:
 80011e2:	4402      	add	r2, r0
 80011e4:	4603      	mov	r3, r0
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d100      	bne.n	80011ec <memset+0xa>
 80011ea:	4770      	bx	lr
 80011ec:	f803 1b01 	strb.w	r1, [r3], #1
 80011f0:	e7f9      	b.n	80011e6 <memset+0x4>
	...

080011f4 <_close_r>:
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4d06      	ldr	r5, [pc, #24]	@ (8001210 <_close_r+0x1c>)
 80011f8:	2300      	movs	r3, #0
 80011fa:	4604      	mov	r4, r0
 80011fc:	4608      	mov	r0, r1
 80011fe:	602b      	str	r3, [r5, #0]
 8001200:	f7ff f943 	bl	800048a <_close>
 8001204:	1c43      	adds	r3, r0, #1
 8001206:	d102      	bne.n	800120e <_close_r+0x1a>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	b103      	cbz	r3, 800120e <_close_r+0x1a>
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	200001e4 	.word	0x200001e4

08001214 <_lseek_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d07      	ldr	r5, [pc, #28]	@ (8001234 <_lseek_r+0x20>)
 8001218:	4604      	mov	r4, r0
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	2200      	movs	r2, #0
 8001220:	602a      	str	r2, [r5, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff f955 	bl	80004d2 <_lseek>
 8001228:	1c43      	adds	r3, r0, #1
 800122a:	d102      	bne.n	8001232 <_lseek_r+0x1e>
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	b103      	cbz	r3, 8001232 <_lseek_r+0x1e>
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	bd38      	pop	{r3, r4, r5, pc}
 8001234:	200001e4 	.word	0x200001e4

08001238 <_read_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d07      	ldr	r5, [pc, #28]	@ (8001258 <_read_r+0x20>)
 800123c:	4604      	mov	r4, r0
 800123e:	4608      	mov	r0, r1
 8001240:	4611      	mov	r1, r2
 8001242:	2200      	movs	r2, #0
 8001244:	602a      	str	r2, [r5, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	f7ff f8e6 	bl	8000418 <_read>
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	d102      	bne.n	8001256 <_read_r+0x1e>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	b103      	cbz	r3, 8001256 <_read_r+0x1e>
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	bd38      	pop	{r3, r4, r5, pc}
 8001258:	200001e4 	.word	0x200001e4

0800125c <_write_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d07      	ldr	r5, [pc, #28]	@ (800127c <_write_r+0x20>)
 8001260:	4604      	mov	r4, r0
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	2200      	movs	r2, #0
 8001268:	602a      	str	r2, [r5, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	f7ff f8f1 	bl	8000452 <_write>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_write_r+0x1e>
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	b103      	cbz	r3, 800127a <_write_r+0x1e>
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	200001e4 	.word	0x200001e4

08001280 <__errno>:
 8001280:	4b01      	ldr	r3, [pc, #4]	@ (8001288 <__errno+0x8>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c

0800128c <__libc_init_array>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	4d0d      	ldr	r5, [pc, #52]	@ (80012c4 <__libc_init_array+0x38>)
 8001290:	4c0d      	ldr	r4, [pc, #52]	@ (80012c8 <__libc_init_array+0x3c>)
 8001292:	1b64      	subs	r4, r4, r5
 8001294:	10a4      	asrs	r4, r4, #2
 8001296:	2600      	movs	r6, #0
 8001298:	42a6      	cmp	r6, r4
 800129a:	d109      	bne.n	80012b0 <__libc_init_array+0x24>
 800129c:	4d0b      	ldr	r5, [pc, #44]	@ (80012cc <__libc_init_array+0x40>)
 800129e:	4c0c      	ldr	r4, [pc, #48]	@ (80012d0 <__libc_init_array+0x44>)
 80012a0:	f000 fdb0 	bl	8001e04 <_init>
 80012a4:	1b64      	subs	r4, r4, r5
 80012a6:	10a4      	asrs	r4, r4, #2
 80012a8:	2600      	movs	r6, #0
 80012aa:	42a6      	cmp	r6, r4
 80012ac:	d105      	bne.n	80012ba <__libc_init_array+0x2e>
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012b4:	4798      	blx	r3
 80012b6:	3601      	adds	r6, #1
 80012b8:	e7ee      	b.n	8001298 <__libc_init_array+0xc>
 80012ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80012be:	4798      	blx	r3
 80012c0:	3601      	adds	r6, #1
 80012c2:	e7f2      	b.n	80012aa <__libc_init_array+0x1e>
 80012c4:	08001e78 	.word	0x08001e78
 80012c8:	08001e78 	.word	0x08001e78
 80012cc:	08001e78 	.word	0x08001e78
 80012d0:	08001e7c 	.word	0x08001e7c

080012d4 <__retarget_lock_init_recursive>:
 80012d4:	4770      	bx	lr

080012d6 <__retarget_lock_acquire_recursive>:
 80012d6:	4770      	bx	lr

080012d8 <__retarget_lock_release_recursive>:
 80012d8:	4770      	bx	lr
	...

080012dc <_free_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4605      	mov	r5, r0
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d041      	beq.n	8001368 <_free_r+0x8c>
 80012e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012e8:	1f0c      	subs	r4, r1, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bfb8      	it	lt
 80012ee:	18e4      	addlt	r4, r4, r3
 80012f0:	f000 f8e0 	bl	80014b4 <__malloc_lock>
 80012f4:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <_free_r+0x90>)
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	b933      	cbnz	r3, 8001308 <_free_r+0x2c>
 80012fa:	6063      	str	r3, [r4, #4]
 80012fc:	6014      	str	r4, [r2, #0]
 80012fe:	4628      	mov	r0, r5
 8001300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001304:	f000 b8dc 	b.w	80014c0 <__malloc_unlock>
 8001308:	42a3      	cmp	r3, r4
 800130a:	d908      	bls.n	800131e <_free_r+0x42>
 800130c:	6820      	ldr	r0, [r4, #0]
 800130e:	1821      	adds	r1, r4, r0
 8001310:	428b      	cmp	r3, r1
 8001312:	bf01      	itttt	eq
 8001314:	6819      	ldreq	r1, [r3, #0]
 8001316:	685b      	ldreq	r3, [r3, #4]
 8001318:	1809      	addeq	r1, r1, r0
 800131a:	6021      	streq	r1, [r4, #0]
 800131c:	e7ed      	b.n	80012fa <_free_r+0x1e>
 800131e:	461a      	mov	r2, r3
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	b10b      	cbz	r3, 8001328 <_free_r+0x4c>
 8001324:	42a3      	cmp	r3, r4
 8001326:	d9fa      	bls.n	800131e <_free_r+0x42>
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	1850      	adds	r0, r2, r1
 800132c:	42a0      	cmp	r0, r4
 800132e:	d10b      	bne.n	8001348 <_free_r+0x6c>
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	4401      	add	r1, r0
 8001334:	1850      	adds	r0, r2, r1
 8001336:	4283      	cmp	r3, r0
 8001338:	6011      	str	r1, [r2, #0]
 800133a:	d1e0      	bne.n	80012fe <_free_r+0x22>
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	6053      	str	r3, [r2, #4]
 8001342:	4408      	add	r0, r1
 8001344:	6010      	str	r0, [r2, #0]
 8001346:	e7da      	b.n	80012fe <_free_r+0x22>
 8001348:	d902      	bls.n	8001350 <_free_r+0x74>
 800134a:	230c      	movs	r3, #12
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	e7d6      	b.n	80012fe <_free_r+0x22>
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	1821      	adds	r1, r4, r0
 8001354:	428b      	cmp	r3, r1
 8001356:	bf04      	itt	eq
 8001358:	6819      	ldreq	r1, [r3, #0]
 800135a:	685b      	ldreq	r3, [r3, #4]
 800135c:	6063      	str	r3, [r4, #4]
 800135e:	bf04      	itt	eq
 8001360:	1809      	addeq	r1, r1, r0
 8001362:	6021      	streq	r1, [r4, #0]
 8001364:	6054      	str	r4, [r2, #4]
 8001366:	e7ca      	b.n	80012fe <_free_r+0x22>
 8001368:	bd38      	pop	{r3, r4, r5, pc}
 800136a:	bf00      	nop
 800136c:	200001f0 	.word	0x200001f0

08001370 <sbrk_aligned>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4e0f      	ldr	r6, [pc, #60]	@ (80013b0 <sbrk_aligned+0x40>)
 8001374:	460c      	mov	r4, r1
 8001376:	6831      	ldr	r1, [r6, #0]
 8001378:	4605      	mov	r5, r0
 800137a:	b911      	cbnz	r1, 8001382 <sbrk_aligned+0x12>
 800137c:	f000 fcae 	bl	8001cdc <_sbrk_r>
 8001380:	6030      	str	r0, [r6, #0]
 8001382:	4621      	mov	r1, r4
 8001384:	4628      	mov	r0, r5
 8001386:	f000 fca9 	bl	8001cdc <_sbrk_r>
 800138a:	1c43      	adds	r3, r0, #1
 800138c:	d103      	bne.n	8001396 <sbrk_aligned+0x26>
 800138e:	f04f 34ff 	mov.w	r4, #4294967295
 8001392:	4620      	mov	r0, r4
 8001394:	bd70      	pop	{r4, r5, r6, pc}
 8001396:	1cc4      	adds	r4, r0, #3
 8001398:	f024 0403 	bic.w	r4, r4, #3
 800139c:	42a0      	cmp	r0, r4
 800139e:	d0f8      	beq.n	8001392 <sbrk_aligned+0x22>
 80013a0:	1a21      	subs	r1, r4, r0
 80013a2:	4628      	mov	r0, r5
 80013a4:	f000 fc9a 	bl	8001cdc <_sbrk_r>
 80013a8:	3001      	adds	r0, #1
 80013aa:	d1f2      	bne.n	8001392 <sbrk_aligned+0x22>
 80013ac:	e7ef      	b.n	800138e <sbrk_aligned+0x1e>
 80013ae:	bf00      	nop
 80013b0:	200001ec 	.word	0x200001ec

080013b4 <_malloc_r>:
 80013b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013b8:	1ccd      	adds	r5, r1, #3
 80013ba:	f025 0503 	bic.w	r5, r5, #3
 80013be:	3508      	adds	r5, #8
 80013c0:	2d0c      	cmp	r5, #12
 80013c2:	bf38      	it	cc
 80013c4:	250c      	movcc	r5, #12
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	4606      	mov	r6, r0
 80013ca:	db01      	blt.n	80013d0 <_malloc_r+0x1c>
 80013cc:	42a9      	cmp	r1, r5
 80013ce:	d904      	bls.n	80013da <_malloc_r+0x26>
 80013d0:	230c      	movs	r3, #12
 80013d2:	6033      	str	r3, [r6, #0]
 80013d4:	2000      	movs	r0, #0
 80013d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014b0 <_malloc_r+0xfc>
 80013de:	f000 f869 	bl	80014b4 <__malloc_lock>
 80013e2:	f8d8 3000 	ldr.w	r3, [r8]
 80013e6:	461c      	mov	r4, r3
 80013e8:	bb44      	cbnz	r4, 800143c <_malloc_r+0x88>
 80013ea:	4629      	mov	r1, r5
 80013ec:	4630      	mov	r0, r6
 80013ee:	f7ff ffbf 	bl	8001370 <sbrk_aligned>
 80013f2:	1c43      	adds	r3, r0, #1
 80013f4:	4604      	mov	r4, r0
 80013f6:	d158      	bne.n	80014aa <_malloc_r+0xf6>
 80013f8:	f8d8 4000 	ldr.w	r4, [r8]
 80013fc:	4627      	mov	r7, r4
 80013fe:	2f00      	cmp	r7, #0
 8001400:	d143      	bne.n	800148a <_malloc_r+0xd6>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d04b      	beq.n	800149e <_malloc_r+0xea>
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	4639      	mov	r1, r7
 800140a:	4630      	mov	r0, r6
 800140c:	eb04 0903 	add.w	r9, r4, r3
 8001410:	f000 fc64 	bl	8001cdc <_sbrk_r>
 8001414:	4581      	cmp	r9, r0
 8001416:	d142      	bne.n	800149e <_malloc_r+0xea>
 8001418:	6821      	ldr	r1, [r4, #0]
 800141a:	1a6d      	subs	r5, r5, r1
 800141c:	4629      	mov	r1, r5
 800141e:	4630      	mov	r0, r6
 8001420:	f7ff ffa6 	bl	8001370 <sbrk_aligned>
 8001424:	3001      	adds	r0, #1
 8001426:	d03a      	beq.n	800149e <_malloc_r+0xea>
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	442b      	add	r3, r5
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	f8d8 3000 	ldr.w	r3, [r8]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	bb62      	cbnz	r2, 8001490 <_malloc_r+0xdc>
 8001436:	f8c8 7000 	str.w	r7, [r8]
 800143a:	e00f      	b.n	800145c <_malloc_r+0xa8>
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	1b52      	subs	r2, r2, r5
 8001440:	d420      	bmi.n	8001484 <_malloc_r+0xd0>
 8001442:	2a0b      	cmp	r2, #11
 8001444:	d917      	bls.n	8001476 <_malloc_r+0xc2>
 8001446:	1961      	adds	r1, r4, r5
 8001448:	42a3      	cmp	r3, r4
 800144a:	6025      	str	r5, [r4, #0]
 800144c:	bf18      	it	ne
 800144e:	6059      	strne	r1, [r3, #4]
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	bf08      	it	eq
 8001454:	f8c8 1000 	streq.w	r1, [r8]
 8001458:	5162      	str	r2, [r4, r5]
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	4630      	mov	r0, r6
 800145e:	f000 f82f 	bl	80014c0 <__malloc_unlock>
 8001462:	f104 000b 	add.w	r0, r4, #11
 8001466:	1d23      	adds	r3, r4, #4
 8001468:	f020 0007 	bic.w	r0, r0, #7
 800146c:	1ac2      	subs	r2, r0, r3
 800146e:	bf1c      	itt	ne
 8001470:	1a1b      	subne	r3, r3, r0
 8001472:	50a3      	strne	r3, [r4, r2]
 8001474:	e7af      	b.n	80013d6 <_malloc_r+0x22>
 8001476:	6862      	ldr	r2, [r4, #4]
 8001478:	42a3      	cmp	r3, r4
 800147a:	bf0c      	ite	eq
 800147c:	f8c8 2000 	streq.w	r2, [r8]
 8001480:	605a      	strne	r2, [r3, #4]
 8001482:	e7eb      	b.n	800145c <_malloc_r+0xa8>
 8001484:	4623      	mov	r3, r4
 8001486:	6864      	ldr	r4, [r4, #4]
 8001488:	e7ae      	b.n	80013e8 <_malloc_r+0x34>
 800148a:	463c      	mov	r4, r7
 800148c:	687f      	ldr	r7, [r7, #4]
 800148e:	e7b6      	b.n	80013fe <_malloc_r+0x4a>
 8001490:	461a      	mov	r2, r3
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	42a3      	cmp	r3, r4
 8001496:	d1fb      	bne.n	8001490 <_malloc_r+0xdc>
 8001498:	2300      	movs	r3, #0
 800149a:	6053      	str	r3, [r2, #4]
 800149c:	e7de      	b.n	800145c <_malloc_r+0xa8>
 800149e:	230c      	movs	r3, #12
 80014a0:	6033      	str	r3, [r6, #0]
 80014a2:	4630      	mov	r0, r6
 80014a4:	f000 f80c 	bl	80014c0 <__malloc_unlock>
 80014a8:	e794      	b.n	80013d4 <_malloc_r+0x20>
 80014aa:	6005      	str	r5, [r0, #0]
 80014ac:	e7d6      	b.n	800145c <_malloc_r+0xa8>
 80014ae:	bf00      	nop
 80014b0:	200001f0 	.word	0x200001f0

080014b4 <__malloc_lock>:
 80014b4:	4801      	ldr	r0, [pc, #4]	@ (80014bc <__malloc_lock+0x8>)
 80014b6:	f7ff bf0e 	b.w	80012d6 <__retarget_lock_acquire_recursive>
 80014ba:	bf00      	nop
 80014bc:	200001e8 	.word	0x200001e8

080014c0 <__malloc_unlock>:
 80014c0:	4801      	ldr	r0, [pc, #4]	@ (80014c8 <__malloc_unlock+0x8>)
 80014c2:	f7ff bf09 	b.w	80012d8 <__retarget_lock_release_recursive>
 80014c6:	bf00      	nop
 80014c8:	200001e8 	.word	0x200001e8

080014cc <__sfputc_r>:
 80014cc:	6893      	ldr	r3, [r2, #8]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	b410      	push	{r4}
 80014d4:	6093      	str	r3, [r2, #8]
 80014d6:	da07      	bge.n	80014e8 <__sfputc_r+0x1c>
 80014d8:	6994      	ldr	r4, [r2, #24]
 80014da:	42a3      	cmp	r3, r4
 80014dc:	db01      	blt.n	80014e2 <__sfputc_r+0x16>
 80014de:	290a      	cmp	r1, #10
 80014e0:	d102      	bne.n	80014e8 <__sfputc_r+0x1c>
 80014e2:	bc10      	pop	{r4}
 80014e4:	f000 bb66 	b.w	8001bb4 <__swbuf_r>
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	1c58      	adds	r0, r3, #1
 80014ec:	6010      	str	r0, [r2, #0]
 80014ee:	7019      	strb	r1, [r3, #0]
 80014f0:	4608      	mov	r0, r1
 80014f2:	bc10      	pop	{r4}
 80014f4:	4770      	bx	lr

080014f6 <__sfputs_r>:
 80014f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f8:	4606      	mov	r6, r0
 80014fa:	460f      	mov	r7, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	18d5      	adds	r5, r2, r3
 8001500:	42ac      	cmp	r4, r5
 8001502:	d101      	bne.n	8001508 <__sfputs_r+0x12>
 8001504:	2000      	movs	r0, #0
 8001506:	e007      	b.n	8001518 <__sfputs_r+0x22>
 8001508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800150c:	463a      	mov	r2, r7
 800150e:	4630      	mov	r0, r6
 8001510:	f7ff ffdc 	bl	80014cc <__sfputc_r>
 8001514:	1c43      	adds	r3, r0, #1
 8001516:	d1f3      	bne.n	8001500 <__sfputs_r+0xa>
 8001518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800151c <_vfiprintf_r>:
 800151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001520:	460d      	mov	r5, r1
 8001522:	b09d      	sub	sp, #116	@ 0x74
 8001524:	4614      	mov	r4, r2
 8001526:	4698      	mov	r8, r3
 8001528:	4606      	mov	r6, r0
 800152a:	b118      	cbz	r0, 8001534 <_vfiprintf_r+0x18>
 800152c:	6a03      	ldr	r3, [r0, #32]
 800152e:	b90b      	cbnz	r3, 8001534 <_vfiprintf_r+0x18>
 8001530:	f7ff fdcc 	bl	80010cc <__sinit>
 8001534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001536:	07d9      	lsls	r1, r3, #31
 8001538:	d405      	bmi.n	8001546 <_vfiprintf_r+0x2a>
 800153a:	89ab      	ldrh	r3, [r5, #12]
 800153c:	059a      	lsls	r2, r3, #22
 800153e:	d402      	bmi.n	8001546 <_vfiprintf_r+0x2a>
 8001540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001542:	f7ff fec8 	bl	80012d6 <__retarget_lock_acquire_recursive>
 8001546:	89ab      	ldrh	r3, [r5, #12]
 8001548:	071b      	lsls	r3, r3, #28
 800154a:	d501      	bpl.n	8001550 <_vfiprintf_r+0x34>
 800154c:	692b      	ldr	r3, [r5, #16]
 800154e:	b99b      	cbnz	r3, 8001578 <_vfiprintf_r+0x5c>
 8001550:	4629      	mov	r1, r5
 8001552:	4630      	mov	r0, r6
 8001554:	f000 fb6c 	bl	8001c30 <__swsetup_r>
 8001558:	b170      	cbz	r0, 8001578 <_vfiprintf_r+0x5c>
 800155a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800155c:	07dc      	lsls	r4, r3, #31
 800155e:	d504      	bpl.n	800156a <_vfiprintf_r+0x4e>
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	b01d      	add	sp, #116	@ 0x74
 8001566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800156a:	89ab      	ldrh	r3, [r5, #12]
 800156c:	0598      	lsls	r0, r3, #22
 800156e:	d4f7      	bmi.n	8001560 <_vfiprintf_r+0x44>
 8001570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001572:	f7ff feb1 	bl	80012d8 <__retarget_lock_release_recursive>
 8001576:	e7f3      	b.n	8001560 <_vfiprintf_r+0x44>
 8001578:	2300      	movs	r3, #0
 800157a:	9309      	str	r3, [sp, #36]	@ 0x24
 800157c:	2320      	movs	r3, #32
 800157e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001582:	f8cd 800c 	str.w	r8, [sp, #12]
 8001586:	2330      	movs	r3, #48	@ 0x30
 8001588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001738 <_vfiprintf_r+0x21c>
 800158c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001590:	f04f 0901 	mov.w	r9, #1
 8001594:	4623      	mov	r3, r4
 8001596:	469a      	mov	sl, r3
 8001598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800159c:	b10a      	cbz	r2, 80015a2 <_vfiprintf_r+0x86>
 800159e:	2a25      	cmp	r2, #37	@ 0x25
 80015a0:	d1f9      	bne.n	8001596 <_vfiprintf_r+0x7a>
 80015a2:	ebba 0b04 	subs.w	fp, sl, r4
 80015a6:	d00b      	beq.n	80015c0 <_vfiprintf_r+0xa4>
 80015a8:	465b      	mov	r3, fp
 80015aa:	4622      	mov	r2, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	4630      	mov	r0, r6
 80015b0:	f7ff ffa1 	bl	80014f6 <__sfputs_r>
 80015b4:	3001      	adds	r0, #1
 80015b6:	f000 80a7 	beq.w	8001708 <_vfiprintf_r+0x1ec>
 80015ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015bc:	445a      	add	r2, fp
 80015be:	9209      	str	r2, [sp, #36]	@ 0x24
 80015c0:	f89a 3000 	ldrb.w	r3, [sl]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 809f 	beq.w	8001708 <_vfiprintf_r+0x1ec>
 80015ca:	2300      	movs	r3, #0
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015d4:	f10a 0a01 	add.w	sl, sl, #1
 80015d8:	9304      	str	r3, [sp, #16]
 80015da:	9307      	str	r3, [sp, #28]
 80015dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80015e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80015e2:	4654      	mov	r4, sl
 80015e4:	2205      	movs	r2, #5
 80015e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ea:	4853      	ldr	r0, [pc, #332]	@ (8001738 <_vfiprintf_r+0x21c>)
 80015ec:	f7fe fe10 	bl	8000210 <memchr>
 80015f0:	9a04      	ldr	r2, [sp, #16]
 80015f2:	b9d8      	cbnz	r0, 800162c <_vfiprintf_r+0x110>
 80015f4:	06d1      	lsls	r1, r2, #27
 80015f6:	bf44      	itt	mi
 80015f8:	2320      	movmi	r3, #32
 80015fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80015fe:	0713      	lsls	r3, r2, #28
 8001600:	bf44      	itt	mi
 8001602:	232b      	movmi	r3, #43	@ 0x2b
 8001604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001608:	f89a 3000 	ldrb.w	r3, [sl]
 800160c:	2b2a      	cmp	r3, #42	@ 0x2a
 800160e:	d015      	beq.n	800163c <_vfiprintf_r+0x120>
 8001610:	9a07      	ldr	r2, [sp, #28]
 8001612:	4654      	mov	r4, sl
 8001614:	2000      	movs	r0, #0
 8001616:	f04f 0c0a 	mov.w	ip, #10
 800161a:	4621      	mov	r1, r4
 800161c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001620:	3b30      	subs	r3, #48	@ 0x30
 8001622:	2b09      	cmp	r3, #9
 8001624:	d94b      	bls.n	80016be <_vfiprintf_r+0x1a2>
 8001626:	b1b0      	cbz	r0, 8001656 <_vfiprintf_r+0x13a>
 8001628:	9207      	str	r2, [sp, #28]
 800162a:	e014      	b.n	8001656 <_vfiprintf_r+0x13a>
 800162c:	eba0 0308 	sub.w	r3, r0, r8
 8001630:	fa09 f303 	lsl.w	r3, r9, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	9304      	str	r3, [sp, #16]
 8001638:	46a2      	mov	sl, r4
 800163a:	e7d2      	b.n	80015e2 <_vfiprintf_r+0xc6>
 800163c:	9b03      	ldr	r3, [sp, #12]
 800163e:	1d19      	adds	r1, r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	9103      	str	r1, [sp, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bfbb      	ittet	lt
 8001648:	425b      	neglt	r3, r3
 800164a:	f042 0202 	orrlt.w	r2, r2, #2
 800164e:	9307      	strge	r3, [sp, #28]
 8001650:	9307      	strlt	r3, [sp, #28]
 8001652:	bfb8      	it	lt
 8001654:	9204      	strlt	r2, [sp, #16]
 8001656:	7823      	ldrb	r3, [r4, #0]
 8001658:	2b2e      	cmp	r3, #46	@ 0x2e
 800165a:	d10a      	bne.n	8001672 <_vfiprintf_r+0x156>
 800165c:	7863      	ldrb	r3, [r4, #1]
 800165e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001660:	d132      	bne.n	80016c8 <_vfiprintf_r+0x1ac>
 8001662:	9b03      	ldr	r3, [sp, #12]
 8001664:	1d1a      	adds	r2, r3, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	9203      	str	r2, [sp, #12]
 800166a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800166e:	3402      	adds	r4, #2
 8001670:	9305      	str	r3, [sp, #20]
 8001672:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800173c <_vfiprintf_r+0x220>
 8001676:	7821      	ldrb	r1, [r4, #0]
 8001678:	2203      	movs	r2, #3
 800167a:	4650      	mov	r0, sl
 800167c:	f7fe fdc8 	bl	8000210 <memchr>
 8001680:	b138      	cbz	r0, 8001692 <_vfiprintf_r+0x176>
 8001682:	9b04      	ldr	r3, [sp, #16]
 8001684:	eba0 000a 	sub.w	r0, r0, sl
 8001688:	2240      	movs	r2, #64	@ 0x40
 800168a:	4082      	lsls	r2, r0
 800168c:	4313      	orrs	r3, r2
 800168e:	3401      	adds	r4, #1
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001696:	482a      	ldr	r0, [pc, #168]	@ (8001740 <_vfiprintf_r+0x224>)
 8001698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800169c:	2206      	movs	r2, #6
 800169e:	f7fe fdb7 	bl	8000210 <memchr>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d03f      	beq.n	8001726 <_vfiprintf_r+0x20a>
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <_vfiprintf_r+0x228>)
 80016a8:	bb1b      	cbnz	r3, 80016f2 <_vfiprintf_r+0x1d6>
 80016aa:	9b03      	ldr	r3, [sp, #12]
 80016ac:	3307      	adds	r3, #7
 80016ae:	f023 0307 	bic.w	r3, r3, #7
 80016b2:	3308      	adds	r3, #8
 80016b4:	9303      	str	r3, [sp, #12]
 80016b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016b8:	443b      	add	r3, r7
 80016ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80016bc:	e76a      	b.n	8001594 <_vfiprintf_r+0x78>
 80016be:	fb0c 3202 	mla	r2, ip, r2, r3
 80016c2:	460c      	mov	r4, r1
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7a8      	b.n	800161a <_vfiprintf_r+0xfe>
 80016c8:	2300      	movs	r3, #0
 80016ca:	3401      	adds	r4, #1
 80016cc:	9305      	str	r3, [sp, #20]
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 0c0a 	mov.w	ip, #10
 80016d4:	4620      	mov	r0, r4
 80016d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016da:	3a30      	subs	r2, #48	@ 0x30
 80016dc:	2a09      	cmp	r2, #9
 80016de:	d903      	bls.n	80016e8 <_vfiprintf_r+0x1cc>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0c6      	beq.n	8001672 <_vfiprintf_r+0x156>
 80016e4:	9105      	str	r1, [sp, #20]
 80016e6:	e7c4      	b.n	8001672 <_vfiprintf_r+0x156>
 80016e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80016ec:	4604      	mov	r4, r0
 80016ee:	2301      	movs	r3, #1
 80016f0:	e7f0      	b.n	80016d4 <_vfiprintf_r+0x1b8>
 80016f2:	ab03      	add	r3, sp, #12
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	462a      	mov	r2, r5
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_vfiprintf_r+0x22c>)
 80016fa:	a904      	add	r1, sp, #16
 80016fc:	4630      	mov	r0, r6
 80016fe:	f3af 8000 	nop.w
 8001702:	4607      	mov	r7, r0
 8001704:	1c78      	adds	r0, r7, #1
 8001706:	d1d6      	bne.n	80016b6 <_vfiprintf_r+0x19a>
 8001708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800170a:	07d9      	lsls	r1, r3, #31
 800170c:	d405      	bmi.n	800171a <_vfiprintf_r+0x1fe>
 800170e:	89ab      	ldrh	r3, [r5, #12]
 8001710:	059a      	lsls	r2, r3, #22
 8001712:	d402      	bmi.n	800171a <_vfiprintf_r+0x1fe>
 8001714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001716:	f7ff fddf 	bl	80012d8 <__retarget_lock_release_recursive>
 800171a:	89ab      	ldrh	r3, [r5, #12]
 800171c:	065b      	lsls	r3, r3, #25
 800171e:	f53f af1f 	bmi.w	8001560 <_vfiprintf_r+0x44>
 8001722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001724:	e71e      	b.n	8001564 <_vfiprintf_r+0x48>
 8001726:	ab03      	add	r3, sp, #12
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	462a      	mov	r2, r5
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <_vfiprintf_r+0x22c>)
 800172e:	a904      	add	r1, sp, #16
 8001730:	4630      	mov	r0, r6
 8001732:	f000 f879 	bl	8001828 <_printf_i>
 8001736:	e7e4      	b.n	8001702 <_vfiprintf_r+0x1e6>
 8001738:	08001e3a 	.word	0x08001e3a
 800173c:	08001e40 	.word	0x08001e40
 8001740:	08001e44 	.word	0x08001e44
 8001744:	00000000 	.word	0x00000000
 8001748:	080014f7 	.word	0x080014f7

0800174c <_printf_common>:
 800174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001750:	4616      	mov	r6, r2
 8001752:	4698      	mov	r8, r3
 8001754:	688a      	ldr	r2, [r1, #8]
 8001756:	690b      	ldr	r3, [r1, #16]
 8001758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800175c:	4293      	cmp	r3, r2
 800175e:	bfb8      	it	lt
 8001760:	4613      	movlt	r3, r2
 8001762:	6033      	str	r3, [r6, #0]
 8001764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001768:	4607      	mov	r7, r0
 800176a:	460c      	mov	r4, r1
 800176c:	b10a      	cbz	r2, 8001772 <_printf_common+0x26>
 800176e:	3301      	adds	r3, #1
 8001770:	6033      	str	r3, [r6, #0]
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	0699      	lsls	r1, r3, #26
 8001776:	bf42      	ittt	mi
 8001778:	6833      	ldrmi	r3, [r6, #0]
 800177a:	3302      	addmi	r3, #2
 800177c:	6033      	strmi	r3, [r6, #0]
 800177e:	6825      	ldr	r5, [r4, #0]
 8001780:	f015 0506 	ands.w	r5, r5, #6
 8001784:	d106      	bne.n	8001794 <_printf_common+0x48>
 8001786:	f104 0a19 	add.w	sl, r4, #25
 800178a:	68e3      	ldr	r3, [r4, #12]
 800178c:	6832      	ldr	r2, [r6, #0]
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	42ab      	cmp	r3, r5
 8001792:	dc26      	bgt.n	80017e2 <_printf_common+0x96>
 8001794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	3b00      	subs	r3, #0
 800179c:	bf18      	it	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	0692      	lsls	r2, r2, #26
 80017a2:	d42b      	bmi.n	80017fc <_printf_common+0xb0>
 80017a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017a8:	4641      	mov	r1, r8
 80017aa:	4638      	mov	r0, r7
 80017ac:	47c8      	blx	r9
 80017ae:	3001      	adds	r0, #1
 80017b0:	d01e      	beq.n	80017f0 <_printf_common+0xa4>
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	6922      	ldr	r2, [r4, #16]
 80017b6:	f003 0306 	and.w	r3, r3, #6
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf02      	ittt	eq
 80017be:	68e5      	ldreq	r5, [r4, #12]
 80017c0:	6833      	ldreq	r3, [r6, #0]
 80017c2:	1aed      	subeq	r5, r5, r3
 80017c4:	68a3      	ldr	r3, [r4, #8]
 80017c6:	bf0c      	ite	eq
 80017c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017cc:	2500      	movne	r5, #0
 80017ce:	4293      	cmp	r3, r2
 80017d0:	bfc4      	itt	gt
 80017d2:	1a9b      	subgt	r3, r3, r2
 80017d4:	18ed      	addgt	r5, r5, r3
 80017d6:	2600      	movs	r6, #0
 80017d8:	341a      	adds	r4, #26
 80017da:	42b5      	cmp	r5, r6
 80017dc:	d11a      	bne.n	8001814 <_printf_common+0xc8>
 80017de:	2000      	movs	r0, #0
 80017e0:	e008      	b.n	80017f4 <_printf_common+0xa8>
 80017e2:	2301      	movs	r3, #1
 80017e4:	4652      	mov	r2, sl
 80017e6:	4641      	mov	r1, r8
 80017e8:	4638      	mov	r0, r7
 80017ea:	47c8      	blx	r9
 80017ec:	3001      	adds	r0, #1
 80017ee:	d103      	bne.n	80017f8 <_printf_common+0xac>
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f8:	3501      	adds	r5, #1
 80017fa:	e7c6      	b.n	800178a <_printf_common+0x3e>
 80017fc:	18e1      	adds	r1, r4, r3
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	2030      	movs	r0, #48	@ 0x30
 8001802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001806:	4422      	add	r2, r4
 8001808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800180c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001810:	3302      	adds	r3, #2
 8001812:	e7c7      	b.n	80017a4 <_printf_common+0x58>
 8001814:	2301      	movs	r3, #1
 8001816:	4622      	mov	r2, r4
 8001818:	4641      	mov	r1, r8
 800181a:	4638      	mov	r0, r7
 800181c:	47c8      	blx	r9
 800181e:	3001      	adds	r0, #1
 8001820:	d0e6      	beq.n	80017f0 <_printf_common+0xa4>
 8001822:	3601      	adds	r6, #1
 8001824:	e7d9      	b.n	80017da <_printf_common+0x8e>
	...

08001828 <_printf_i>:
 8001828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800182c:	7e0f      	ldrb	r7, [r1, #24]
 800182e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001830:	2f78      	cmp	r7, #120	@ 0x78
 8001832:	4691      	mov	r9, r2
 8001834:	4680      	mov	r8, r0
 8001836:	460c      	mov	r4, r1
 8001838:	469a      	mov	sl, r3
 800183a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800183e:	d807      	bhi.n	8001850 <_printf_i+0x28>
 8001840:	2f62      	cmp	r7, #98	@ 0x62
 8001842:	d80a      	bhi.n	800185a <_printf_i+0x32>
 8001844:	2f00      	cmp	r7, #0
 8001846:	f000 80d1 	beq.w	80019ec <_printf_i+0x1c4>
 800184a:	2f58      	cmp	r7, #88	@ 0x58
 800184c:	f000 80b8 	beq.w	80019c0 <_printf_i+0x198>
 8001850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001858:	e03a      	b.n	80018d0 <_printf_i+0xa8>
 800185a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800185e:	2b15      	cmp	r3, #21
 8001860:	d8f6      	bhi.n	8001850 <_printf_i+0x28>
 8001862:	a101      	add	r1, pc, #4	@ (adr r1, 8001868 <_printf_i+0x40>)
 8001864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001868:	080018c1 	.word	0x080018c1
 800186c:	080018d5 	.word	0x080018d5
 8001870:	08001851 	.word	0x08001851
 8001874:	08001851 	.word	0x08001851
 8001878:	08001851 	.word	0x08001851
 800187c:	08001851 	.word	0x08001851
 8001880:	080018d5 	.word	0x080018d5
 8001884:	08001851 	.word	0x08001851
 8001888:	08001851 	.word	0x08001851
 800188c:	08001851 	.word	0x08001851
 8001890:	08001851 	.word	0x08001851
 8001894:	080019d3 	.word	0x080019d3
 8001898:	080018ff 	.word	0x080018ff
 800189c:	0800198d 	.word	0x0800198d
 80018a0:	08001851 	.word	0x08001851
 80018a4:	08001851 	.word	0x08001851
 80018a8:	080019f5 	.word	0x080019f5
 80018ac:	08001851 	.word	0x08001851
 80018b0:	080018ff 	.word	0x080018ff
 80018b4:	08001851 	.word	0x08001851
 80018b8:	08001851 	.word	0x08001851
 80018bc:	08001995 	.word	0x08001995
 80018c0:	6833      	ldr	r3, [r6, #0]
 80018c2:	1d1a      	adds	r2, r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6032      	str	r2, [r6, #0]
 80018c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018d0:	2301      	movs	r3, #1
 80018d2:	e09c      	b.n	8001a0e <_printf_i+0x1e6>
 80018d4:	6833      	ldr	r3, [r6, #0]
 80018d6:	6820      	ldr	r0, [r4, #0]
 80018d8:	1d19      	adds	r1, r3, #4
 80018da:	6031      	str	r1, [r6, #0]
 80018dc:	0606      	lsls	r6, r0, #24
 80018de:	d501      	bpl.n	80018e4 <_printf_i+0xbc>
 80018e0:	681d      	ldr	r5, [r3, #0]
 80018e2:	e003      	b.n	80018ec <_printf_i+0xc4>
 80018e4:	0645      	lsls	r5, r0, #25
 80018e6:	d5fb      	bpl.n	80018e0 <_printf_i+0xb8>
 80018e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80018ec:	2d00      	cmp	r5, #0
 80018ee:	da03      	bge.n	80018f8 <_printf_i+0xd0>
 80018f0:	232d      	movs	r3, #45	@ 0x2d
 80018f2:	426d      	negs	r5, r5
 80018f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018f8:	4858      	ldr	r0, [pc, #352]	@ (8001a5c <_printf_i+0x234>)
 80018fa:	230a      	movs	r3, #10
 80018fc:	e011      	b.n	8001922 <_printf_i+0xfa>
 80018fe:	6821      	ldr	r1, [r4, #0]
 8001900:	6833      	ldr	r3, [r6, #0]
 8001902:	0608      	lsls	r0, r1, #24
 8001904:	f853 5b04 	ldr.w	r5, [r3], #4
 8001908:	d402      	bmi.n	8001910 <_printf_i+0xe8>
 800190a:	0649      	lsls	r1, r1, #25
 800190c:	bf48      	it	mi
 800190e:	b2ad      	uxthmi	r5, r5
 8001910:	2f6f      	cmp	r7, #111	@ 0x6f
 8001912:	4852      	ldr	r0, [pc, #328]	@ (8001a5c <_printf_i+0x234>)
 8001914:	6033      	str	r3, [r6, #0]
 8001916:	bf14      	ite	ne
 8001918:	230a      	movne	r3, #10
 800191a:	2308      	moveq	r3, #8
 800191c:	2100      	movs	r1, #0
 800191e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001922:	6866      	ldr	r6, [r4, #4]
 8001924:	60a6      	str	r6, [r4, #8]
 8001926:	2e00      	cmp	r6, #0
 8001928:	db05      	blt.n	8001936 <_printf_i+0x10e>
 800192a:	6821      	ldr	r1, [r4, #0]
 800192c:	432e      	orrs	r6, r5
 800192e:	f021 0104 	bic.w	r1, r1, #4
 8001932:	6021      	str	r1, [r4, #0]
 8001934:	d04b      	beq.n	80019ce <_printf_i+0x1a6>
 8001936:	4616      	mov	r6, r2
 8001938:	fbb5 f1f3 	udiv	r1, r5, r3
 800193c:	fb03 5711 	mls	r7, r3, r1, r5
 8001940:	5dc7      	ldrb	r7, [r0, r7]
 8001942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001946:	462f      	mov	r7, r5
 8001948:	42bb      	cmp	r3, r7
 800194a:	460d      	mov	r5, r1
 800194c:	d9f4      	bls.n	8001938 <_printf_i+0x110>
 800194e:	2b08      	cmp	r3, #8
 8001950:	d10b      	bne.n	800196a <_printf_i+0x142>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	07df      	lsls	r7, r3, #31
 8001956:	d508      	bpl.n	800196a <_printf_i+0x142>
 8001958:	6923      	ldr	r3, [r4, #16]
 800195a:	6861      	ldr	r1, [r4, #4]
 800195c:	4299      	cmp	r1, r3
 800195e:	bfde      	ittt	le
 8001960:	2330      	movle	r3, #48	@ 0x30
 8001962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800196a:	1b92      	subs	r2, r2, r6
 800196c:	6122      	str	r2, [r4, #16]
 800196e:	f8cd a000 	str.w	sl, [sp]
 8001972:	464b      	mov	r3, r9
 8001974:	aa03      	add	r2, sp, #12
 8001976:	4621      	mov	r1, r4
 8001978:	4640      	mov	r0, r8
 800197a:	f7ff fee7 	bl	800174c <_printf_common>
 800197e:	3001      	adds	r0, #1
 8001980:	d14a      	bne.n	8001a18 <_printf_i+0x1f0>
 8001982:	f04f 30ff 	mov.w	r0, #4294967295
 8001986:	b004      	add	sp, #16
 8001988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	6023      	str	r3, [r4, #0]
 8001994:	4832      	ldr	r0, [pc, #200]	@ (8001a60 <_printf_i+0x238>)
 8001996:	2778      	movs	r7, #120	@ 0x78
 8001998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	6831      	ldr	r1, [r6, #0]
 80019a0:	061f      	lsls	r7, r3, #24
 80019a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80019a6:	d402      	bmi.n	80019ae <_printf_i+0x186>
 80019a8:	065f      	lsls	r7, r3, #25
 80019aa:	bf48      	it	mi
 80019ac:	b2ad      	uxthmi	r5, r5
 80019ae:	6031      	str	r1, [r6, #0]
 80019b0:	07d9      	lsls	r1, r3, #31
 80019b2:	bf44      	itt	mi
 80019b4:	f043 0320 	orrmi.w	r3, r3, #32
 80019b8:	6023      	strmi	r3, [r4, #0]
 80019ba:	b11d      	cbz	r5, 80019c4 <_printf_i+0x19c>
 80019bc:	2310      	movs	r3, #16
 80019be:	e7ad      	b.n	800191c <_printf_i+0xf4>
 80019c0:	4826      	ldr	r0, [pc, #152]	@ (8001a5c <_printf_i+0x234>)
 80019c2:	e7e9      	b.n	8001998 <_printf_i+0x170>
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f023 0320 	bic.w	r3, r3, #32
 80019ca:	6023      	str	r3, [r4, #0]
 80019cc:	e7f6      	b.n	80019bc <_printf_i+0x194>
 80019ce:	4616      	mov	r6, r2
 80019d0:	e7bd      	b.n	800194e <_printf_i+0x126>
 80019d2:	6833      	ldr	r3, [r6, #0]
 80019d4:	6825      	ldr	r5, [r4, #0]
 80019d6:	6961      	ldr	r1, [r4, #20]
 80019d8:	1d18      	adds	r0, r3, #4
 80019da:	6030      	str	r0, [r6, #0]
 80019dc:	062e      	lsls	r6, r5, #24
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	d501      	bpl.n	80019e6 <_printf_i+0x1be>
 80019e2:	6019      	str	r1, [r3, #0]
 80019e4:	e002      	b.n	80019ec <_printf_i+0x1c4>
 80019e6:	0668      	lsls	r0, r5, #25
 80019e8:	d5fb      	bpl.n	80019e2 <_printf_i+0x1ba>
 80019ea:	8019      	strh	r1, [r3, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	6123      	str	r3, [r4, #16]
 80019f0:	4616      	mov	r6, r2
 80019f2:	e7bc      	b.n	800196e <_printf_i+0x146>
 80019f4:	6833      	ldr	r3, [r6, #0]
 80019f6:	1d1a      	adds	r2, r3, #4
 80019f8:	6032      	str	r2, [r6, #0]
 80019fa:	681e      	ldr	r6, [r3, #0]
 80019fc:	6862      	ldr	r2, [r4, #4]
 80019fe:	2100      	movs	r1, #0
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7fe fc05 	bl	8000210 <memchr>
 8001a06:	b108      	cbz	r0, 8001a0c <_printf_i+0x1e4>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	6060      	str	r0, [r4, #4]
 8001a0c:	6863      	ldr	r3, [r4, #4]
 8001a0e:	6123      	str	r3, [r4, #16]
 8001a10:	2300      	movs	r3, #0
 8001a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a16:	e7aa      	b.n	800196e <_printf_i+0x146>
 8001a18:	6923      	ldr	r3, [r4, #16]
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	4640      	mov	r0, r8
 8001a20:	47d0      	blx	sl
 8001a22:	3001      	adds	r0, #1
 8001a24:	d0ad      	beq.n	8001982 <_printf_i+0x15a>
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	079b      	lsls	r3, r3, #30
 8001a2a:	d413      	bmi.n	8001a54 <_printf_i+0x22c>
 8001a2c:	68e0      	ldr	r0, [r4, #12]
 8001a2e:	9b03      	ldr	r3, [sp, #12]
 8001a30:	4298      	cmp	r0, r3
 8001a32:	bfb8      	it	lt
 8001a34:	4618      	movlt	r0, r3
 8001a36:	e7a6      	b.n	8001986 <_printf_i+0x15e>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	4640      	mov	r0, r8
 8001a40:	47d0      	blx	sl
 8001a42:	3001      	adds	r0, #1
 8001a44:	d09d      	beq.n	8001982 <_printf_i+0x15a>
 8001a46:	3501      	adds	r5, #1
 8001a48:	68e3      	ldr	r3, [r4, #12]
 8001a4a:	9903      	ldr	r1, [sp, #12]
 8001a4c:	1a5b      	subs	r3, r3, r1
 8001a4e:	42ab      	cmp	r3, r5
 8001a50:	dcf2      	bgt.n	8001a38 <_printf_i+0x210>
 8001a52:	e7eb      	b.n	8001a2c <_printf_i+0x204>
 8001a54:	2500      	movs	r5, #0
 8001a56:	f104 0619 	add.w	r6, r4, #25
 8001a5a:	e7f5      	b.n	8001a48 <_printf_i+0x220>
 8001a5c:	08001e4b 	.word	0x08001e4b
 8001a60:	08001e5c 	.word	0x08001e5c

08001a64 <__sflush_r>:
 8001a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6a:	0716      	lsls	r6, r2, #28
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	d454      	bmi.n	8001b1c <__sflush_r+0xb8>
 8001a72:	684b      	ldr	r3, [r1, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dc02      	bgt.n	8001a7e <__sflush_r+0x1a>
 8001a78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dd48      	ble.n	8001b10 <__sflush_r+0xac>
 8001a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001a80:	2e00      	cmp	r6, #0
 8001a82:	d045      	beq.n	8001b10 <__sflush_r+0xac>
 8001a84:	2300      	movs	r3, #0
 8001a86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001a8a:	682f      	ldr	r7, [r5, #0]
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	d030      	beq.n	8001af4 <__sflush_r+0x90>
 8001a92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	0759      	lsls	r1, r3, #29
 8001a98:	d505      	bpl.n	8001aa6 <__sflush_r+0x42>
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	1ad2      	subs	r2, r2, r3
 8001a9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001aa0:	b10b      	cbz	r3, 8001aa6 <__sflush_r+0x42>
 8001aa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001aaa:	6a21      	ldr	r1, [r4, #32]
 8001aac:	4628      	mov	r0, r5
 8001aae:	47b0      	blx	r6
 8001ab0:	1c43      	adds	r3, r0, #1
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	d106      	bne.n	8001ac4 <__sflush_r+0x60>
 8001ab6:	6829      	ldr	r1, [r5, #0]
 8001ab8:	291d      	cmp	r1, #29
 8001aba:	d82b      	bhi.n	8001b14 <__sflush_r+0xb0>
 8001abc:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <__sflush_r+0xfc>)
 8001abe:	40ca      	lsrs	r2, r1
 8001ac0:	07d6      	lsls	r6, r2, #31
 8001ac2:	d527      	bpl.n	8001b14 <__sflush_r+0xb0>
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6062      	str	r2, [r4, #4]
 8001ac8:	04d9      	lsls	r1, r3, #19
 8001aca:	6922      	ldr	r2, [r4, #16]
 8001acc:	6022      	str	r2, [r4, #0]
 8001ace:	d504      	bpl.n	8001ada <__sflush_r+0x76>
 8001ad0:	1c42      	adds	r2, r0, #1
 8001ad2:	d101      	bne.n	8001ad8 <__sflush_r+0x74>
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	b903      	cbnz	r3, 8001ada <__sflush_r+0x76>
 8001ad8:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ada:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001adc:	602f      	str	r7, [r5, #0]
 8001ade:	b1b9      	cbz	r1, 8001b10 <__sflush_r+0xac>
 8001ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ae4:	4299      	cmp	r1, r3
 8001ae6:	d002      	beq.n	8001aee <__sflush_r+0x8a>
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f7ff fbf7 	bl	80012dc <_free_r>
 8001aee:	2300      	movs	r3, #0
 8001af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001af2:	e00d      	b.n	8001b10 <__sflush_r+0xac>
 8001af4:	2301      	movs	r3, #1
 8001af6:	4628      	mov	r0, r5
 8001af8:	47b0      	blx	r6
 8001afa:	4602      	mov	r2, r0
 8001afc:	1c50      	adds	r0, r2, #1
 8001afe:	d1c9      	bne.n	8001a94 <__sflush_r+0x30>
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0c6      	beq.n	8001a94 <__sflush_r+0x30>
 8001b06:	2b1d      	cmp	r3, #29
 8001b08:	d001      	beq.n	8001b0e <__sflush_r+0xaa>
 8001b0a:	2b16      	cmp	r3, #22
 8001b0c:	d11d      	bne.n	8001b4a <__sflush_r+0xe6>
 8001b0e:	602f      	str	r7, [r5, #0]
 8001b10:	2000      	movs	r0, #0
 8001b12:	e021      	b.n	8001b58 <__sflush_r+0xf4>
 8001b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	e01a      	b.n	8001b52 <__sflush_r+0xee>
 8001b1c:	690f      	ldr	r7, [r1, #16]
 8001b1e:	2f00      	cmp	r7, #0
 8001b20:	d0f6      	beq.n	8001b10 <__sflush_r+0xac>
 8001b22:	0793      	lsls	r3, r2, #30
 8001b24:	680e      	ldr	r6, [r1, #0]
 8001b26:	bf08      	it	eq
 8001b28:	694b      	ldreq	r3, [r1, #20]
 8001b2a:	600f      	str	r7, [r1, #0]
 8001b2c:	bf18      	it	ne
 8001b2e:	2300      	movne	r3, #0
 8001b30:	1bf6      	subs	r6, r6, r7
 8001b32:	608b      	str	r3, [r1, #8]
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	ddeb      	ble.n	8001b10 <__sflush_r+0xac>
 8001b38:	6a21      	ldr	r1, [r4, #32]
 8001b3a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001b3e:	4633      	mov	r3, r6
 8001b40:	463a      	mov	r2, r7
 8001b42:	4628      	mov	r0, r5
 8001b44:	47e0      	blx	ip
 8001b46:	2800      	cmp	r0, #0
 8001b48:	dc07      	bgt.n	8001b5a <__sflush_r+0xf6>
 8001b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b52:	81a3      	strh	r3, [r4, #12]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b5a:	4407      	add	r7, r0
 8001b5c:	1a36      	subs	r6, r6, r0
 8001b5e:	e7e9      	b.n	8001b34 <__sflush_r+0xd0>
 8001b60:	20400001 	.word	0x20400001

08001b64 <_fflush_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	690b      	ldr	r3, [r1, #16]
 8001b68:	4605      	mov	r5, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	b913      	cbnz	r3, 8001b74 <_fflush_r+0x10>
 8001b6e:	2500      	movs	r5, #0
 8001b70:	4628      	mov	r0, r5
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	b118      	cbz	r0, 8001b7e <_fflush_r+0x1a>
 8001b76:	6a03      	ldr	r3, [r0, #32]
 8001b78:	b90b      	cbnz	r3, 8001b7e <_fflush_r+0x1a>
 8001b7a:	f7ff faa7 	bl	80010cc <__sinit>
 8001b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f3      	beq.n	8001b6e <_fflush_r+0xa>
 8001b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001b88:	07d0      	lsls	r0, r2, #31
 8001b8a:	d404      	bmi.n	8001b96 <_fflush_r+0x32>
 8001b8c:	0599      	lsls	r1, r3, #22
 8001b8e:	d402      	bmi.n	8001b96 <_fflush_r+0x32>
 8001b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b92:	f7ff fba0 	bl	80012d6 <__retarget_lock_acquire_recursive>
 8001b96:	4628      	mov	r0, r5
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f7ff ff63 	bl	8001a64 <__sflush_r>
 8001b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ba0:	07da      	lsls	r2, r3, #31
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	d4e4      	bmi.n	8001b70 <_fflush_r+0xc>
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	059b      	lsls	r3, r3, #22
 8001baa:	d4e1      	bmi.n	8001b70 <_fflush_r+0xc>
 8001bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bae:	f7ff fb93 	bl	80012d8 <__retarget_lock_release_recursive>
 8001bb2:	e7dd      	b.n	8001b70 <_fflush_r+0xc>

08001bb4 <__swbuf_r>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	4605      	mov	r5, r0
 8001bbc:	b118      	cbz	r0, 8001bc6 <__swbuf_r+0x12>
 8001bbe:	6a03      	ldr	r3, [r0, #32]
 8001bc0:	b90b      	cbnz	r3, 8001bc6 <__swbuf_r+0x12>
 8001bc2:	f7ff fa83 	bl	80010cc <__sinit>
 8001bc6:	69a3      	ldr	r3, [r4, #24]
 8001bc8:	60a3      	str	r3, [r4, #8]
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	071a      	lsls	r2, r3, #28
 8001bce:	d501      	bpl.n	8001bd4 <__swbuf_r+0x20>
 8001bd0:	6923      	ldr	r3, [r4, #16]
 8001bd2:	b943      	cbnz	r3, 8001be6 <__swbuf_r+0x32>
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f000 f82a 	bl	8001c30 <__swsetup_r>
 8001bdc:	b118      	cbz	r0, 8001be6 <__swbuf_r+0x32>
 8001bde:	f04f 37ff 	mov.w	r7, #4294967295
 8001be2:	4638      	mov	r0, r7
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	6922      	ldr	r2, [r4, #16]
 8001bea:	1a98      	subs	r0, r3, r2
 8001bec:	6963      	ldr	r3, [r4, #20]
 8001bee:	b2f6      	uxtb	r6, r6
 8001bf0:	4283      	cmp	r3, r0
 8001bf2:	4637      	mov	r7, r6
 8001bf4:	dc05      	bgt.n	8001c02 <__swbuf_r+0x4e>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f7ff ffb3 	bl	8001b64 <_fflush_r>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1ed      	bne.n	8001bde <__swbuf_r+0x2a>
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60a3      	str	r3, [r4, #8]
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	6022      	str	r2, [r4, #0]
 8001c0e:	701e      	strb	r6, [r3, #0]
 8001c10:	6962      	ldr	r2, [r4, #20]
 8001c12:	1c43      	adds	r3, r0, #1
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d004      	beq.n	8001c22 <__swbuf_r+0x6e>
 8001c18:	89a3      	ldrh	r3, [r4, #12]
 8001c1a:	07db      	lsls	r3, r3, #31
 8001c1c:	d5e1      	bpl.n	8001be2 <__swbuf_r+0x2e>
 8001c1e:	2e0a      	cmp	r6, #10
 8001c20:	d1df      	bne.n	8001be2 <__swbuf_r+0x2e>
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff ff9d 	bl	8001b64 <_fflush_r>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d0d9      	beq.n	8001be2 <__swbuf_r+0x2e>
 8001c2e:	e7d6      	b.n	8001bde <__swbuf_r+0x2a>

08001c30 <__swsetup_r>:
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <__swsetup_r+0xa8>)
 8001c34:	4605      	mov	r5, r0
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	460c      	mov	r4, r1
 8001c3a:	b118      	cbz	r0, 8001c44 <__swsetup_r+0x14>
 8001c3c:	6a03      	ldr	r3, [r0, #32]
 8001c3e:	b90b      	cbnz	r3, 8001c44 <__swsetup_r+0x14>
 8001c40:	f7ff fa44 	bl	80010cc <__sinit>
 8001c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c48:	0719      	lsls	r1, r3, #28
 8001c4a:	d422      	bmi.n	8001c92 <__swsetup_r+0x62>
 8001c4c:	06da      	lsls	r2, r3, #27
 8001c4e:	d407      	bmi.n	8001c60 <__swsetup_r+0x30>
 8001c50:	2209      	movs	r2, #9
 8001c52:	602a      	str	r2, [r5, #0]
 8001c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c58:	81a3      	strh	r3, [r4, #12]
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5e:	e033      	b.n	8001cc8 <__swsetup_r+0x98>
 8001c60:	0758      	lsls	r0, r3, #29
 8001c62:	d512      	bpl.n	8001c8a <__swsetup_r+0x5a>
 8001c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c66:	b141      	cbz	r1, 8001c7a <__swsetup_r+0x4a>
 8001c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001c6c:	4299      	cmp	r1, r3
 8001c6e:	d002      	beq.n	8001c76 <__swsetup_r+0x46>
 8001c70:	4628      	mov	r0, r5
 8001c72:	f7ff fb33 	bl	80012dc <_free_r>
 8001c76:	2300      	movs	r3, #0
 8001c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	6063      	str	r3, [r4, #4]
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	b94b      	cbnz	r3, 8001caa <__swsetup_r+0x7a>
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca0:	d003      	beq.n	8001caa <__swsetup_r+0x7a>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 f84f 	bl	8001d48 <__smakebuf_r>
 8001caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cae:	f013 0201 	ands.w	r2, r3, #1
 8001cb2:	d00a      	beq.n	8001cca <__swsetup_r+0x9a>
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60a2      	str	r2, [r4, #8]
 8001cb8:	6962      	ldr	r2, [r4, #20]
 8001cba:	4252      	negs	r2, r2
 8001cbc:	61a2      	str	r2, [r4, #24]
 8001cbe:	6922      	ldr	r2, [r4, #16]
 8001cc0:	b942      	cbnz	r2, 8001cd4 <__swsetup_r+0xa4>
 8001cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001cc6:	d1c5      	bne.n	8001c54 <__swsetup_r+0x24>
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
 8001cca:	0799      	lsls	r1, r3, #30
 8001ccc:	bf58      	it	pl
 8001cce:	6962      	ldrpl	r2, [r4, #20]
 8001cd0:	60a2      	str	r2, [r4, #8]
 8001cd2:	e7f4      	b.n	8001cbe <__swsetup_r+0x8e>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e7f7      	b.n	8001cc8 <__swsetup_r+0x98>
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <_sbrk_r>:
 8001cdc:	b538      	push	{r3, r4, r5, lr}
 8001cde:	4d06      	ldr	r5, [pc, #24]	@ (8001cf8 <_sbrk_r+0x1c>)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	602b      	str	r3, [r5, #0]
 8001ce8:	f7fe fc00 	bl	80004ec <_sbrk>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d102      	bne.n	8001cf6 <_sbrk_r+0x1a>
 8001cf0:	682b      	ldr	r3, [r5, #0]
 8001cf2:	b103      	cbz	r3, 8001cf6 <_sbrk_r+0x1a>
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 8001cf8:	200001e4 	.word	0x200001e4

08001cfc <__swhatbuf_r>:
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	460c      	mov	r4, r1
 8001d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d04:	2900      	cmp	r1, #0
 8001d06:	b096      	sub	sp, #88	@ 0x58
 8001d08:	4615      	mov	r5, r2
 8001d0a:	461e      	mov	r6, r3
 8001d0c:	da0d      	bge.n	8001d2a <__swhatbuf_r+0x2e>
 8001d0e:	89a3      	ldrh	r3, [r4, #12]
 8001d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2340      	movne	r3, #64	@ 0x40
 8001d1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001d20:	2000      	movs	r0, #0
 8001d22:	6031      	str	r1, [r6, #0]
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	b016      	add	sp, #88	@ 0x58
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	466a      	mov	r2, sp
 8001d2c:	f000 f848 	bl	8001dc0 <_fstat_r>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dbec      	blt.n	8001d0e <__swhatbuf_r+0x12>
 8001d34:	9901      	ldr	r1, [sp, #4]
 8001d36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001d3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001d3e:	4259      	negs	r1, r3
 8001d40:	4159      	adcs	r1, r3
 8001d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d46:	e7eb      	b.n	8001d20 <__swhatbuf_r+0x24>

08001d48 <__smakebuf_r>:
 8001d48:	898b      	ldrh	r3, [r1, #12]
 8001d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d4c:	079d      	lsls	r5, r3, #30
 8001d4e:	4606      	mov	r6, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	d507      	bpl.n	8001d64 <__smakebuf_r+0x1c>
 8001d54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	6163      	str	r3, [r4, #20]
 8001d60:	b003      	add	sp, #12
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d64:	ab01      	add	r3, sp, #4
 8001d66:	466a      	mov	r2, sp
 8001d68:	f7ff ffc8 	bl	8001cfc <__swhatbuf_r>
 8001d6c:	9f00      	ldr	r7, [sp, #0]
 8001d6e:	4605      	mov	r5, r0
 8001d70:	4639      	mov	r1, r7
 8001d72:	4630      	mov	r0, r6
 8001d74:	f7ff fb1e 	bl	80013b4 <_malloc_r>
 8001d78:	b948      	cbnz	r0, 8001d8e <__smakebuf_r+0x46>
 8001d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7e:	059a      	lsls	r2, r3, #22
 8001d80:	d4ee      	bmi.n	8001d60 <__smakebuf_r+0x18>
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	81a3      	strh	r3, [r4, #12]
 8001d8c:	e7e2      	b.n	8001d54 <__smakebuf_r+0xc>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	6020      	str	r0, [r4, #0]
 8001d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d96:	81a3      	strh	r3, [r4, #12]
 8001d98:	9b01      	ldr	r3, [sp, #4]
 8001d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001d9e:	b15b      	cbz	r3, 8001db8 <__smakebuf_r+0x70>
 8001da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001da4:	4630      	mov	r0, r6
 8001da6:	f000 f81d 	bl	8001de4 <_isatty_r>
 8001daa:	b128      	cbz	r0, 8001db8 <__smakebuf_r+0x70>
 8001dac:	89a3      	ldrh	r3, [r4, #12]
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	81a3      	strh	r3, [r4, #12]
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	431d      	orrs	r5, r3
 8001dbc:	81a5      	strh	r5, [r4, #12]
 8001dbe:	e7cf      	b.n	8001d60 <__smakebuf_r+0x18>

08001dc0 <_fstat_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4d07      	ldr	r5, [pc, #28]	@ (8001de0 <_fstat_r+0x20>)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	602b      	str	r3, [r5, #0]
 8001dce:	f7fe fb67 	bl	80004a0 <_fstat>
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	d102      	bne.n	8001ddc <_fstat_r+0x1c>
 8001dd6:	682b      	ldr	r3, [r5, #0]
 8001dd8:	b103      	cbz	r3, 8001ddc <_fstat_r+0x1c>
 8001dda:	6023      	str	r3, [r4, #0]
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
 8001dde:	bf00      	nop
 8001de0:	200001e4 	.word	0x200001e4

08001de4 <_isatty_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4d06      	ldr	r5, [pc, #24]	@ (8001e00 <_isatty_r+0x1c>)
 8001de8:	2300      	movs	r3, #0
 8001dea:	4604      	mov	r4, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	602b      	str	r3, [r5, #0]
 8001df0:	f7fe fb65 	bl	80004be <_isatty>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_isatty_r+0x1a>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_isatty_r+0x1a>
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	200001e4 	.word	0x200001e4

08001e04 <_init>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr

08001e10 <_fini>:
 8001e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e12:	bf00      	nop
 8001e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e16:	bc08      	pop	{r3}
 8001e18:	469e      	mov	lr, r3
 8001e1a:	4770      	bx	lr
