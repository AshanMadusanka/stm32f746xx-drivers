
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c98  08000c98  00001c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ca4  08000ca4  00001cb4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ca4  08000ca4  00001ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cac  08000cb4  00001cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cac  08000cac  00001cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cb0  08000cb0  00001cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000cb4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000cb4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011e0  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040d  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  000032d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e8  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a2b  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a6a  00000000  00000000  00005f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009969  00000000  00000000  0000799d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000047c  00000000  00000000  0001134c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000c80 	.word	0x08000c80

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000c80 	.word	0x08000c80

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <main>:
    for (uint32_t i = 0; i < 5000000; i++) {
        // Simple delay loop
    }
}

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0


    char user_data[] = "Hello world";
 800021e:	4a15      	ldr	r2, [pc, #84]	@ (8000274 <main+0x5c>)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	ca07      	ldmia	r2, {r0, r1, r2}
 8000224:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    SPI_GpioInit();
 8000228:	f000 f828 	bl	800027c <SPI_GpioInit>
    SPI2_Inits();
 800022c:	f000 f84e 	bl	80002cc <SPI2_Inits>

    SPI_SSOEConfig(SPI2,ENABLE);
 8000230:	2101      	movs	r1, #1
 8000232:	4811      	ldr	r0, [pc, #68]	@ (8000278 <main+0x60>)
 8000234:	f000 fce3 	bl	8000bfe <SPI_SSOEConfig>

    SPI_PeripheralControl(SPI2, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	480f      	ldr	r0, [pc, #60]	@ (8000278 <main+0x60>)
 800023c:	f000 fcc3 	bl	8000bc6 <SPI_PeripheralControl>

    uint8_t data_length = strlen(user_data);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ffe0 	bl	8000208 <strlen>
 8000248:	4603      	mov	r3, r0
 800024a:	b2db      	uxtb	r3, r3
 800024c:	70fb      	strb	r3, [r7, #3]
    SPI_SendData(SPI2,&data_length,1);
 800024e:	1cfb      	adds	r3, r7, #3
 8000250:	2201      	movs	r2, #1
 8000252:	4619      	mov	r1, r3
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <main+0x60>)
 8000256:	f000 fc7f 	bl	8000b58 <SPI_SendData>
    SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffd3 	bl	8000208 <strlen>
 8000262:	4602      	mov	r2, r0
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	4803      	ldr	r0, [pc, #12]	@ (8000278 <main+0x60>)
 800026a:	f000 fc75 	bl	8000b58 <SPI_SendData>


   // SPI_PeripheralControl(SPI2, DISABLE);

    while(1);
 800026e:	bf00      	nop
 8000270:	e7fd      	b.n	800026e <main+0x56>
 8000272:	bf00      	nop
 8000274:	08000c98 	.word	0x08000c98
 8000278:	40003800 	.word	0x40003800

0800027c <SPI_GpioInit>:

}


void SPI_GpioInit() {
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

    GPIO_Handle_t SPIPins;

    SPIPins.pGPIOx = GPIOB; // Use GPIOB for SPI2
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <SPI_GpioInit+0x4c>)
 8000284:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT; // Set to alternate function mode
 8000286:	2302      	movs	r3, #2
 8000288:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5; // Alternate function for SPI2
 800028a:	2305      	movs	r3, #5
 800028c:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-pull output type
 800028e:	2300      	movs	r3, #0
 8000290:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // No pull-up or pull-down
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; // Fast speed
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]

    // Configure SPI2 pins
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9; // NSS
 800029a:	2309      	movs	r3, #9
 800029c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f973 	bl	800058c <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10; // SCK
 80002a6:	230a      	movs	r3, #10
 80002a8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f96d 	bl	800058c <GPIO_Init>

    // SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14; // MISO
    // GPIO_Init(&SPIPins);

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15; // MOSI
 80002b2:	230f      	movs	r3, #15
 80002b4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f967 	bl	800058c <GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <SPI2_Inits>:

void SPI2_Inits() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle;

    SPI2Handle.pSPIx = SPI2;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <SPI2_Inits+0x38>)
 80002d4:	607b      	str	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	2301      	movs	r3, #1
 80002d8:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002da:	2301      	movs	r3, #1
 80002dc:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]
    SPI2Handle.SPIConfig.SPI_CPOL =SPI_CPOL_LOW;
 80002e6:	2300      	movs	r3, #0
 80002e8:	733b      	strb	r3, [r7, #12]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002ea:	2300      	movs	r3, #0
 80002ec:	737b      	strb	r3, [r7, #13]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Disable software slave management
 80002ee:	2300      	movs	r3, #0
 80002f0:	73bb      	strb	r3, [r7, #14]

    SPI_Init(&SPI2Handle);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fbc7 	bl	8000a88 <SPI_Init>


}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40003800 	.word	0x40003800

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	@ (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	@ (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	@ (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 fc7f 	bl	8000c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ff6d 	bl	8000218 <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800034c:	08000cb4 	.word	0x08000cb4
  ldr r2, =_sbss
 8000350:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000354:	2000001c 	.word	0x2000001c

08000358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC_IRQHandler>
	...

0800035c <GPIO_PeriClockControl>:
 * @brief  Enables or disables the peripheral clock for the given GPIO port.
 * @param  pGPIOx: Pointer to the GPIO port base address.
 * @param  EnorDi: ENABLE to enable the clock, DISABLE to disable the clock.
 * @retval None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]

    if(EnorDi == ENABLE){
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d178      	bne.n	8000460 <GPIO_PeriClockControl+0x104>

      if (pGPIOx == GPIOA) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a7a      	ldr	r2, [pc, #488]	@ (800055c <GPIO_PeriClockControl+0x200>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x28>

          GPIOA_PCLK_EN();
 8000376:	4b7a      	ldr	r3, [pc, #488]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a79      	ldr	r2, [pc, #484]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
      else if(pGPIOx == GPIOK) {

          GPIOK_PCLK_DI();
      }
  }
}
 8000382:	e0e5      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a77      	ldr	r2, [pc, #476]	@ (8000564 <GPIO_PeriClockControl+0x208>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x3e>
          GPIOB_PCLK_EN();
 800038c:	4b74      	ldr	r3, [pc, #464]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a73      	ldr	r2, [pc, #460]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e0da      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a72      	ldr	r2, [pc, #456]	@ (8000568 <GPIO_PeriClockControl+0x20c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x54>
          GPIOC_PCLK_EN();
 80003a2:	4b6f      	ldr	r3, [pc, #444]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a6e      	ldr	r2, [pc, #440]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e0cf      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a6e      	ldr	r2, [pc, #440]	@ (800056c <GPIO_PeriClockControl+0x210>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x6a>
          GPIOD_PCLK_EN();
 80003b8:	4b69      	ldr	r3, [pc, #420]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a68      	ldr	r2, [pc, #416]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e0c4      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a69      	ldr	r2, [pc, #420]	@ (8000570 <GPIO_PeriClockControl+0x214>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x80>
          GPIOE_PCLK_EN();
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a63      	ldr	r2, [pc, #396]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e0b9      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a65      	ldr	r2, [pc, #404]	@ (8000574 <GPIO_PeriClockControl+0x218>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x96>
          GPIOF_PCLK_EN();
 80003e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a5d      	ldr	r2, [pc, #372]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	e0ae      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a60      	ldr	r2, [pc, #384]	@ (8000578 <GPIO_PeriClockControl+0x21c>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0xac>
          GPIOG_PCLK_EN();
 80003fa:	4b59      	ldr	r3, [pc, #356]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	4a58      	ldr	r2, [pc, #352]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000404:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000406:	e0a3      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a5c      	ldr	r2, [pc, #368]	@ (800057c <GPIO_PeriClockControl+0x220>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0xc2>
          GPIOH_PCLK_EN();
 8000410:	4b53      	ldr	r3, [pc, #332]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000414:	4a52      	ldr	r2, [pc, #328]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041c:	e098      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a57      	ldr	r2, [pc, #348]	@ (8000580 <GPIO_PeriClockControl+0x224>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0xd8>
          GPIOI_PCLK_EN();
 8000426:	4b4e      	ldr	r3, [pc, #312]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042a:	4a4d      	ldr	r2, [pc, #308]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800042c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000430:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000432:	e08d      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a53      	ldr	r2, [pc, #332]	@ (8000584 <GPIO_PeriClockControl+0x228>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0xee>
          GPIOJ_PCLK_EN();
 800043c:	4b48      	ldr	r3, [pc, #288]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a47      	ldr	r2, [pc, #284]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000448:	e082      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a4e      	ldr	r2, [pc, #312]	@ (8000588 <GPIO_PeriClockControl+0x22c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d17e      	bne.n	8000550 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_EN();
 8000452:	4b43      	ldr	r3, [pc, #268]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	4a42      	ldr	r2, [pc, #264]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000458:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800045c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045e:	e077      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      if (pGPIOx == GPIOA) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a3e      	ldr	r2, [pc, #248]	@ (800055c <GPIO_PeriClockControl+0x200>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x11a>
          GPIOA_PCLK_DI();
 8000468:	4b3d      	ldr	r3, [pc, #244]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a3c      	ldr	r2, [pc, #240]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000474:	e06c      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOB) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a3a      	ldr	r2, [pc, #232]	@ (8000564 <GPIO_PeriClockControl+0x208>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x130>
          GPIOB_PCLK_DI();
 800047e:	4b38      	ldr	r3, [pc, #224]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000482:	4a37      	ldr	r2, [pc, #220]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000484:	f023 0302 	bic.w	r3, r3, #2
 8000488:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048a:	e061      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOC) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a36      	ldr	r2, [pc, #216]	@ (8000568 <GPIO_PeriClockControl+0x20c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x146>
          GPIOC_PCLK_DI();
 8000494:	4b32      	ldr	r3, [pc, #200]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a31      	ldr	r2, [pc, #196]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800049a:	f023 0304 	bic.w	r3, r3, #4
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a0:	e056      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOD) {
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a31      	ldr	r2, [pc, #196]	@ (800056c <GPIO_PeriClockControl+0x210>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x15c>
          GPIOD_PCLK_DI();
 80004aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004b0:	f023 0308 	bic.w	r3, r3, #8
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b6:	e04b      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOE) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000570 <GPIO_PeriClockControl+0x214>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x172>
          GPIOE_PCLK_DI();
 80004c0:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004c6:	f023 0310 	bic.w	r3, r3, #16
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e040      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOF) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a28      	ldr	r2, [pc, #160]	@ (8000574 <GPIO_PeriClockControl+0x218>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x188>
          GPIOF_PCLK_DI();
 80004d6:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004dc:	f023 0320 	bic.w	r3, r3, #32
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e035      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOG) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a24      	ldr	r2, [pc, #144]	@ (8000578 <GPIO_PeriClockControl+0x21c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0x19e>
          GPIOG_PCLK_DI();
 80004ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 80004f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e02a      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOH) {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a1f      	ldr	r2, [pc, #124]	@ (800057c <GPIO_PeriClockControl+0x220>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0x1b4>
          GPIOH_PCLK_DI();
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e01f      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOI) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <GPIO_PeriClockControl+0x224>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0x1ca>
          GPIOI_PCLK_DI();
 8000518:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800051e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	e014      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOJ) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <GPIO_PeriClockControl+0x228>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x1e0>
          GPIOJ_PCLK_DI();
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000534:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800053a:	e009      	b.n	8000550 <GPIO_PeriClockControl+0x1f4>
      else if(pGPIOx == GPIOK) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <GPIO_PeriClockControl+0x22c>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d105      	bne.n	8000550 <GPIO_PeriClockControl+0x1f4>
          GPIOK_PCLK_DI();
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000548:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <GPIO_PeriClockControl+0x204>)
 800054a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800054e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40020000 	.word	0x40020000
 8000560:	40023800 	.word	0x40023800
 8000564:	40020400 	.word	0x40020400
 8000568:	40020800 	.word	0x40020800
 800056c:	40020c00 	.word	0x40020c00
 8000570:	40021000 	.word	0x40021000
 8000574:	40021400 	.word	0x40021400
 8000578:	40021800 	.word	0x40021800
 800057c:	40021c00 	.word	0x40021c00
 8000580:	40022000 	.word	0x40022000
 8000584:	40022400 	.word	0x40022400
 8000588:	40022800 	.word	0x40022800

0800058c <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing pin configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

    GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fede 	bl	800035c <GPIO_PeriClockControl>
    uint32_t temp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]

    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d820      	bhi.n	80005ee <GPIO_Init+0x62>

        temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	461a      	mov	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	4619      	mov	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	400a      	ands	r2, r1
 80005da:	601a      	str	r2, [r3, #0]

        pGPIOHandle->pGPIOx->MODER |= temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6819      	ldr	r1, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e0f3      	b.n	80007d6 <GPIO_Init+0x24a>
    }
    else {

        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d117      	bne.n	8000626 <GPIO_Init+0x9a>

            // Configure FTSR
            EXTI->RTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b58      	ldr	r3, [pc, #352]	@ (8000758 <GPIO_Init+0x1cc>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	43d2      	mvns	r2, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a53      	ldr	r2, [pc, #332]	@ (8000758 <GPIO_Init+0x1cc>)
 800060a:	400b      	ands	r3, r1
 800060c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b52      	ldr	r3, [pc, #328]	@ (8000758 <GPIO_Init+0x1cc>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a4e      	ldr	r2, [pc, #312]	@ (8000758 <GPIO_Init+0x1cc>)
 8000620:	430b      	orrs	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
 8000624:	e031      	b.n	800068a <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d117      	bne.n	800065e <GPIO_Init+0xd2>

            // Configure RTSR
            EXTI->FTSR &=~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	4b4a      	ldr	r3, [pc, #296]	@ (8000758 <GPIO_Init+0x1cc>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	43d2      	mvns	r2, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a45      	ldr	r2, [pc, #276]	@ (8000758 <GPIO_Init+0x1cc>)
 8000642:	400b      	ands	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b44      	ldr	r3, [pc, #272]	@ (8000758 <GPIO_Init+0x1cc>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a40      	ldr	r2, [pc, #256]	@ (8000758 <GPIO_Init+0x1cc>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
 800065c:	e015      	b.n	800068a <GPIO_Init+0xfe>
        }
        else {

            // Configure Both  FTSR, RTSR
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b3e      	ldr	r3, [pc, #248]	@ (8000758 <GPIO_Init+0x1cc>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a3a      	ldr	r2, [pc, #232]	@ (8000758 <GPIO_Init+0x1cc>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000674:	4b38      	ldr	r3, [pc, #224]	@ (8000758 <GPIO_Init+0x1cc>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a34      	ldr	r2, [pc, #208]	@ (8000758 <GPIO_Init+0x1cc>)
 8000686:	430b      	orrs	r3, r1
 8000688:	60d3      	str	r3, [r2, #12]
        }

        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Unmask the interrupt for the pin
 800068a:	4b33      	ldr	r3, [pc, #204]	@ (8000758 <GPIO_Init+0x1cc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <GPIO_Init+0x1cc>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6013      	str	r3, [r2, #0]

        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // Determine the EXTI line register (0-3)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4; // Determine the bit position within the register
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	72bb      	strb	r3, [r7, #10]
        SYSCFG_PCLK_EN();
 80006b2:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <GPIO_Init+0x1d0>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	4a29      	ldr	r2, [pc, #164]	@ (800075c <GPIO_Init+0x1d0>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	@ 0x44
        uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <GPIO_Init+0x1d4>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d061      	beq.n	800078c <GPIO_Init+0x200>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	@ (8000764 <GPIO_Init+0x1d8>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d040      	beq.n	8000754 <GPIO_Init+0x1c8>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <GPIO_Init+0x1dc>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d039      	beq.n	8000750 <GPIO_Init+0x1c4>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <GPIO_Init+0x1e0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d032      	beq.n	800074c <GPIO_Init+0x1c0>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <GPIO_Init+0x1e4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d02b      	beq.n	8000748 <GPIO_Init+0x1bc>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <GPIO_Init+0x1e8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d024      	beq.n	8000744 <GPIO_Init+0x1b8>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <GPIO_Init+0x1ec>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d01d      	beq.n	8000740 <GPIO_Init+0x1b4>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <GPIO_Init+0x1f0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d016      	beq.n	800073c <GPIO_Init+0x1b0>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <GPIO_Init+0x1f4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d00f      	beq.n	8000738 <GPIO_Init+0x1ac>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <GPIO_Init+0x1f8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d008      	beq.n	8000734 <GPIO_Init+0x1a8>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <GPIO_Init+0x1fc>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d101      	bne.n	8000730 <GPIO_Init+0x1a4>
 800072c:	230a      	movs	r3, #10
 800072e:	e02e      	b.n	800078e <GPIO_Init+0x202>
 8000730:	2300      	movs	r3, #0
 8000732:	e02c      	b.n	800078e <GPIO_Init+0x202>
 8000734:	2309      	movs	r3, #9
 8000736:	e02a      	b.n	800078e <GPIO_Init+0x202>
 8000738:	2308      	movs	r3, #8
 800073a:	e028      	b.n	800078e <GPIO_Init+0x202>
 800073c:	2307      	movs	r3, #7
 800073e:	e026      	b.n	800078e <GPIO_Init+0x202>
 8000740:	2306      	movs	r3, #6
 8000742:	e024      	b.n	800078e <GPIO_Init+0x202>
 8000744:	2305      	movs	r3, #5
 8000746:	e022      	b.n	800078e <GPIO_Init+0x202>
 8000748:	2304      	movs	r3, #4
 800074a:	e020      	b.n	800078e <GPIO_Init+0x202>
 800074c:	2303      	movs	r3, #3
 800074e:	e01e      	b.n	800078e <GPIO_Init+0x202>
 8000750:	2302      	movs	r3, #2
 8000752:	e01c      	b.n	800078e <GPIO_Init+0x202>
 8000754:	2301      	movs	r3, #1
 8000756:	e01a      	b.n	800078e <GPIO_Init+0x202>
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400
 8000768:	40020800 	.word	0x40020800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40021000 	.word	0x40021000
 8000774:	40021400 	.word	0x40021400
 8000778:	40021800 	.word	0x40021800
 800077c:	40021c00 	.word	0x40021c00
 8000780:	40022000 	.word	0x40022000
 8000784:	40022400 	.word	0x40022400
 8000788:	40022800 	.word	0x40022800
 800078c:	2300      	movs	r3, #0
 800078e:	727b      	strb	r3, [r7, #9]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2)); // Clear bits
 8000790:	4a6c      	ldr	r2, [pc, #432]	@ (8000944 <GPIO_Init+0x3b8>)
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	3302      	adds	r3, #2
 8000796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079a:	7abb      	ldrb	r3, [r7, #10]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	210f      	movs	r1, #15
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	4966      	ldr	r1, [pc, #408]	@ (8000944 <GPIO_Init+0x3b8>)
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	4002      	ands	r2, r0
 80007ae:	3302      	adds	r3, #2
 80007b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[temp1] |= port_code << (4 *temp2);
 80007b4:	4a63      	ldr	r2, [pc, #396]	@ (8000944 <GPIO_Init+0x3b8>)
 80007b6:	7afb      	ldrb	r3, [r7, #11]
 80007b8:	3302      	adds	r3, #2
 80007ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007be:	7a79      	ldrb	r1, [r7, #9]
 80007c0:	7abb      	ldrb	r3, [r7, #10]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	495e      	ldr	r1, [pc, #376]	@ (8000944 <GPIO_Init+0x3b8>)
 80007cc:	7afb      	ldrb	r3, [r7, #11]
 80007ce:	4302      	orrs	r2, r0
 80007d0:	3302      	adds	r3, #2
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    }

    temp = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bit
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	408b      	lsls	r3, r1
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6859      	ldr	r1, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	430a      	orrs	r2, r1
 8000814:	605a      	str	r2, [r3, #4]

    temp = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]

    temp =pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2103      	movs	r1, #3
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	400a      	ands	r2, r1
 8000848:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6899      	ldr	r1, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	430a      	orrs	r2, r1
 8000858:	609a      	str	r2, [r3, #8]

    temp = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]

    temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	79db      	ldrb	r3, [r3, #7]
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	400a      	ands	r2, r1
 800088c:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	68d9      	ldr	r1, [r3, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	430a      	orrs	r2, r1
 800089c:	60da      	str	r2, [r3, #12]

    temp = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d148      	bne.n	800093c <GPIO_Init+0x3b0>
        if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < 8) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	2b07      	cmp	r3, #7
 80008b0:	d822      	bhi.n	80008f8 <GPIO_Init+0x36c>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a5b      	ldrb	r3, [r3, #9]
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[0] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear the bits
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a1a      	ldr	r2, [r3, #32]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	210f      	movs	r1, #15
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	400a      	ands	r2, r1
 80008e0:	621a      	str	r2, [r3, #32]
            pGPIOHandle->pGPIOx->AFR[0] |= temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a19      	ldr	r1, [r3, #32]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	621a      	str	r2, [r3, #32]
            temp = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
        }
    }
}
 80008f6:	e021      	b.n	800093c <GPIO_Init+0x3b0>
            temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	3b08      	subs	r3, #8
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	60fb      	str	r3, [r7, #12]
            pGPIOHandle->pGPIOx->AFR[1] &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // Clear the bits
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	791b      	ldrb	r3, [r3, #4]
 8000916:	3b08      	subs	r3, #8
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	210f      	movs	r1, #15
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	400a      	ands	r2, r1
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24
            pGPIOHandle->pGPIOx->AFR[1] |= temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	430a      	orrs	r2, r1
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013800 	.word	0x40013800

08000948 <SPI_PeriClockControl>:
#include "stm32f746xx_spi_driver.h"

#include <stdlib.h>


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE) {
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d141      	bne.n	80009de <SPI_PeriClockControl+0x96>
        if(pSPIx == SPI1) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a43      	ldr	r2, [pc, #268]	@ (8000a6c <SPI_PeriClockControl+0x124>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <SPI_PeriClockControl+0x28>
            SPI1_PCLK_EN();
 8000962:	4b43      	ldr	r3, [pc, #268]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a42      	ldr	r2, [pc, #264]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
            SPI5_PCLK_DI();
        } else if(pSPIx == SPI6) {
            SPI6_PCLK_DI();
        }
    }
}
 800096e:	e077      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI2) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a40      	ldr	r2, [pc, #256]	@ (8000a74 <SPI_PeriClockControl+0x12c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 8000978:	4b3d      	ldr	r3, [pc, #244]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	4a3c      	ldr	r2, [pc, #240]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000984:	e06c      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI3) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <SPI_PeriClockControl+0x130>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <SPI_PeriClockControl+0x54>
            SPI3_PCLK_EN();
 800098e:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a37      	ldr	r2, [pc, #220]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800099a:	e061      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI4) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a37      	ldr	r2, [pc, #220]	@ (8000a7c <SPI_PeriClockControl+0x134>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d106      	bne.n	80009b2 <SPI_PeriClockControl+0x6a>
            SPI4_PCLK_EN();
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a8:	4a31      	ldr	r2, [pc, #196]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009ae:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009b0:	e056      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI5) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a32      	ldr	r2, [pc, #200]	@ (8000a80 <SPI_PeriClockControl+0x138>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <SPI_PeriClockControl+0x80>
            SPI5_PCLK_EN();
 80009ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a2c      	ldr	r2, [pc, #176]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009c6:	e04b      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI6) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000a84 <SPI_PeriClockControl+0x13c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d147      	bne.n	8000a60 <SPI_PeriClockControl+0x118>
            SPI6_PCLK_EN();
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d4:	4a26      	ldr	r2, [pc, #152]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009da:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009dc:	e040      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        if(pSPIx == SPI1) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <SPI_PeriClockControl+0x124>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <SPI_PeriClockControl+0xac>
            SPI1_PCLK_DI();
 80009e6:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009f2:	e035      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI2) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a74 <SPI_PeriClockControl+0x12c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <SPI_PeriClockControl+0xc2>
            SPI2_PCLK_DI();
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a00:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000a06:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a08:	e02a      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI3) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a78 <SPI_PeriClockControl+0x130>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <SPI_PeriClockControl+0xd8>
            SPI3_PCLK_DI();
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a1e:	e01f      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI4) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <SPI_PeriClockControl+0x134>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <SPI_PeriClockControl+0xee>
            SPI4_PCLK_DI();
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a34:	e014      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI5) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <SPI_PeriClockControl+0x138>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <SPI_PeriClockControl+0x104>
            SPI5_PCLK_DI();
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000a48:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a4a:	e009      	b.n	8000a60 <SPI_PeriClockControl+0x118>
        } else if(pSPIx == SPI6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <SPI_PeriClockControl+0x13c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d105      	bne.n	8000a60 <SPI_PeriClockControl+0x118>
            SPI6_PCLK_DI();
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a58:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SPI_PeriClockControl+0x128>)
 8000a5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000a5e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40013000 	.word	0x40013000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40003800 	.word	0x40003800
 8000a78:	40003c00 	.word	0x40003c00
 8000a7c:	40013400 	.word	0x40013400
 8000a80:	40015000 	.word	0x40015000
 8000a84:	40015400 	.word	0x40015400

08000a88 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

    uint32_t tempreg = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
    // Enable the peripheral clock
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff54 	bl	8000948 <SPI_PeriClockControl>

    // Configure the SPI device mode
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
    // Configure the SPI bus configuration
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <SPI_Init+0x3e>

        tempreg &= ~ (pSPIHandle->SPIConfig.SPI_BusConfig << SPI_CR1_BIDIMODE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	03db      	lsls	r3, r3, #15
 8000aba:	43db      	mvns	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e014      	b.n	8000af0 <SPI_Init+0x68>
    }
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	795b      	ldrb	r3, [r3, #5]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d104      	bne.n	8000ad8 <SPI_Init+0x50>

        tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e00b      	b.n	8000af0 <SPI_Init+0x68>
    }
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	795b      	ldrb	r3, [r3, #5]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d107      	bne.n	8000af0 <SPI_Init+0x68>

        tempreg &= ~(1 << SPI_CR1_BIDIOE);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ae6:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aee:	60fb      	str	r3, [r7, #12]
    }
    // Configure the SPI clock speed
    tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    // Configure the SPI data frame format
    tempreg |=(pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	79db      	ldrb	r3, [r3, #7]
 8000b00:	02db      	lsls	r3, r3, #11
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

    // Configure the SPI software slave management
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7a1b      	ldrb	r3, [r3, #8]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

    // Configure the SPI clock polarity
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7a5b      	ldrb	r3, [r3, #9]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    pSPIHandle->pSPIx->CR1 = tempreg;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	601a      	str	r2, [r3, #0]

}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SPI_GetFlagStatus>:

void SPI_DeInit(SPI_RegDef_t *pSPIx) {
    pSPIx->CR1 = 0; // Reset the control register
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t FlagName) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]

    if (pSPIx->SR & FlagName) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SPI_GetFlagStatus+0x1a>
        return FLAGSET;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <SPI_GetFlagStatus+0x1c>
    }
    return FLAGRESET ;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
                // Loop until all data is sent
                while (Len > 0) {
 8000b64:	e027      	b.n	8000bb6 <SPI_SendData+0x5e>

                    // Wait until TXE (Transmit buffer empty) flag is set
                    while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAGRESET);
 8000b66:	bf00      	nop
 8000b68:	2102      	movs	r1, #2
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff ffe0 	bl	8000b30 <SPI_GetFlagStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f8      	beq.n	8000b68 <SPI_SendData+0x10>

                    // Check if DFF (Data Frame Format) is 16-bit
                    if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00e      	beq.n	8000ba0 <SPI_SendData+0x48>

                        // Load 16 bits of data into the data register
                        pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	60da      	str	r2, [r3, #12]
                        // Decrement length by 2 bytes
                        Len--;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
                        Len--;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
                        // Increment buffer pointer by 2 bytes
                        (uint16_t*)pTxBuffer++;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	e00a      	b.n	8000bb6 <SPI_SendData+0x5e>
                    }
                    else {
                        // Load 8 bits of data into the data register
                        pSPIx->DR = *pTxBuffer;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	60da      	str	r2, [r3, #12]
                        // Decrement length by 1 byte
                        Len--;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
                        // Increment buffer pointer by 1 byte
                        pTxBuffer++;
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
                while (Len > 0) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1d4      	bne.n	8000b66 <SPI_SendData+0xe>
                    }
                }

            }
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <SPI_PeripheralControl>:
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle) {
    // Implementation for handling SPI interrupts
    // This function should check the status of the SPI peripheral and handle the interrupt accordingly
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	70fb      	strb	r3, [r7, #3]

    if (EnorDi == ENABLE) {
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d106      	bne.n	8000be6 <SPI_PeripheralControl+0x20>
        pSPIx->CR1 |= (1 << SPI_CR1_SPE); // Set the SPE bit to enable the SPI peripheral
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	601a      	str	r2, [r3, #0]
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); // Clear the SPE bit to disable the SPI peripheral
    }
}
 8000be4:	e005      	b.n	8000bf2 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); // Clear the SPE bit to disable the SPI peripheral
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <SPI_SSOEConfig>:
    } else {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI); // Clear the SSI bit to disable internal slave select
    }
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi) {
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d106      	bne.n	8000c1e <SPI_SSOEConfig+0x20>
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE); // Set the SSOE bit to enable software slave management
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f043 0204 	orr.w	r2, r3, #4
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
    } else {
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); // Clear the SSOE bit to disable software slave management
    }
 8000c1c:	e005      	b.n	8000c2a <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); // Clear the SSOE bit to disable software slave management
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f023 0204 	bic.w	r2, r3, #4
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <__libc_init_array>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c70 <__libc_init_array+0x38>)
 8000c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8000c74 <__libc_init_array+0x3c>)
 8000c3e:	1b64      	subs	r4, r4, r5
 8000c40:	10a4      	asrs	r4, r4, #2
 8000c42:	2600      	movs	r6, #0
 8000c44:	42a6      	cmp	r6, r4
 8000c46:	d109      	bne.n	8000c5c <__libc_init_array+0x24>
 8000c48:	4d0b      	ldr	r5, [pc, #44]	@ (8000c78 <__libc_init_array+0x40>)
 8000c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8000c7c <__libc_init_array+0x44>)
 8000c4c:	f000 f818 	bl	8000c80 <_init>
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	10a4      	asrs	r4, r4, #2
 8000c54:	2600      	movs	r6, #0
 8000c56:	42a6      	cmp	r6, r4
 8000c58:	d105      	bne.n	8000c66 <__libc_init_array+0x2e>
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c60:	4798      	blx	r3
 8000c62:	3601      	adds	r6, #1
 8000c64:	e7ee      	b.n	8000c44 <__libc_init_array+0xc>
 8000c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6a:	4798      	blx	r3
 8000c6c:	3601      	adds	r6, #1
 8000c6e:	e7f2      	b.n	8000c56 <__libc_init_array+0x1e>
 8000c70:	08000cac 	.word	0x08000cac
 8000c74:	08000cac 	.word	0x08000cac
 8000c78:	08000cac 	.word	0x08000cac
 8000c7c:	08000cb0 	.word	0x08000cb0

08000c80 <_init>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr

08000c8c <_fini>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr
